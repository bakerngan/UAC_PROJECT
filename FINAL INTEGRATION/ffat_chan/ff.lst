   1              		.file	"ff.c"
   9              	.Ltext0:
  10              		.section	.text.get_fileinfo,"ax",%progbits
  11              		.align	2
  13              	get_fileinfo:
  14              	.LFB10:
  15              		.file 1 "ffat_chan/ff.c"
   1:ffat_chan/ff.c **** /*----------------------------------------------------------------------------/
   2:ffat_chan/ff.c **** /  FatFs - FAT file system module  R0.06                     (C)ChaN, 2008
   3:ffat_chan/ff.c **** /-----------------------------------------------------------------------------/
   4:ffat_chan/ff.c **** / The FatFs module is an experimenal project to implement FAT file system to
   5:ffat_chan/ff.c **** / cheap microcontrollers. This is a free software and is opened for education,
   6:ffat_chan/ff.c **** / research and development under license policy of following trems.
   7:ffat_chan/ff.c **** /
   8:ffat_chan/ff.c **** /  Copyright (C) 2008, ChaN, all right reserved.
   9:ffat_chan/ff.c **** /
  10:ffat_chan/ff.c **** / * The FatFs module is a free software and there is no warranty.
  11:ffat_chan/ff.c **** / * You can use, modify and/or redistribute it for personal, non-profit or
  12:ffat_chan/ff.c **** /   commercial use without restriction under your responsibility.
  13:ffat_chan/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:ffat_chan/ff.c **** /
  15:ffat_chan/ff.c **** /-----------------------------------------------------------------------------/
  16:ffat_chan/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:ffat_chan/ff.c **** /
  18:ffat_chan/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:ffat_chan/ff.c **** /
  20:ffat_chan/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:ffat_chan/ff.c **** /                   Removed unbuffered mode.
  22:ffat_chan/ff.c **** /                   Fixed a problem on small (<32M) patition.
  23:ffat_chan/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:ffat_chan/ff.c **** /
  25:ffat_chan/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:ffat_chan/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:ffat_chan/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algolithm to write files fast.
  28:ffat_chan/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:ffat_chan/ff.c **** /
  30:ffat_chan/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:ffat_chan/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:ffat_chan/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:ffat_chan/ff.c **** /                   Added f_mkfs().
  34:ffat_chan/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a plysical drive.
  35:ffat_chan/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:ffat_chan/ff.c **** /                   Added minimization level 3.
  37:ffat_chan/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:ffat_chan/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:ffat_chan/ff.c **** /                   Added FSInfo support.
  40:ffat_chan/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:ffat_chan/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:ffat_chan/ff.c **** /
  43:ffat_chan/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:ffat_chan/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:ffat_chan/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:ffat_chan/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:ffat_chan/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:ffat_chan/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:ffat_chan/ff.c **** /                   Fixed cached sector is not flushed when create and close
  50:ffat_chan/ff.c **** /                   without write.
  51:ffat_chan/ff.c **** /
  52:ffat_chan/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  53:ffat_chan/ff.c **** /                   Improved performance of f_lseek() on moving to the same
  54:ffat_chan/ff.c **** /                   or following cluster.
  55:ffat_chan/ff.c **** /---------------------------------------------------------------------------*/
  56:ffat_chan/ff.c **** 
  57:ffat_chan/ff.c **** #include <string.h>
  58:ffat_chan/ff.c **** #include "ff.h"			/* FatFs declarations */
  59:ffat_chan/ff.c **** #include "diskio.h"		/* Include file for user provided disk functions */
  60:ffat_chan/ff.c **** #include "monitor.h"
  61:ffat_chan/ff.c **** 
  62:ffat_chan/ff.c **** 
  63:ffat_chan/ff.c **** /*--------------------------------------------------------------------------
  64:ffat_chan/ff.c **** 
  65:ffat_chan/ff.c ****    Module Private Functions
  66:ffat_chan/ff.c **** 
  67:ffat_chan/ff.c **** ---------------------------------------------------------------------------*/
  68:ffat_chan/ff.c **** 
  69:ffat_chan/ff.c **** static
  70:ffat_chan/ff.c **** FATFS *FatFs[_DRIVES];	/* Pointer to the file system objects (logical drives) */
  71:ffat_chan/ff.c **** static
  72:ffat_chan/ff.c **** WORD fsid;				/* File system mount ID */
  73:ffat_chan/ff.c **** 
  74:ffat_chan/ff.c **** 
  75:ffat_chan/ff.c **** 
  76:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
  77:ffat_chan/ff.c **** /* Change window offset                                                  */
  78:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
  79:ffat_chan/ff.c **** 
  80:ffat_chan/ff.c **** static
  81:ffat_chan/ff.c **** BOOL move_window (	/* TRUE: successful, FALSE: failed */
  82:ffat_chan/ff.c **** 	FATFS *fs,		/* File system object */
  83:ffat_chan/ff.c **** 	DWORD sector	/* Sector number to make apperance in the fs->win[] */
  84:ffat_chan/ff.c **** )					/* Move to zero only writes back dirty window */
  85:ffat_chan/ff.c **** {
  86:ffat_chan/ff.c **** 	DWORD wsect;
  87:ffat_chan/ff.c **** 
  88:ffat_chan/ff.c **** 
  89:ffat_chan/ff.c **** 	wsect = fs->winsect;
  90:ffat_chan/ff.c **** 	if (wsect != sector) {	/* Changed current window */
  91:ffat_chan/ff.c **** #if !_FS_READONLY
  92:ffat_chan/ff.c **** 		BYTE n;
  93:ffat_chan/ff.c **** 		if (fs->winflag) {	/* Write back dirty window if needed */
  94:ffat_chan/ff.c **** 			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
  95:ffat_chan/ff.c **** 				return FALSE;
  96:ffat_chan/ff.c **** 			fs->winflag = 0;
  97:ffat_chan/ff.c **** 			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
  98:ffat_chan/ff.c **** 				for (n = fs->n_fats; n >= 2; n--) {	/* Refrect the change to FAT copy */
  99:ffat_chan/ff.c **** 					wsect += fs->sects_fat;
 100:ffat_chan/ff.c **** 					disk_write(fs->drive, fs->win, wsect, 1);
 101:ffat_chan/ff.c **** 				}
 102:ffat_chan/ff.c **** 			}
 103:ffat_chan/ff.c **** 		}
 104:ffat_chan/ff.c **** #endif
 105:ffat_chan/ff.c **** 		if (sector) {
 106:ffat_chan/ff.c **** 			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 107:ffat_chan/ff.c **** 				return FALSE;
 108:ffat_chan/ff.c **** 			fs->winsect = sector;
 109:ffat_chan/ff.c **** 		}
 110:ffat_chan/ff.c **** 	}
 111:ffat_chan/ff.c **** 	return TRUE;
 112:ffat_chan/ff.c **** }
 113:ffat_chan/ff.c **** 
 114:ffat_chan/ff.c **** 
 115:ffat_chan/ff.c **** 
 116:ffat_chan/ff.c **** 
 117:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 118:ffat_chan/ff.c **** /* Clean-up cached data                                                  */
 119:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 120:ffat_chan/ff.c **** 
 121:ffat_chan/ff.c **** #if !_FS_READONLY
 122:ffat_chan/ff.c **** static
 123:ffat_chan/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_RW_ERROR: failed */
 124:ffat_chan/ff.c **** 	FATFS *fs	/* File system object */
 125:ffat_chan/ff.c **** )
 126:ffat_chan/ff.c **** {
 127:ffat_chan/ff.c **** 	fs->winflag = 1;
 128:ffat_chan/ff.c **** 	if (!move_window(fs, 0)) return FR_RW_ERROR;
 129:ffat_chan/ff.c **** #if _USE_FSINFO
 130:ffat_chan/ff.c **** 	/* Update FSInfo sector if needed */
 131:ffat_chan/ff.c **** 	if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 132:ffat_chan/ff.c **** 		fs->winsect = 0;
 133:ffat_chan/ff.c **** 		memset(fs->win, 0, 512);
 134:ffat_chan/ff.c **** 		ST_WORD(&fs->win[BS_55AA], 0xAA55);
 135:ffat_chan/ff.c **** 		ST_DWORD(&fs->win[FSI_LeadSig], 0x41615252);
 136:ffat_chan/ff.c **** 		ST_DWORD(&fs->win[FSI_StrucSig], 0x61417272);
 137:ffat_chan/ff.c **** 		ST_DWORD(&fs->win[FSI_Free_Count], fs->free_clust);
 138:ffat_chan/ff.c **** 		ST_DWORD(&fs->win[FSI_Nxt_Free], fs->last_clust);
 139:ffat_chan/ff.c **** 		disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 140:ffat_chan/ff.c **** 		fs->fsi_flag = 0;
 141:ffat_chan/ff.c **** 	}
 142:ffat_chan/ff.c **** #endif
 143:ffat_chan/ff.c **** 	/* Make sure that no pending write process in the physical drive */
 144:ffat_chan/ff.c **** 	if (disk_ioctl(fs->drive, CTRL_SYNC, NULL) != RES_OK)
 145:ffat_chan/ff.c **** 		return FR_RW_ERROR;
 146:ffat_chan/ff.c **** 	return FR_OK;
 147:ffat_chan/ff.c **** }
 148:ffat_chan/ff.c **** #endif
 149:ffat_chan/ff.c **** 
 150:ffat_chan/ff.c **** 
 151:ffat_chan/ff.c **** 
 152:ffat_chan/ff.c **** 
 153:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 154:ffat_chan/ff.c **** /* Get a cluster status                                                  */
 155:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 156:ffat_chan/ff.c **** 
 157:ffat_chan/ff.c **** static
 158:ffat_chan/ff.c **** DWORD get_cluster (	/* 0,>=2: successful, 1: failed */
 159:ffat_chan/ff.c **** 	FATFS *fs,		/* File system object */
 160:ffat_chan/ff.c **** 	DWORD clust		/* Cluster# to get the link information */
 161:ffat_chan/ff.c **** )
 162:ffat_chan/ff.c **** {
 163:ffat_chan/ff.c **** 	WORD wc, bc;
 164:ffat_chan/ff.c **** 	DWORD fatsect;
 165:ffat_chan/ff.c **** 
 166:ffat_chan/ff.c **** 
 167:ffat_chan/ff.c **** 	if (clust >= 2 && clust < fs->max_clust) {		/* Is it a valid cluster#? */
 168:ffat_chan/ff.c **** 		fatsect = fs->fatbase;
 169:ffat_chan/ff.c **** 		switch (fs->fs_type) {
 170:ffat_chan/ff.c **** 		case FS_FAT12 :
 171:ffat_chan/ff.c **** 			bc = (WORD)clust * 3 / 2;
 172:ffat_chan/ff.c **** 			if (!move_window(fs, fatsect + (bc / SS(fs)))) break;
 173:ffat_chan/ff.c **** 			wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 174:ffat_chan/ff.c **** 			if (!move_window(fs, fatsect + (bc / SS(fs)))) break;
 175:ffat_chan/ff.c **** 			wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 176:ffat_chan/ff.c **** 			return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
 177:ffat_chan/ff.c **** 
 178:ffat_chan/ff.c **** 		case FS_FAT16 :
 179:ffat_chan/ff.c **** 			if (!move_window(fs, fatsect + (clust / (SS(fs) / 2)))) break;
 180:ffat_chan/ff.c **** 			return LD_WORD(&fs->win[((WORD)clust * 2) & (SS(fs) - 1)]);
 181:ffat_chan/ff.c **** 
 182:ffat_chan/ff.c **** 		case FS_FAT32 :
 183:ffat_chan/ff.c **** 			if (!move_window(fs, fatsect + (clust / (SS(fs) / 4)))) break;
 184:ffat_chan/ff.c **** 			return LD_DWORD(&fs->win[((WORD)clust * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 185:ffat_chan/ff.c **** 		}
 186:ffat_chan/ff.c **** 	}
 187:ffat_chan/ff.c **** 
 188:ffat_chan/ff.c **** 	return 1;	/* Out of cluster range, or an error occured */
 189:ffat_chan/ff.c **** }
 190:ffat_chan/ff.c **** 
 191:ffat_chan/ff.c **** 
 192:ffat_chan/ff.c **** 
 193:ffat_chan/ff.c **** 
 194:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 195:ffat_chan/ff.c **** /* Change a cluster status                                               */
 196:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 197:ffat_chan/ff.c **** 
 198:ffat_chan/ff.c **** #if !_FS_READONLY
 199:ffat_chan/ff.c **** static
 200:ffat_chan/ff.c **** BOOL put_cluster (	/* TRUE: successful, FALSE: failed */
 201:ffat_chan/ff.c **** 	FATFS *fs,		/* File system object */
 202:ffat_chan/ff.c **** 	DWORD clust,	/* Cluster# to change (must be 2 to fs->max_clust-1) */
 203:ffat_chan/ff.c **** 	DWORD val		/* New value to mark the cluster */
 204:ffat_chan/ff.c **** )
 205:ffat_chan/ff.c **** {
 206:ffat_chan/ff.c **** 	WORD bc;
 207:ffat_chan/ff.c **** 	BYTE *p;
 208:ffat_chan/ff.c **** 	DWORD fatsect;
 209:ffat_chan/ff.c **** 
 210:ffat_chan/ff.c **** 
 211:ffat_chan/ff.c **** 	fatsect = fs->fatbase;
 212:ffat_chan/ff.c **** 	switch (fs->fs_type) {
 213:ffat_chan/ff.c **** 	case FS_FAT12 :
 214:ffat_chan/ff.c **** 		bc = (WORD)clust * 3 / 2;
 215:ffat_chan/ff.c **** 		if (!move_window(fs, fatsect + (bc / SS(fs)))) return FALSE;
 216:ffat_chan/ff.c **** 		p = &fs->win[bc & (SS(fs) - 1)];
 217:ffat_chan/ff.c **** 		*p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 218:ffat_chan/ff.c **** 		bc++;
 219:ffat_chan/ff.c **** 		fs->winflag = 1;
 220:ffat_chan/ff.c **** 		if (!move_window(fs, fatsect + (bc / SS(fs)))) return FALSE;
 221:ffat_chan/ff.c **** 		p = &fs->win[bc & (SS(fs) - 1)];
 222:ffat_chan/ff.c **** 		*p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 223:ffat_chan/ff.c **** 		break;
 224:ffat_chan/ff.c **** 
 225:ffat_chan/ff.c **** 	case FS_FAT16 :
 226:ffat_chan/ff.c **** 		if (!move_window(fs, fatsect + (clust / (SS(fs) / 2)))) return FALSE;
 227:ffat_chan/ff.c **** 		ST_WORD(&fs->win[((WORD)clust * 2) & (SS(fs) - 1)], (WORD)val);
 228:ffat_chan/ff.c **** 		break;
 229:ffat_chan/ff.c **** 
 230:ffat_chan/ff.c **** 	case FS_FAT32 :
 231:ffat_chan/ff.c **** 		if (!move_window(fs, fatsect + (clust / (SS(fs) / 4)))) return FALSE;
 232:ffat_chan/ff.c **** 		ST_DWORD(&fs->win[((WORD)clust * 4) & (SS(fs) - 1)], val);
 233:ffat_chan/ff.c **** 		break;
 234:ffat_chan/ff.c **** 
 235:ffat_chan/ff.c **** 	default :
 236:ffat_chan/ff.c **** 		return FALSE;
 237:ffat_chan/ff.c **** 	}
 238:ffat_chan/ff.c **** 	fs->winflag = 1;
 239:ffat_chan/ff.c **** 	return TRUE;
 240:ffat_chan/ff.c **** }
 241:ffat_chan/ff.c **** #endif /* !_FS_READONLY */
 242:ffat_chan/ff.c **** 
 243:ffat_chan/ff.c **** 
 244:ffat_chan/ff.c **** 
 245:ffat_chan/ff.c **** 
 246:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 247:ffat_chan/ff.c **** /* Remove a cluster chain                                                */
 248:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 249:ffat_chan/ff.c **** 
 250:ffat_chan/ff.c **** #if !_FS_READONLY
 251:ffat_chan/ff.c **** static
 252:ffat_chan/ff.c **** BOOL remove_chain (	/* TRUE: successful, FALSE: failed */
 253:ffat_chan/ff.c **** 	FATFS *fs,		/* File system object */
 254:ffat_chan/ff.c **** 	DWORD clust		/* Cluster# to remove chain from */
 255:ffat_chan/ff.c **** )
 256:ffat_chan/ff.c **** {
 257:ffat_chan/ff.c **** 	DWORD nxt;
 258:ffat_chan/ff.c **** 
 259:ffat_chan/ff.c **** 
 260:ffat_chan/ff.c **** 	while (clust >= 2 && clust < fs->max_clust) {
 261:ffat_chan/ff.c **** 		nxt = get_cluster(fs, clust);
 262:ffat_chan/ff.c **** 		if (nxt == 1) return FALSE;
 263:ffat_chan/ff.c **** 		if (!put_cluster(fs, clust, 0)) return FALSE;
 264:ffat_chan/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 265:ffat_chan/ff.c **** 			fs->free_clust++;
 266:ffat_chan/ff.c **** #if _USE_FSINFO
 267:ffat_chan/ff.c **** 			fs->fsi_flag = 1;
 268:ffat_chan/ff.c **** #endif
 269:ffat_chan/ff.c **** 		}
 270:ffat_chan/ff.c **** 		clust = nxt;
 271:ffat_chan/ff.c **** 	}
 272:ffat_chan/ff.c **** 	return TRUE;
 273:ffat_chan/ff.c **** }
 274:ffat_chan/ff.c **** #endif
 275:ffat_chan/ff.c **** 
 276:ffat_chan/ff.c **** 
 277:ffat_chan/ff.c **** 
 278:ffat_chan/ff.c **** 
 279:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 280:ffat_chan/ff.c **** /* Stretch or create a cluster chain                                     */
 281:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 282:ffat_chan/ff.c **** 
 283:ffat_chan/ff.c **** #if !_FS_READONLY
 284:ffat_chan/ff.c **** static
 285:ffat_chan/ff.c **** DWORD create_chain (	/* 0: No free cluster, 1: Error, >=2: New cluster number */
 286:ffat_chan/ff.c **** 	FATFS *fs,			/* File system object */
 287:ffat_chan/ff.c **** 	DWORD clust			/* Cluster# to stretch, 0 means create new */
 288:ffat_chan/ff.c **** )
 289:ffat_chan/ff.c **** {
 290:ffat_chan/ff.c **** 	DWORD cstat, ncl, scl, mcl = fs->max_clust;
 291:ffat_chan/ff.c **** 
 292:ffat_chan/ff.c **** 
 293:ffat_chan/ff.c **** 	if (clust == 0) {		/* Create new chain */
 294:ffat_chan/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 295:ffat_chan/ff.c **** 		if (scl == 0 || scl >= mcl) scl = 1;
 296:ffat_chan/ff.c **** 	}
 297:ffat_chan/ff.c **** 	else {					/* Stretch existing chain */
 298:ffat_chan/ff.c **** 		cstat = get_cluster(fs, clust);	/* Check the cluster status */
 299:ffat_chan/ff.c **** 		if (cstat < 2) return 1;		/* It is an invalid cluster */
 300:ffat_chan/ff.c **** 		if (cstat < mcl) return cstat;	/* It is already followed by next cluster */
 301:ffat_chan/ff.c **** 		scl = clust;
 302:ffat_chan/ff.c **** 	}
 303:ffat_chan/ff.c **** 
 304:ffat_chan/ff.c **** 	ncl = scl;				/* Start cluster */
 305:ffat_chan/ff.c **** 	for (;;) {
 306:ffat_chan/ff.c **** 		ncl++;							/* Next cluster */
 307:ffat_chan/ff.c **** 		if (ncl >= mcl) {				/* Wrap around */
 308:ffat_chan/ff.c **** 			ncl = 2;
 309:ffat_chan/ff.c **** 			if (ncl > scl) return 0;	/* No free custer */
 310:ffat_chan/ff.c **** 		}
 311:ffat_chan/ff.c **** 		cstat = get_cluster(fs, ncl);	/* Get the cluster status */
 312:ffat_chan/ff.c **** 		if (cstat == 0) break;			/* Found a free cluster */
 313:ffat_chan/ff.c **** 		if (cstat == 1) return 1;		/* Any error occured */
 314:ffat_chan/ff.c **** 		if (ncl == scl) return 0;		/* No free custer */
 315:ffat_chan/ff.c **** 	}
 316:ffat_chan/ff.c **** 
 317:ffat_chan/ff.c **** 	if (!put_cluster(fs, ncl, 0x0FFFFFFF)) return 1;			/* Mark the new cluster "in use" */
 318:ffat_chan/ff.c **** 	if (clust != 0 && !put_cluster(fs, clust, ncl)) return 1;	/* Link it to previous one if needed */
 319:ffat_chan/ff.c **** 
 320:ffat_chan/ff.c **** 	fs->last_clust = ncl;				/* Update fsinfo */
 321:ffat_chan/ff.c **** 	if (fs->free_clust != 0xFFFFFFFF) {
 322:ffat_chan/ff.c **** 		fs->free_clust--;
 323:ffat_chan/ff.c **** #if _USE_FSINFO
 324:ffat_chan/ff.c **** 		fs->fsi_flag = 1;
 325:ffat_chan/ff.c **** #endif
 326:ffat_chan/ff.c **** 	}
 327:ffat_chan/ff.c **** 
 328:ffat_chan/ff.c **** 	return ncl;		/* Return new cluster number */
 329:ffat_chan/ff.c **** }
 330:ffat_chan/ff.c **** #endif /* !_FS_READONLY */
 331:ffat_chan/ff.c **** 
 332:ffat_chan/ff.c **** 
 333:ffat_chan/ff.c **** 
 334:ffat_chan/ff.c **** 
 335:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 336:ffat_chan/ff.c **** /* Get sector# from cluster#                                             */
 337:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 338:ffat_chan/ff.c **** 
 339:ffat_chan/ff.c **** static
 340:ffat_chan/ff.c **** DWORD clust2sect (	/* !=0: sector number, 0: failed - invalid cluster# */
 341:ffat_chan/ff.c **** 	FATFS *fs,		/* File system object */
 342:ffat_chan/ff.c **** 	DWORD clust		/* Cluster# to be converted */
 343:ffat_chan/ff.c **** )
 344:ffat_chan/ff.c **** {
 345:ffat_chan/ff.c **** 	clust -= 2;
 346:ffat_chan/ff.c **** 	if (clust >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 347:ffat_chan/ff.c **** 	return clust * fs->csize + fs->database;
 348:ffat_chan/ff.c **** }
 349:ffat_chan/ff.c **** 
 350:ffat_chan/ff.c **** 
 351:ffat_chan/ff.c **** 
 352:ffat_chan/ff.c **** 
 353:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 354:ffat_chan/ff.c **** /* Move directory pointer to next                                        */
 355:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 356:ffat_chan/ff.c **** 
 357:ffat_chan/ff.c **** static
 358:ffat_chan/ff.c **** BOOL next_dir_entry (	/* TRUE: successful, FALSE: could not move next */
 359:ffat_chan/ff.c **** 	DIR *dj				/* Pointer to directory object */
 360:ffat_chan/ff.c **** )
 361:ffat_chan/ff.c **** {
 362:ffat_chan/ff.c **** 	DWORD clust;
 363:ffat_chan/ff.c **** 	WORD idx;
 364:ffat_chan/ff.c **** 
 365:ffat_chan/ff.c **** 
 366:ffat_chan/ff.c **** 	idx = dj->index + 1;
 367:ffat_chan/ff.c **** 	if ((idx & ((SS(dj->fs) - 1) / 32)) == 0) {		/* Table sector changed? */
 368:ffat_chan/ff.c **** 		dj->sect++;				/* Next sector */
 369:ffat_chan/ff.c **** 		if (dj->clust == 0) {	/* In static table */
 370:ffat_chan/ff.c **** 			if (idx >= dj->fs->n_rootdir) return FALSE;	/* Reached to end of table */
 371:ffat_chan/ff.c **** 		} else {					/* In dynamic table */
 372:ffat_chan/ff.c **** 			if (((idx / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 373:ffat_chan/ff.c **** 				clust = get_cluster(dj->fs, dj->clust);			/* Get next cluster */
 374:ffat_chan/ff.c **** 				if (clust < 2 || clust >= dj->fs->max_clust)	/* Reached to end of table */
 375:ffat_chan/ff.c **** 					return FALSE;
 376:ffat_chan/ff.c **** 				dj->clust = clust;				/* Initialize for new cluster */
 377:ffat_chan/ff.c **** 				dj->sect = clust2sect(dj->fs, clust);
 378:ffat_chan/ff.c **** 			}
 379:ffat_chan/ff.c **** 		}
 380:ffat_chan/ff.c **** 	}
 381:ffat_chan/ff.c **** 	dj->index = idx;	/* Lower several bits of dj->index indicates offset in dj->sect */
 382:ffat_chan/ff.c **** 	return TRUE;
 383:ffat_chan/ff.c **** }
 384:ffat_chan/ff.c **** 
 385:ffat_chan/ff.c **** 
 386:ffat_chan/ff.c **** 
 387:ffat_chan/ff.c **** 
 388:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 389:ffat_chan/ff.c **** /* Get file status from directory entry                                  */
 390:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 391:ffat_chan/ff.c **** 
 392:ffat_chan/ff.c **** #if _FS_MINIMIZE <= 1
 393:ffat_chan/ff.c **** static
 394:ffat_chan/ff.c **** void get_fileinfo (	/* No return code */
 395:ffat_chan/ff.c **** 	FILINFO *finfo, /* Ptr to store the file information */
 396:ffat_chan/ff.c **** 	const BYTE *dir	/* Ptr to the directory entry */
 397:ffat_chan/ff.c **** )
 398:ffat_chan/ff.c **** {
  16              	@ args = 0, pretend = 0, frame = 0
  17              		@ frame_needed = 1, uses_anonymous_args = 0
  18              	.LVL0:
  19              		mov	ip, sp
  20 0000 0DC0A0E1 	.LCFI0:
  21              		stmfd	sp!, {r4, r5, r6, r7, fp, ip, lr, pc}
  22 0004 F0D82DE9 	.LCFI1:
  23              		.loc 1 404 0
 399:ffat_chan/ff.c **** 	BYTE n, c, a;
 400:ffat_chan/ff.c **** 	char *p;
 401:ffat_chan/ff.c **** 
 402:ffat_chan/ff.c **** 
 403:ffat_chan/ff.c **** 	p = &finfo->fname[0];
 404:ffat_chan/ff.c **** 	a = _USE_NTFLAG ? dir[DIR_NTres] : 0;		/* NT flag */
  24              	, [r1, #12]	@ zero_extendqisi2
  25 0008 0C70D1E5 	.LVL1:
  26              		.loc 1 403 0
  27              		add	r2, r0, #9
  28 000c 092080E2 	.LVL2:
  29              		.loc 1 409 0
 405:ffat_chan/ff.c **** 	for (n = 0; n < 8; n++) {	/* Convert file name (body) */
 406:ffat_chan/ff.c **** 		c = dir[n];
 407:ffat_chan/ff.c **** 		if (c == ' ') break;
 408:ffat_chan/ff.c **** 		if (c == 0x05) c = 0xE5;
 409:ffat_chan/ff.c **** 		if (a & 0x08 && c >= 'A' && c <= 'Z') c += 0x20;
  30              	3, r7, lsr #3
  31 0010 A731A0E1 		.loc 1 398 0
  32              		mov	r6, r0
  33 0014 0060A0E1 		sub	fp, ip, #4
  34 0018 04B04CE2 	.LCFI2:
  35              		.loc 1 398 0
  36              		mov	r5, r1
  37 001c 0150A0E1 		.loc 1 409 0
  38              		and	r3, r3, #1
  39 0020 013003E2 		.loc 1 404 0
  40              		mov	r4, r2
  41 0024 0240A0E1 		mov	r0, #0
  42 0028 0000A0E3 	.LVL3:
  43              	.L6:
  44              		.loc 1 406 0
  45              		ldrb	r1, [r5, r0]	@ zero_extendqisi2
  46 002c 0010D5E7 	.LVL4:
  47              		.loc 1 407 0
  48              		cmp	r1, #32
  49 0030 200051E3 		beq	.L2
  50 0034 1000000A 	.LVL5:
  51              		.loc 1 408 0
  52              		cmp	r1, #5
  53 0038 050051E3 		addeq	r1, r1, #224
  54 003c E0108102 	.LVL6:
  55              		moveq	ip, #1
  56 0040 01C0A003 		beq	.L4
  57 0044 0200000A 		cmp	r1, #64
  58 0048 400051E3 		movls	ip, #0
  59 004c 00C0A093 		movhi	ip, #1
  60 0050 01C0A083 	.L4:
  61              		.loc 1 409 0
  62              		tst	ip, r3
  63 0054 03001CE1 		.loc 1 410 0
 410:ffat_chan/ff.c **** 		*p++ = c;
  64              		.L5
  65 0058 014084E2 		cmp	r1, #90
  66              		add	ip, r1, #32
  67 005c 0200000A 		andls	r1, ip, #255
  68 0060 5A0051E3 	.LVL7:
  69 0064 20C081E2 	.L5:
  70 0068 FF100C92 		.loc 1 410 0
  71              		strb	r1, [r2, r0]
  72              		add	r0, r0, #1
  73              		.loc 1 405 0
  74 006c 0010C2E7 		cmp	r0, #8
  75 0070 010080E2 		bne	.L6
  76              	.L2:
  77 0074 080050E3 		.loc 1 412 0
  78 0078 EBFFFF1A 		ldrb	r3, [r5, #8]	@ zero_extendqisi2
  79              		cmp	r3, #32
 411:ffat_chan/ff.c **** 	}
 412:ffat_chan/ff.c **** 	if (dir[8] != ' ') {		/* Convert file name (extension) */
  80              	eq	.L8
  81 007c 0830D5E5 	.LVL8:
  82 0080 200053E3 		.loc 1 413 0
  83 0084 0400A001 		mov	r0, r4
  84 0088 1500000A 		mov	r3, #46
  85              		.loc 1 417 0
 413:ffat_chan/ff.c **** 		*p++ = '.';
  86              	2, r7, lsr #4
  87 008c 0400A0E1 		.loc 1 413 0
  88 0090 2E30A0E3 		strb	r3, [r0], #1
 414:ffat_chan/ff.c **** 		for (n = 8; n < 11; n++) {
 415:ffat_chan/ff.c **** 			c = dir[n];
 416:ffat_chan/ff.c **** 			if (c == ' ') break;
 417:ffat_chan/ff.c **** 			if (a & 0x10 && c >= 'A' && c <= 'Z') c += 0x20;
  89              	oc 1 417 0
  90 0094 2722A0E1 		and	r2, r2, #1
  91              		.loc 1 414 0
  92 0098 0130C0E4 		add	r4, r4, #4
  93              		.loc 1 413 0
  94 009c 012002E2 		mov	ip, r5
  95              	.L10:
  96 00a0 044084E2 		.loc 1 415 0
  97              		ldrb	r1, [ip, #8]	@ zero_extendqisi2
  98 00a4 05C0A0E1 		.loc 1 416 0
  99              		cmp	r1, #32
 100              		.loc 1 418 0
 101 00a8 0810DCE5 		add	ip, ip, #1
 102              		.loc 1 416 0
 103 00ac 200051E3 		beq	.L8
 418:ffat_chan/ff.c **** 			*p++ = c;
 104              	cmp	r1, #64
 105 00b0 01C08CE2 		movls	r3, #0
 106              		andhi	r3, r2, #1
 107 00b4 0A00000A 		cmp	r3, #0
 108              		beq	.L9
 109 00b8 400051E3 		cmp	r1, #90
 110 00bc 0030A093 		add	r3, r1, #32
 111 00c0 01300282 		andls	r1, r3, #255
 112 00c4 000053E3 	.LVL9:
 113 00c8 0200000A 	.L9:
 114 00cc 5A0051E3 		.loc 1 418 0
 115 00d0 203081E2 		strb	r1, [r0], #1
 116 00d4 FF100392 		.loc 1 414 0
 117              		cmp	r0, r4
 118              		bne	.L10
 119              	.LVL10:
 120 00d8 0110C0E4 	.L8:
 121              		.loc 1 421 0
 122 00dc 040050E1 		mov	r3, #0
 123 00e0 F0FFFF1A 		strb	r3, [r0, #0]
 124              		.loc 1 423 0
 125              		ldrb	r2, [r5, #11]	@ zero_extendqisi2
 419:ffat_chan/ff.c **** 		}
 420:ffat_chan/ff.c **** 	}
 421:ffat_chan/ff.c **** 	*p = '\0';
 126              	oc 1 424 0
 127 00e4 0030A0E3 		ldrb	r0, [r5, #31]	@ zero_extendqisi2
 128 00e8 0030C0E5 	.LVL11:
 422:ffat_chan/ff.c **** 
 423:ffat_chan/ff.c **** 	finfo->fattrib = dir[DIR_Attr];					/* Attribute */
 129              	rb	r3, [r5, #30]	@ zero_extendqisi2
 130 00ec 0B20D5E5 		ldrb	r1, [r5, #29]	@ zero_extendqisi2
 131 00f0 0820C6E5 	.LVL12:
 424:ffat_chan/ff.c **** 	finfo->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* Size */
 132              	v	r3, r3, asl #16
 133 00f4 1F00D5E5 		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 134              		orr	r3, r3, r0, asl #24
 135 00f8 1E30D5E5 		orr	r3, r3, r2
 136 00fc 1D10D5E5 		orr	r3, r3, r1, asl #8
 137              		str	r3, [r6, #0]
 138 0100 0338A0E1 		.loc 1 425 0
 139 0104 1C20D5E5 		ldrb	r2, [r5, #25]	@ zero_extendqisi2
 140 0108 003C83E1 		ldrb	r3, [r5, #24]	@ zero_extendqisi2
 141 010c 023083E1 		orr	r3, r3, r2, asl #8
 142 0110 013483E1 		strh	r3, [r6, #4]	@ movhi
 143 0114 003086E5 		.loc 1 426 0
 425:ffat_chan/ff.c **** 	finfo->fdate = LD_WORD(&dir[DIR_WrtDate]);		/* Date */
 144              	5, #23]	@ zero_extendqisi2
 145 0118 1920D5E5 		ldrb	r3, [r5, #22]	@ zero_extendqisi2
 146 011c 1830D5E5 		orr	r3, r3, r2, asl #8
 147 0120 023483E1 		strh	r3, [r6, #6]	@ movhi
 148 0124 B430C6E1 		.loc 1 427 0
 426:ffat_chan/ff.c **** 	finfo->ftime = LD_WORD(&dir[DIR_WrtTime]);		/* Time */
 149              	d	sp, {r4, r5, r6, r7, fp, sp, pc}
 150 0128 1720D5E5 	.LFE10:
 152 0130 023483E1 		.section	.text.f_mount,"ax",%progbits
 153 0134 B630C6E1 		.align	2
 427:ffat_chan/ff.c **** }
 154              	bal	f_mount
 156              	f_mount:
 157              	.LFB17:
 158              		.loc 1 804 0
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161              	.LVL13:
 162              		mov	ip, sp
 163              	.LCFI3:
 428:ffat_chan/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
 429:ffat_chan/ff.c **** 
 430:ffat_chan/ff.c **** 
 431:ffat_chan/ff.c **** 
 432:ffat_chan/ff.c **** 
 433:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 434:ffat_chan/ff.c **** /* Pick a paragraph and create the name in format of directory entry     */
 435:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 436:ffat_chan/ff.c **** 
 437:ffat_chan/ff.c **** static
 438:ffat_chan/ff.c **** char make_dirfile (		/* 1: error - detected an invalid format, '\0'or'/': next character */
 439:ffat_chan/ff.c **** 	const char **path,	/* Pointer to the file path pointer */
 440:ffat_chan/ff.c **** 	char *dirname		/* Pointer to directory name buffer {Name(8), Ext(3), NT flag(1)} */
 441:ffat_chan/ff.c **** )
 442:ffat_chan/ff.c **** {
 443:ffat_chan/ff.c **** 	BYTE n, t, c, a, b;
 444:ffat_chan/ff.c **** 
 445:ffat_chan/ff.c **** 
 446:ffat_chan/ff.c **** 	memset(dirname, ' ', 8+3);	/* Fill buffer with spaces */
 447:ffat_chan/ff.c **** 	a = 0; b = 0x18;	/* NT flag */
 448:ffat_chan/ff.c **** 	n = 0; t = 8;
 449:ffat_chan/ff.c **** 	for (;;) {
 450:ffat_chan/ff.c **** 		c = *(*path)++;
 451:ffat_chan/ff.c **** 		if (c == '\0' || c == '/') {		/* Reached to end of str or directory separator */
 452:ffat_chan/ff.c **** 			if (n == 0) break;
 453:ffat_chan/ff.c **** 			dirname[11] = _USE_NTFLAG ? (a & b) : 0;
 454:ffat_chan/ff.c **** 			return c;
 455:ffat_chan/ff.c **** 		}
 456:ffat_chan/ff.c **** 		if (c <= ' ' || c == 0x7F) break;		/* Reject invisible chars */
 457:ffat_chan/ff.c **** 		if (c == '.') {
 458:ffat_chan/ff.c **** 			if (!(a & 1) && n >= 1 && n <= 8) {	/* Enter extension part */
 459:ffat_chan/ff.c **** 				n = 8; t = 11; continue;
 460:ffat_chan/ff.c **** 			}
 461:ffat_chan/ff.c **** 			break;
 462:ffat_chan/ff.c **** 		}
 463:ffat_chan/ff.c **** 		if (_USE_SJIS &&
 464:ffat_chan/ff.c **** 			((c >= 0x81 && c <= 0x9F) ||	/* Accept S-JIS code */
 465:ffat_chan/ff.c **** 		    (c >= 0xE0 && c <= 0xFC))) {
 466:ffat_chan/ff.c **** 			if (n == 0 && c == 0xE5)		/* Change heading \xE5 to \x05 */
 467:ffat_chan/ff.c **** 				c = 0x05;
 468:ffat_chan/ff.c **** 			a ^= 0x01; goto md_l2;
 469:ffat_chan/ff.c **** 		}
 470:ffat_chan/ff.c **** 		if (c == '"') break;				/* Reject " */
 471:ffat_chan/ff.c **** 		if (c <= ')') goto md_l1;			/* Accept ! # $ % & ' ( ) */
 472:ffat_chan/ff.c **** 		if (c <= ',') break;				/* Reject * + , */
 473:ffat_chan/ff.c **** 		if (c <= '9') goto md_l1;			/* Accept - 0-9 */
 474:ffat_chan/ff.c **** 		if (c <= '?') break;				/* Reject : ; < = > ? */
 475:ffat_chan/ff.c **** 		if (!(a & 1)) {	/* These checks are not applied to S-JIS 2nd byte */
 476:ffat_chan/ff.c **** 			if (c == '|') break;			/* Reject | */
 477:ffat_chan/ff.c **** 			if (c >= '[' && c <= ']') break;/* Reject [ \ ] */
 478:ffat_chan/ff.c **** 			if (_USE_NTFLAG && c >= 'A' && c <= 'Z')
 479:ffat_chan/ff.c **** 				(t == 8) ? (b &= 0xF7) : (b &= 0xEF);
 480:ffat_chan/ff.c **** 			if (c >= 'a' && c <= 'z') {		/* Convert to upper case */
 481:ffat_chan/ff.c **** 				c -= 0x20;
 482:ffat_chan/ff.c **** 				if (_USE_NTFLAG) (t == 8) ? (a |= 0x08) : (a |= 0x10);
 483:ffat_chan/ff.c **** 			}
 484:ffat_chan/ff.c **** 		}
 485:ffat_chan/ff.c **** 	md_l1:
 486:ffat_chan/ff.c **** 		a &= 0xFE;
 487:ffat_chan/ff.c **** 	md_l2:
 488:ffat_chan/ff.c **** 		if (n >= t) break;
 489:ffat_chan/ff.c **** 		dirname[n++] = c;
 490:ffat_chan/ff.c **** 	}
 491:ffat_chan/ff.c **** 	return 1;
 492:ffat_chan/ff.c **** }
 493:ffat_chan/ff.c **** 
 494:ffat_chan/ff.c **** 
 495:ffat_chan/ff.c **** 
 496:ffat_chan/ff.c **** 
 497:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 498:ffat_chan/ff.c **** /* Trace a file path                                                     */
 499:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 500:ffat_chan/ff.c **** 
 501:ffat_chan/ff.c **** static
 502:ffat_chan/ff.c **** FRESULT trace_path (	/* FR_OK(0): successful, !=0: error code */
 503:ffat_chan/ff.c **** 	DIR *dj,			/* Pointer to directory object to return last directory */
 504:ffat_chan/ff.c **** 	char *fn,			/* Pointer to last segment name to return {file(8),ext(3),attr(1)} */
 505:ffat_chan/ff.c **** 	const char *path,	/* Full-path string to trace a file or directory */
 506:ffat_chan/ff.c **** 	BYTE **dir			/* Pointer to pointer to found entry to retutn */
 507:ffat_chan/ff.c **** )
 508:ffat_chan/ff.c **** {
 509:ffat_chan/ff.c **** 	DWORD clust;
 510:ffat_chan/ff.c **** 	char ds;
 511:ffat_chan/ff.c **** 	BYTE *dptr = NULL;
 512:ffat_chan/ff.c **** 	FATFS *fs = dj->fs;
 513:ffat_chan/ff.c **** 
 514:ffat_chan/ff.c **** 
 515:ffat_chan/ff.c **** 	/* Initialize directory object */
 516:ffat_chan/ff.c **** 	clust = fs->dirbase;
 517:ffat_chan/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 518:ffat_chan/ff.c **** 		dj->clust = dj->sclust = clust;
 519:ffat_chan/ff.c **** 		dj->sect = clust2sect(fs, clust);
 520:ffat_chan/ff.c **** 	} else {
 521:ffat_chan/ff.c **** 		dj->clust = dj->sclust = 0;
 522:ffat_chan/ff.c **** 		dj->sect = clust;
 523:ffat_chan/ff.c **** 	}
 524:ffat_chan/ff.c **** 	dj->index = 0;
 525:ffat_chan/ff.c **** 
 526:ffat_chan/ff.c **** 	if (*path == '\0') {					/* Null path means the root directory */
 527:ffat_chan/ff.c **** 		*dir = NULL; return FR_OK;
 528:ffat_chan/ff.c **** 	}
 529:ffat_chan/ff.c **** 
 530:ffat_chan/ff.c **** 	for (;;) {
 531:ffat_chan/ff.c **** 		ds = make_dirfile(&path, fn);			/* Get a paragraph into fn[] */
 532:ffat_chan/ff.c **** 		if (ds == 1) return FR_INVALID_NAME;
 533:ffat_chan/ff.c **** 		for (;;) {
 534:ffat_chan/ff.c **** 			if (!move_window(fs, dj->sect)) return FR_RW_ERROR;
 535:ffat_chan/ff.c **** 			dptr = &fs->win[(dj->index & ((SS(fs) - 1) / 32)) * 32];	/* Pointer to the directory entry */
 536:ffat_chan/ff.c **** 			if (dptr[DIR_Name] == 0)						/* Has it reached to end of dir? */
 537:ffat_chan/ff.c **** 				return !ds ? FR_NO_FILE : FR_NO_PATH;
 538:ffat_chan/ff.c **** 			if (dptr[DIR_Name] != 0xE5						/* Matched? */
 539:ffat_chan/ff.c **** 				&& !(dptr[DIR_Attr] & AM_VOL)
 540:ffat_chan/ff.c **** 				&& !memcmp(&dptr[DIR_Name], fn, 8+3) ) break;
 541:ffat_chan/ff.c **** 			if (!next_dir_entry(dj))						/* Next directory pointer */
 542:ffat_chan/ff.c **** 				return !ds ? FR_NO_FILE : FR_NO_PATH;
 543:ffat_chan/ff.c **** 		}
 544:ffat_chan/ff.c **** 		if (!ds) { *dir = dptr; return FR_OK; }				/* Matched with end of path */
 545:ffat_chan/ff.c **** 		if (!(dptr[DIR_Attr] & AM_DIR)) return FR_NO_PATH;	/* Cannot trace because it is a file */
 546:ffat_chan/ff.c **** 		clust = ((DWORD)LD_WORD(&dptr[DIR_FstClusHI]) << 16) | LD_WORD(&dptr[DIR_FstClusLO]); /* Get clus
 547:ffat_chan/ff.c **** 		dj->clust = dj->sclust = clust;				/* Restart scanning at the new directory */
 548:ffat_chan/ff.c **** 		dj->sect = clust2sect(fs, clust);
 549:ffat_chan/ff.c **** 		dj->index = 2;
 550:ffat_chan/ff.c **** 	}
 551:ffat_chan/ff.c **** }
 552:ffat_chan/ff.c **** 
 553:ffat_chan/ff.c **** 
 554:ffat_chan/ff.c **** 
 555:ffat_chan/ff.c **** 
 556:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 557:ffat_chan/ff.c **** /* Reserve a directory entry                                             */
 558:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 559:ffat_chan/ff.c **** 
 560:ffat_chan/ff.c **** #if !_FS_READONLY
 561:ffat_chan/ff.c **** static
 562:ffat_chan/ff.c **** FRESULT reserve_direntry (	/* FR_OK: successful, FR_DENIED: no free entry, FR_RW_ERROR: a disk erro
 563:ffat_chan/ff.c **** 	DIR *dj,				/* Target directory to create new entry */
 564:ffat_chan/ff.c **** 	BYTE **dir				/* Pointer to pointer to created entry to retutn */
 565:ffat_chan/ff.c **** )
 566:ffat_chan/ff.c **** {
 567:ffat_chan/ff.c **** 	DWORD clust, sector;
 568:ffat_chan/ff.c **** 	BYTE c, n, *dptr;
 569:ffat_chan/ff.c **** 	FATFS *fs = dj->fs;
 570:ffat_chan/ff.c **** 
 571:ffat_chan/ff.c **** 
 572:ffat_chan/ff.c **** 	/* Re-initialize directory object */
 573:ffat_chan/ff.c **** 	clust = dj->sclust;
 574:ffat_chan/ff.c **** 	if (clust != 0) {	/* Dyanmic directory table */
 575:ffat_chan/ff.c **** 		dj->clust = clust;
 576:ffat_chan/ff.c **** 		dj->sect = clust2sect(fs, clust);
 577:ffat_chan/ff.c **** 	} else {			/* Static directory table */
 578:ffat_chan/ff.c **** 		dj->sect = fs->dirbase;
 579:ffat_chan/ff.c **** 	}
 580:ffat_chan/ff.c **** 	dj->index = 0;
 581:ffat_chan/ff.c **** 
 582:ffat_chan/ff.c **** 	do {
 583:ffat_chan/ff.c **** 		if (!move_window(fs, dj->sect)) return FR_RW_ERROR;
 584:ffat_chan/ff.c **** 		dptr = &fs->win[(dj->index & ((SS(dj->fs) - 1) / 32)) * 32];	/* Pointer to the directory entry */
 585:ffat_chan/ff.c **** 		c = dptr[DIR_Name];
 586:ffat_chan/ff.c **** 		if (c == 0 || c == 0xE5) {		/* Found an empty entry */
 587:ffat_chan/ff.c **** 			*dir = dptr; return FR_OK;
 588:ffat_chan/ff.c **** 		}
 589:ffat_chan/ff.c **** 	} while (next_dir_entry(dj));		/* Next directory pointer */
 590:ffat_chan/ff.c **** 	/* Reached to end of the directory table */
 591:ffat_chan/ff.c **** 
 592:ffat_chan/ff.c **** 	/* Abort when it is a static table or could not stretch dynamic table */
 593:ffat_chan/ff.c **** 	if (clust == 0 || !(clust = create_chain(fs, dj->clust))) return FR_DENIED;
 594:ffat_chan/ff.c **** 	if (clust == 1 || !move_window(fs, 0)) return FR_RW_ERROR;
 595:ffat_chan/ff.c **** 
 596:ffat_chan/ff.c **** 	/* Cleanup the expanded table */
 597:ffat_chan/ff.c **** 	fs->winsect = sector = clust2sect(fs, clust);
 598:ffat_chan/ff.c **** 	memset(fs->win, 0, SS(fs));
 599:ffat_chan/ff.c **** 	for (n = fs->csize; n; n--) {
 600:ffat_chan/ff.c **** 		if (disk_write(fs->drive, fs->win, sector, 1) != RES_OK)
 601:ffat_chan/ff.c **** 			return FR_RW_ERROR;
 602:ffat_chan/ff.c **** 		sector++;
 603:ffat_chan/ff.c **** 	}
 604:ffat_chan/ff.c **** 	fs->winflag = 1;
 605:ffat_chan/ff.c **** 	*dir = fs->win;
 606:ffat_chan/ff.c **** 
 607:ffat_chan/ff.c **** 	return FR_OK;
 608:ffat_chan/ff.c **** }
 609:ffat_chan/ff.c **** #endif /* !_FS_READONLY */
 610:ffat_chan/ff.c **** 
 611:ffat_chan/ff.c **** 
 612:ffat_chan/ff.c **** 
 613:ffat_chan/ff.c **** 
 614:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 615:ffat_chan/ff.c **** /* Load boot record and check if it is an FAT boot record                */
 616:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 617:ffat_chan/ff.c **** 
 618:ffat_chan/ff.c **** static
 619:ffat_chan/ff.c **** BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record o
 620:ffat_chan/ff.c **** 	FATFS *fs,	/* File system object */
 621:ffat_chan/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
 622:ffat_chan/ff.c **** )
 623:ffat_chan/ff.c **** {
 624:ffat_chan/ff.c **** 	//xprintf(" fspass1 ");
 625:ffat_chan/ff.c **** 	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 626:ffat_chan/ff.c **** 		return 2;
 627:ffat_chan/ff.c **** 	//xprintf(" fspass2 ");
 628:ffat_chan/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)				/* Check record signature (always placed at offset 51
 629:ffat_chan/ff.c **** 		return 2;
 630:ffat_chan/ff.c **** 	//xprintf(" fspass3 ");
 631:ffat_chan/ff.c **** 	if (!memcmp(&fs->win[BS_FilSysType], "FAT", 3))			/* Check FAT signature */
 632:ffat_chan/ff.c **** 		return 0;
 633:ffat_chan/ff.c **** 	//xprintf(" fspass4 ");
 634:ffat_chan/ff.c **** 	if (!memcmp(&fs->win[BS_FilSysType32], "FAT32", 5) && !(fs->win[BPB_ExtFlags] & 0x80))
 635:ffat_chan/ff.c **** 		return 0;
 636:ffat_chan/ff.c **** 
 637:ffat_chan/ff.c **** 	return 1;
 638:ffat_chan/ff.c **** }
 639:ffat_chan/ff.c **** 
 640:ffat_chan/ff.c **** 
 641:ffat_chan/ff.c **** 
 642:ffat_chan/ff.c **** 
 643:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 644:ffat_chan/ff.c **** /* Make sure that the file system is valid                               */
 645:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 646:ffat_chan/ff.c **** 
 647:ffat_chan/ff.c **** static
 648:ffat_chan/ff.c **** FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
 649:ffat_chan/ff.c **** 	const char **path,	/* Pointer to pointer to the path name (drive number) */
 650:ffat_chan/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
 651:ffat_chan/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
 652:ffat_chan/ff.c **** )
 653:ffat_chan/ff.c **** {
 654:ffat_chan/ff.c **** 	BYTE drv, fmt, *tbl;
 655:ffat_chan/ff.c **** 	DSTATUS stat;
 656:ffat_chan/ff.c **** 	DWORD bootsect, fatsize, totalsect, maxclust;
 657:ffat_chan/ff.c **** 	const char *p = *path;
 658:ffat_chan/ff.c **** 	FATFS *fs;
 659:ffat_chan/ff.c **** 
 660:ffat_chan/ff.c **** 	//xprintf("pass3");
 661:ffat_chan/ff.c **** 	/* Get drive number from the path name */
 662:ffat_chan/ff.c **** 	while (*p == ' ') p++;		/* Strip leading spaces */
 663:ffat_chan/ff.c **** 	drv = p[0] - '0';			/* Is there a drive number? */
 664:ffat_chan/ff.c **** 	if (drv <= 9 && p[1] == ':')
 665:ffat_chan/ff.c **** 		p += 2;				/* Found a drive number, get and strip it */
 666:ffat_chan/ff.c **** 	else
 667:ffat_chan/ff.c **** 		drv = 0;			/* No drive number is given, use drive number 0 as default */
 668:ffat_chan/ff.c **** 	if (*p == '/') p++;		/* Strip heading slash */
 669:ffat_chan/ff.c **** 	*path = p;				/* Return pointer to the path name */
 670:ffat_chan/ff.c **** 	//xprintf("pass4");
 671:ffat_chan/ff.c **** 	/* Check if the drive number is valid or not */
 672:ffat_chan/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;	/* Is the drive number valid? */
 673:ffat_chan/ff.c **** 	*rfs = fs = FatFs[drv];					/* Return pointer to the corresponding file system object */
 674:ffat_chan/ff.c **** 	if (!fs) return FR_NOT_ENABLED;			/* Is the file system object registered? */
 675:ffat_chan/ff.c **** 	//xprintf("pass5");
 676:ffat_chan/ff.c **** 	if (fs->fs_type) {						/* If the logical drive has been mounted */
 677:ffat_chan/ff.c **** 		stat = disk_status(fs->drive);
 678:ffat_chan/ff.c **** 		if (!(stat & STA_NOINIT)) {			/* and physical drive is kept initialized (has not been changed), *
 679:ffat_chan/ff.c **** #if !_FS_READONLY
 680:ffat_chan/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 681:ffat_chan/ff.c **** 				return FR_WRITE_PROTECTED;
 682:ffat_chan/ff.c **** #endif
 683:ffat_chan/ff.c **** 			return FR_OK;					/* The file system object is valid */
 684:ffat_chan/ff.c **** 		}
 685:ffat_chan/ff.c **** 	}
 686:ffat_chan/ff.c **** 	//xprintf("pass6");
 687:ffat_chan/ff.c **** 	/* The logical drive must be re-mounted. Following code attempts to mount the logical drive */
 688:ffat_chan/ff.c **** 
 689:ffat_chan/ff.c **** 	memset(fs, 0, sizeof(FATFS));		/* Clean-up the file system object */
 690:ffat_chan/ff.c **** 	fs->drive = LD2PD(drv);				/* Bind the logical drive and a physical drive */
 691:ffat_chan/ff.c **** 	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 692:ffat_chan/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 693:ffat_chan/ff.c **** 		return FR_NOT_READY;
 694:ffat_chan/ff.c **** #if S_MAX_SIZ > 512						/* Get disk sector size if needed */
 695:ffat_chan/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > S_MAX_SIZ)
 696:ffat_chan/ff.c **** 		return FR_NO_FILESYSTEM;
 697:ffat_chan/ff.c **** #endif
 698:ffat_chan/ff.c **** #if !_FS_READONLY
 699:ffat_chan/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 700:ffat_chan/ff.c **** 		return FR_WRITE_PROTECTED;
 701:ffat_chan/ff.c **** #endif
 702:ffat_chan/ff.c **** 	//xprintf("pass7");
 703:ffat_chan/ff.c **** 	/* Search FAT partition on the drive */
 704:ffat_chan/ff.c **** 	fmt = check_fs(fs, bootsect = 0);	/* Check sector 0 as an SFD format */
 705:ffat_chan/ff.c **** 
 706:ffat_chan/ff.c **** 	//xprintf("pass8");
 707:ffat_chan/ff.c **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 708:ffat_chan/ff.c **** 		/* Check a partition listed in top of the partition table */
 709:ffat_chan/ff.c **** 		tbl = &fs->win[MBR_Table + LD2PT(drv) * 16];	/* Partition table */
 710:ffat_chan/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
 711:ffat_chan/ff.c **** 			bootsect = LD_DWORD(&tbl[8]);				/* Partition offset in LBA */
 712:ffat_chan/ff.c **** 			fmt = check_fs(fs, bootsect);				/* Check the partition */
 713:ffat_chan/ff.c **** 		}
 714:ffat_chan/ff.c **** 	}
 715:ffat_chan/ff.c **** 	if (fmt || LD_WORD(&fs->win[BPB_BytsPerSec]) != SS(fs))	/* No valid FAT patition is found */
 716:ffat_chan/ff.c **** 		return FR_NO_FILESYSTEM;
 717:ffat_chan/ff.c **** 	/* Initialize the file system object */
 718:ffat_chan/ff.c **** 	fatsize = LD_WORD(&fs->win[BPB_FATSz16]);			/* Number of sectors per FAT */
 719:ffat_chan/ff.c **** 	if (!fatsize) fatsize = LD_DWORD(&fs->win[BPB_FATSz32]);
 720:ffat_chan/ff.c **** 	fs->sects_fat = fatsize;
 721:ffat_chan/ff.c **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 722:ffat_chan/ff.c **** 	fatsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 723:ffat_chan/ff.c **** 	fs->fatbase = bootsect + LD_WORD(&fs->win[BPB_RsvdSecCnt]); /* FAT start sector (lba) */
 724:ffat_chan/ff.c **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 725:ffat_chan/ff.c **** 	fs->n_rootdir = LD_WORD(&fs->win[BPB_RootEntCnt]);	/* Nmuber of root directory entries */
 726:ffat_chan/ff.c **** 	totalsect = LD_WORD(&fs->win[BPB_TotSec16]);		/* Number of sectors on the file system */
 727:ffat_chan/ff.c **** 	if (!totalsect) totalsect = LD_DWORD(&fs->win[BPB_TotSec32]);
 728:ffat_chan/ff.c **** 	fs->max_clust = maxclust = (totalsect				/* max_clust = Last cluster# + 1 */
 729:ffat_chan/ff.c **** 		- LD_WORD(&fs->win[BPB_RsvdSecCnt]) - fatsize - fs->n_rootdir / (SS(fs)/32)
 730:ffat_chan/ff.c **** 		) / fs->csize + 2;
 731:ffat_chan/ff.c **** 	fmt = FS_FAT12;										/* Determine the FAT sub type */
 732:ffat_chan/ff.c **** 	if (maxclust >= 0xFF7) fmt = FS_FAT16;
 733:ffat_chan/ff.c **** 	if (maxclust >= 0xFFF7) fmt = FS_FAT32;
 734:ffat_chan/ff.c **** 
 735:ffat_chan/ff.c **** 	if (fmt == FS_FAT32)
 736:ffat_chan/ff.c **** 		fs->dirbase = LD_DWORD(&fs->win[BPB_RootClus]);	/* Root directory start cluster */
 737:ffat_chan/ff.c **** 	else
 738:ffat_chan/ff.c **** 		fs->dirbase = fs->fatbase + fatsize;			/* Root directory start sector (lba) */
 739:ffat_chan/ff.c **** 	fs->database = fs->fatbase + fatsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 740:ffat_chan/ff.c **** 	//xprintf("pass9");
 741:ffat_chan/ff.c **** #if !_FS_READONLY
 742:ffat_chan/ff.c **** 	/* Initialize allocation information */
 743:ffat_chan/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
 744:ffat_chan/ff.c **** #if _USE_FSINFO
 745:ffat_chan/ff.c **** 	/* Get fsinfo if needed */
 746:ffat_chan/ff.c **** 	if (fmt == FS_FAT32) {
 747:ffat_chan/ff.c **** 		fs->fsi_sector = bootsect + LD_WORD(&fs->win[BPB_FSInfo]);
 748:ffat_chan/ff.c **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 749:ffat_chan/ff.c **** 			LD_WORD(&fs->win[BS_55AA]) == 0xAA55 &&
 750:ffat_chan/ff.c **** 			LD_DWORD(&fs->win[FSI_LeadSig]) == 0x41615252 &&
 751:ffat_chan/ff.c **** 			LD_DWORD(&fs->win[FSI_StrucSig]) == 0x61417272) {
 752:ffat_chan/ff.c **** 			fs->last_clust = LD_DWORD(&fs->win[FSI_Nxt_Free]);
 753:ffat_chan/ff.c **** 			fs->free_clust = LD_DWORD(&fs->win[FSI_Free_Count]);
 754:ffat_chan/ff.c **** 		}
 755:ffat_chan/ff.c **** 	}
 756:ffat_chan/ff.c **** #endif
 757:ffat_chan/ff.c **** #endif
 758:ffat_chan/ff.c **** 	//xprintf("pass10");
 759:ffat_chan/ff.c **** 	fs->fs_type = fmt;			/* FAT syb-type */
 760:ffat_chan/ff.c **** 	fs->id = ++fsid;			/* File system mount ID */
 761:ffat_chan/ff.c **** 	return FR_OK;
 762:ffat_chan/ff.c **** }
 763:ffat_chan/ff.c **** 
 764:ffat_chan/ff.c **** 
 765:ffat_chan/ff.c **** 
 766:ffat_chan/ff.c **** 
 767:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 768:ffat_chan/ff.c **** /* Check if the file/dir object is valid or not                          */
 769:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 770:ffat_chan/ff.c **** 
 771:ffat_chan/ff.c **** static
 772:ffat_chan/ff.c **** FRESULT validate (		/* FR_OK(0): The object is valid, !=0: Invalid */
 773:ffat_chan/ff.c **** 	const FATFS *fs,	/* Pointer to the file system object */
 774:ffat_chan/ff.c **** 	WORD id				/* Member id of the target object to be checked */
 775:ffat_chan/ff.c **** )
 776:ffat_chan/ff.c **** {
 777:ffat_chan/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
 778:ffat_chan/ff.c **** 		return FR_INVALID_OBJECT;
 779:ffat_chan/ff.c **** 	if (disk_status(fs->drive) & STA_NOINIT)
 780:ffat_chan/ff.c **** 		return FR_NOT_READY;
 781:ffat_chan/ff.c **** 
 782:ffat_chan/ff.c **** 	return FR_OK;
 783:ffat_chan/ff.c **** }
 784:ffat_chan/ff.c **** 
 785:ffat_chan/ff.c **** 
 786:ffat_chan/ff.c **** 
 787:ffat_chan/ff.c **** 
 788:ffat_chan/ff.c **** /*--------------------------------------------------------------------------
 789:ffat_chan/ff.c **** 
 790:ffat_chan/ff.c ****    Public Functions
 791:ffat_chan/ff.c **** 
 792:ffat_chan/ff.c **** --------------------------------------------------------------------------*/
 793:ffat_chan/ff.c **** 
 794:ffat_chan/ff.c **** 
 795:ffat_chan/ff.c **** 
 796:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 797:ffat_chan/ff.c **** /* Mount/Unmount a Locical Drive                                         */
 798:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 799:ffat_chan/ff.c **** 
 800:ffat_chan/ff.c **** FRESULT f_mount (
 801:ffat_chan/ff.c **** 	BYTE drv,		/* Logical drive number to be mounted/unmounted */
 802:ffat_chan/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
 803:ffat_chan/ff.c **** )
 804:ffat_chan/ff.c **** {
 164              	5 0
 165              		ands	r2, r0, #255
 166              	.LVL14:
 167              		.loc 1 804 0
 168 0000 0DC0A0E1 		stmfd	sp!, {fp, ip, lr, pc}
 169              	.LCFI4:
 805:ffat_chan/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 170              	0, r1
 171 0004 FF2010E2 		sub	fp, ip, #4
 172              	.LCFI5:
 173              		.loc 1 805 0
 174 0008 00D82DE9 		movne	r0, #5
 175              		ldmnefd	sp, {fp, sp, pc}
 176 000c 0100A0E1 		.loc 1 807 0
 177 0010 04B04CE2 		ldr	r1, .L21
 178              	.LVL15:
 179              		ldr	r3, [r1, #0]
 180 0014 0500A013 		cmp	r3, #0
 181 0018 00A89D18 		strneb	r2, [r3, #42]
 806:ffat_chan/ff.c **** 
 807:ffat_chan/ff.c **** 	if (FatFs[drv]) FatFs[drv]->fs_type = 0;	/* Clear old object */
 182              	0
 183 001c 20109FE5 		cmp	r0, #0
 184              	.LVL16:
 185 0020 003091E5 		movne	r3, #0
 186 0024 000053E3 		.loc 1 809 0
 187 0028 2A20C315 		str	r0, [r1, #0]
 808:ffat_chan/ff.c **** 
 809:ffat_chan/ff.c **** 	FatFs[drv] = fs;			/* Register and clear new object */
 810:ffat_chan/ff.c **** 	if (fs) fs->fs_type = 0;
 188              	1 810 0
 189 002c 000050E3 		strneb	r3, [r0, #42]
 190              		movne	r0, r3
 191 0030 0030A013 	.LVL17:
 192              		.loc 1 813 0
 193 0034 000081E5 		ldmfd	sp, {fp, sp, pc}
 194              	.L22:
 195 0038 2A30C015 		.align	2
 196 003c 0300A011 	.L21:
 197              		.word	FatFs
 811:ffat_chan/ff.c **** 
 812:ffat_chan/ff.c **** 	return FR_OK;
 813:ffat_chan/ff.c **** }
 198              	size	f_mount, .-f_mount
 199 0040 00A89DE8 		.global	__udivsi3
 200              		.section	.rodata.str1.4,"aMS",%progbits,1
 201              		.align	2
 202              	.LC0:
 203 0044 00000000 		.ascii	"NO NAME    FAT     \000"
 204              		.align	2
 205              	.LC1:
 206              		.ascii	"NO NAME    FAT32   \000"
 207              		.section	.text.f_mkfs,"ax",%progbits
 208              		.align	2
 209              		.global	f_mkfs
 211              	f_mkfs:
 212              	.LFB34:
 213 0014 4E4F204E 		.loc 1 1689 0
 213      414D4520 
 213      20202046 
 213      41543332 
 213      20202000 
 214              		@ args = 0, pretend = 0, frame = 52
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216              	.LVL18:
 217              		mov	ip, sp
 218              	.LCFI6:
 219              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 814:ffat_chan/ff.c **** 
 815:ffat_chan/ff.c **** 
 816:ffat_chan/ff.c **** 
 817:ffat_chan/ff.c **** 
 818:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 819:ffat_chan/ff.c **** /* Open or Create a File                                                 */
 820:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 821:ffat_chan/ff.c **** 
 822:ffat_chan/ff.c **** FRESULT f_open (
 823:ffat_chan/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
 824:ffat_chan/ff.c **** 	const char *path,	/* Pointer to the file name */
 825:ffat_chan/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
 826:ffat_chan/ff.c **** )
 827:ffat_chan/ff.c **** {
 828:ffat_chan/ff.c **** 	FRESULT res;
 829:ffat_chan/ff.c **** 	DIR dj;
 830:ffat_chan/ff.c **** 	BYTE *dir;
 831:ffat_chan/ff.c **** 	char fn[8+3+1];
 832:ffat_chan/ff.c **** 
 833:ffat_chan/ff.c **** 
 834:ffat_chan/ff.c **** 	fp->fs = NULL;		/* Clear file object */
 835:ffat_chan/ff.c **** #if !_FS_READONLY
 836:ffat_chan/ff.c **** 	mode &= (FA_READ|FA_WRITE|FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW);
 837:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE|FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_
 838:ffat_chan/ff.c **** #else
 839:ffat_chan/ff.c **** 	mode &= FA_READ;
 840:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj.fs, 0);
 841:ffat_chan/ff.c **** #endif
 842:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
 843:ffat_chan/ff.c **** 	res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
 844:ffat_chan/ff.c **** 
 845:ffat_chan/ff.c **** #if !_FS_READONLY
 846:ffat_chan/ff.c **** 	/* Create or Open a file */
 847:ffat_chan/ff.c **** 	if (mode & (FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW)) {
 848:ffat_chan/ff.c **** 		DWORD ps, rs;
 849:ffat_chan/ff.c **** 		if (res != FR_OK) {		/* No file, create new */
 850:ffat_chan/ff.c **** 			if (res != FR_NO_FILE) return res;
 851:ffat_chan/ff.c **** 			res = reserve_direntry(&dj, &dir);
 852:ffat_chan/ff.c **** 			if (res != FR_OK) return res;
 853:ffat_chan/ff.c **** 			memset(dir, 0, 32);		/* Initialize the new entry with open name */
 854:ffat_chan/ff.c **** 			memcpy(&dir[DIR_Name], fn, 8+3);
 855:ffat_chan/ff.c **** 			dir[DIR_NTres] = fn[11];
 856:ffat_chan/ff.c **** 			mode |= FA_CREATE_ALWAYS;
 857:ffat_chan/ff.c **** 		}
 858:ffat_chan/ff.c **** 		else {					/* Any object is already existing */
 859:ffat_chan/ff.c **** 			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 860:ffat_chan/ff.c **** 				return FR_EXIST;
 861:ffat_chan/ff.c **** 			if (!dir || (dir[DIR_Attr] & (AM_RDO|AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 862:ffat_chan/ff.c **** 				return FR_DENIED;
 863:ffat_chan/ff.c **** 			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero if needed */
 864:ffat_chan/ff.c **** 				rs = ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);	/* Get start c
 865:ffat_chan/ff.c **** 				ST_WORD(&dir[DIR_FstClusHI], 0);	/* cluster = 0 */
 866:ffat_chan/ff.c **** 				ST_WORD(&dir[DIR_FstClusLO], 0);
 867:ffat_chan/ff.c **** 				ST_DWORD(&dir[DIR_FileSize], 0);	/* size = 0 */
 868:ffat_chan/ff.c **** 				dj.fs->winflag = 1;
 869:ffat_chan/ff.c **** 				ps = dj.fs->winsect;			/* Remove the cluster chain */
 870:ffat_chan/ff.c **** 				if (!remove_chain(dj.fs, rs) || !move_window(dj.fs, ps))
 871:ffat_chan/ff.c **** 					return FR_RW_ERROR;
 872:ffat_chan/ff.c **** 				dj.fs->last_clust = rs - 1;		/* Reuse the cluster hole */
 873:ffat_chan/ff.c **** 			}
 874:ffat_chan/ff.c **** 		}
 875:ffat_chan/ff.c **** 		if (mode & FA_CREATE_ALWAYS) {
 876:ffat_chan/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 877:ffat_chan/ff.c **** 			ps = get_fattime();
 878:ffat_chan/ff.c **** 			ST_DWORD(&dir[DIR_CrtTime], ps);	/* Created time */
 879:ffat_chan/ff.c **** 			dj.fs->winflag = 1;
 880:ffat_chan/ff.c **** 			mode |= FA__WRITTEN;				/* Set file changed flag */
 881:ffat_chan/ff.c **** 		}
 882:ffat_chan/ff.c **** 	}
 883:ffat_chan/ff.c **** 	/* Open an existing file */
 884:ffat_chan/ff.c **** 	else {
 885:ffat_chan/ff.c **** #endif /* !_FS_READONLY */
 886:ffat_chan/ff.c **** 		if (res != FR_OK) return res;			/* Trace failed */
 887:ffat_chan/ff.c **** 		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 888:ffat_chan/ff.c **** 			return FR_NO_FILE;
 889:ffat_chan/ff.c **** #if !_FS_READONLY
 890:ffat_chan/ff.c **** 		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 891:ffat_chan/ff.c **** 			return FR_DENIED;
 892:ffat_chan/ff.c **** 	}
 893:ffat_chan/ff.c **** 	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 894:ffat_chan/ff.c **** 	fp->dir_ptr = dir;
 895:ffat_chan/ff.c **** #endif
 896:ffat_chan/ff.c **** 	fp->flag = mode;					/* File access mode */
 897:ffat_chan/ff.c **** 	fp->org_clust =						/* File start cluster */
 898:ffat_chan/ff.c **** 		((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
 899:ffat_chan/ff.c **** 	fp->fsize = LD_DWORD(&dir[DIR_FileSize]);	/* File size */
 900:ffat_chan/ff.c **** 	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 901:ffat_chan/ff.c **** 	fp->curr_sect = 0;
 902:ffat_chan/ff.c **** 	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 903:ffat_chan/ff.c **** 
 904:ffat_chan/ff.c **** 	return FR_OK;
 905:ffat_chan/ff.c **** }
 906:ffat_chan/ff.c **** 
 907:ffat_chan/ff.c **** 
 908:ffat_chan/ff.c **** 
 909:ffat_chan/ff.c **** 
 910:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 911:ffat_chan/ff.c **** /* Read File                                                             */
 912:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 913:ffat_chan/ff.c **** 
 914:ffat_chan/ff.c **** FRESULT f_read (
 915:ffat_chan/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
 916:ffat_chan/ff.c **** 	void *buff,		/* Pointer to data buffer */
 917:ffat_chan/ff.c **** 	UINT btr,		/* Number of bytes to read */
 918:ffat_chan/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
 919:ffat_chan/ff.c **** )
 920:ffat_chan/ff.c **** {
 921:ffat_chan/ff.c **** 	FRESULT res;
 922:ffat_chan/ff.c **** 	DWORD clust, sect, remain;
 923:ffat_chan/ff.c **** 	UINT rcnt, cc;
 924:ffat_chan/ff.c **** 	BYTE *rbuff = buff;
 925:ffat_chan/ff.c **** 
 926:ffat_chan/ff.c **** 
 927:ffat_chan/ff.c **** 	*br = 0;
 928:ffat_chan/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 929:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
 930:ffat_chan/ff.c **** 	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
 931:ffat_chan/ff.c **** 	if (!(fp->flag & FA_READ)) return FR_DENIED;	/* Check access mode */
 932:ffat_chan/ff.c **** 	remain = fp->fsize - fp->fptr;
 933:ffat_chan/ff.c **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
 934:ffat_chan/ff.c **** 
 935:ffat_chan/ff.c **** 	for ( ;  btr;									/* Repeat until all data transferred */
 936:ffat_chan/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 937:ffat_chan/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 938:ffat_chan/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 939:ffat_chan/ff.c **** 				clust = (fp->fptr == 0) ?			/* On the top of the file? */
 940:ffat_chan/ff.c **** 					fp->org_clust : get_cluster(fp->fs, fp->curr_clust);
 941:ffat_chan/ff.c **** 				if (clust < 2 || clust >= fp->fs->max_clust) goto fr_error;
 942:ffat_chan/ff.c **** 				fp->curr_clust = clust;				/* Update current cluster */
 943:ffat_chan/ff.c **** 				fp->csect = 0;						/* Reset sector address in the cluster */
 944:ffat_chan/ff.c **** 			}
 945:ffat_chan/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust) + fp->csect;	/* Get current sector */
 946:ffat_chan/ff.c **** 			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
 947:ffat_chan/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
 948:ffat_chan/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 949:ffat_chan/ff.c **** 					cc = fp->fs->csize - fp->csect;
 950:ffat_chan/ff.c **** 				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 951:ffat_chan/ff.c **** 					goto fr_error;
 952:ffat_chan/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 953:ffat_chan/ff.c **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 954:ffat_chan/ff.c **** 				continue;
 955:ffat_chan/ff.c **** 			}
 956:ffat_chan/ff.c **** 			if (sect != fp->curr_sect) {			/* Is window offset changed? */
 957:ffat_chan/ff.c **** #if !_FS_READONLY
 958:ffat_chan/ff.c **** 				if (fp->flag & FA__DIRTY) {			/* Write back file I/O buffer if needed */
 959:ffat_chan/ff.c **** 					if (disk_write(fp->fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
 960:ffat_chan/ff.c **** 						goto fr_error;
 961:ffat_chan/ff.c **** 					fp->flag &= (BYTE)~FA__DIRTY;
 962:ffat_chan/ff.c **** 				}
 963:ffat_chan/ff.c **** #endif
 964:ffat_chan/ff.c **** 				if (disk_read(fp->fs->drive, fp->buffer, sect, 1) != RES_OK)	/* Fill file I/O buffer with file 
 965:ffat_chan/ff.c **** 					goto fr_error;
 966:ffat_chan/ff.c **** 				fp->curr_sect = sect;
 967:ffat_chan/ff.c **** 			}
 968:ffat_chan/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
 969:ffat_chan/ff.c **** 		}
 970:ffat_chan/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector from file I/O buffer */
 971:ffat_chan/ff.c **** 		if (rcnt > btr) rcnt = btr;
 972:ffat_chan/ff.c **** 		memcpy(rbuff, &fp->buffer[fp->fptr % SS(fp->fs)], rcnt);
 973:ffat_chan/ff.c **** 	}
 974:ffat_chan/ff.c **** 
 975:ffat_chan/ff.c **** 	return FR_OK;
 976:ffat_chan/ff.c **** 
 977:ffat_chan/ff.c **** fr_error:	/* Abort this file due to an unrecoverable error */
 978:ffat_chan/ff.c **** 	fp->flag |= FA__ERROR;
 979:ffat_chan/ff.c **** 	return FR_RW_ERROR;
 980:ffat_chan/ff.c **** }
 981:ffat_chan/ff.c **** 
 982:ffat_chan/ff.c **** 
 983:ffat_chan/ff.c **** 
 984:ffat_chan/ff.c **** 
 985:ffat_chan/ff.c **** #if !_FS_READONLY
 986:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 987:ffat_chan/ff.c **** /* Write File                                                            */
 988:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
 989:ffat_chan/ff.c **** 
 990:ffat_chan/ff.c **** FRESULT f_write (
 991:ffat_chan/ff.c **** 	FIL *fp,			/* Pointer to the file object */
 992:ffat_chan/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
 993:ffat_chan/ff.c **** 	UINT btw,			/* Number of bytes to write */
 994:ffat_chan/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
 995:ffat_chan/ff.c **** )
 996:ffat_chan/ff.c **** {
 997:ffat_chan/ff.c **** 	FRESULT res;
 998:ffat_chan/ff.c **** 	DWORD clust, sect;
 999:ffat_chan/ff.c **** 	UINT wcnt, cc;
1000:ffat_chan/ff.c **** 	const BYTE *wbuff = buff;
1001:ffat_chan/ff.c **** 
1002:ffat_chan/ff.c **** 
1003:ffat_chan/ff.c **** 	*bw = 0;
1004:ffat_chan/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
1005:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1006:ffat_chan/ff.c **** 	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
1007:ffat_chan/ff.c **** 	if (!(fp->flag & FA_WRITE)) return FR_DENIED;	/* Check access mode */
1008:ffat_chan/ff.c **** 	if (fp->fsize + btw < fp->fsize) return FR_OK;	/* File size cannot reach 4GB */
1009:ffat_chan/ff.c **** 
1010:ffat_chan/ff.c **** 	for ( ;  btw;									/* Repeat until all data transferred */
1011:ffat_chan/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
1012:ffat_chan/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
1013:ffat_chan/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
1014:ffat_chan/ff.c **** 				if (fp->fptr == 0) {				/* On the top of the file? */
1015:ffat_chan/ff.c **** 					clust = fp->org_clust;			/* Follow from the origin */
1016:ffat_chan/ff.c **** 					if (clust == 0)					/* When there is no cluster chain, */
1017:ffat_chan/ff.c **** 						fp->org_clust = clust = create_chain(fp->fs, 0);	/* Create a new cluster chain */
1018:ffat_chan/ff.c **** 				} else {							/* Middle or end of the file */
1019:ffat_chan/ff.c **** 					clust = create_chain(fp->fs, fp->curr_clust);			/* Trace or streach cluster chain */
1020:ffat_chan/ff.c **** 				}
1021:ffat_chan/ff.c **** 				if (clust == 0) break;				/* Could not allocate a new cluster (disk full) */
1022:ffat_chan/ff.c **** 				if (clust == 1 || clust >= fp->fs->max_clust) goto fw_error;
1023:ffat_chan/ff.c **** 				fp->curr_clust = clust;				/* Update current cluster */
1024:ffat_chan/ff.c **** 				fp->csect = 0;						/* Reset sector address in the cluster */
1025:ffat_chan/ff.c **** 			}
1026:ffat_chan/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust) + fp->csect;	/* Get current sector */
1027:ffat_chan/ff.c **** 			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
1028:ffat_chan/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
1029:ffat_chan/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
1030:ffat_chan/ff.c **** 					cc = fp->fs->csize - fp->csect;
1031:ffat_chan/ff.c **** 				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
1032:ffat_chan/ff.c **** 					goto fw_error;
1033:ffat_chan/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
1034:ffat_chan/ff.c **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
1035:ffat_chan/ff.c **** 				continue;
1036:ffat_chan/ff.c **** 			}
1037:ffat_chan/ff.c **** 			if (sect != fp->curr_sect) {			/* Is window offset changed? */
1038:ffat_chan/ff.c **** 				if (fp->flag & FA__DIRTY) {			/* Write back file I/O buffer if needed */
1039:ffat_chan/ff.c **** 					if (disk_write(fp->fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
1040:ffat_chan/ff.c **** 						goto fw_error;
1041:ffat_chan/ff.c **** 					fp->flag &= (BYTE)~FA__DIRTY;
1042:ffat_chan/ff.c **** 				}
1043:ffat_chan/ff.c **** 				if (fp->fptr < fp->fsize &&  		/* Fill file I/O buffer with file data */
1044:ffat_chan/ff.c **** 					disk_read(fp->fs->drive, fp->buffer, sect, 1) != RES_OK)
1045:ffat_chan/ff.c **** 						goto fw_error;
1046:ffat_chan/ff.c **** 				fp->curr_sect = sect;
1047:ffat_chan/ff.c **** 			}
1048:ffat_chan/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
1049:ffat_chan/ff.c **** 		}
1050:ffat_chan/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
1051:ffat_chan/ff.c **** 		if (wcnt > btw) wcnt = btw;
1052:ffat_chan/ff.c **** 		memcpy(&fp->buffer[fp->fptr % SS(fp->fs)], wbuff, wcnt);
1053:ffat_chan/ff.c **** 		fp->flag |= FA__DIRTY;
1054:ffat_chan/ff.c **** 	}
1055:ffat_chan/ff.c **** 
1056:ffat_chan/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
1057:ffat_chan/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
1058:ffat_chan/ff.c **** 	return FR_OK;
1059:ffat_chan/ff.c **** 
1060:ffat_chan/ff.c **** fw_error:	/* Abort this file due to an unrecoverable error */
1061:ffat_chan/ff.c **** 	fp->flag |= FA__ERROR;
1062:ffat_chan/ff.c **** 	return FR_RW_ERROR;
1063:ffat_chan/ff.c **** }
1064:ffat_chan/ff.c **** 
1065:ffat_chan/ff.c **** 
1066:ffat_chan/ff.c **** 
1067:ffat_chan/ff.c **** 
1068:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1069:ffat_chan/ff.c **** /* Synchronize the file object                                           */
1070:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1071:ffat_chan/ff.c **** 
1072:ffat_chan/ff.c **** FRESULT f_sync (
1073:ffat_chan/ff.c **** 	FIL *fp		/* Pointer to the file object */
1074:ffat_chan/ff.c **** )
1075:ffat_chan/ff.c **** {
1076:ffat_chan/ff.c **** 	FRESULT res;
1077:ffat_chan/ff.c **** 	DWORD tim;
1078:ffat_chan/ff.c **** 	BYTE *dir;
1079:ffat_chan/ff.c **** 
1080:ffat_chan/ff.c **** 
1081:ffat_chan/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
1082:ffat_chan/ff.c **** 	if (res == FR_OK) {
1083:ffat_chan/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
1084:ffat_chan/ff.c **** 			/* Write back data buffer if needed */
1085:ffat_chan/ff.c **** 			if (fp->flag & FA__DIRTY) {
1086:ffat_chan/ff.c **** 				if (disk_write(fp->fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
1087:ffat_chan/ff.c **** 					return FR_RW_ERROR;
1088:ffat_chan/ff.c **** 				fp->flag &= (BYTE)~FA__DIRTY;
1089:ffat_chan/ff.c **** 			}
1090:ffat_chan/ff.c **** 			/* Update the directory entry */
1091:ffat_chan/ff.c **** 			if (!move_window(fp->fs, fp->dir_sect))
1092:ffat_chan/ff.c **** 				return FR_RW_ERROR;
1093:ffat_chan/ff.c **** 			dir = fp->dir_ptr;
1094:ffat_chan/ff.c **** 			dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
1095:ffat_chan/ff.c **** 			ST_DWORD(&dir[DIR_FileSize], fp->fsize);		/* Update file size */
1096:ffat_chan/ff.c **** 			ST_WORD(&dir[DIR_FstClusLO], fp->org_clust);	/* Update start cluster */
1097:ffat_chan/ff.c **** 			ST_WORD(&dir[DIR_FstClusHI], fp->org_clust >> 16);
1098:ffat_chan/ff.c **** 			tim = get_fattime();					/* Updated time */
1099:ffat_chan/ff.c **** 			ST_DWORD(&dir[DIR_WrtTime], tim);
1100:ffat_chan/ff.c **** 			fp->flag &= (BYTE)~FA__WRITTEN;
1101:ffat_chan/ff.c **** 			res = sync(fp->fs);
1102:ffat_chan/ff.c **** 		}
1103:ffat_chan/ff.c **** 	}
1104:ffat_chan/ff.c **** 	return res;
1105:ffat_chan/ff.c **** }
1106:ffat_chan/ff.c **** 
1107:ffat_chan/ff.c **** #endif /* !_FS_READONLY */
1108:ffat_chan/ff.c **** 
1109:ffat_chan/ff.c **** 
1110:ffat_chan/ff.c **** 
1111:ffat_chan/ff.c **** 
1112:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1113:ffat_chan/ff.c **** /* Close File                                                            */
1114:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1115:ffat_chan/ff.c **** 
1116:ffat_chan/ff.c **** FRESULT f_close (
1117:ffat_chan/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
1118:ffat_chan/ff.c **** )
1119:ffat_chan/ff.c **** {
1120:ffat_chan/ff.c **** 	FRESULT res;
1121:ffat_chan/ff.c **** 
1122:ffat_chan/ff.c **** 
1123:ffat_chan/ff.c **** #if !_FS_READONLY
1124:ffat_chan/ff.c **** 	res = f_sync(fp);
1125:ffat_chan/ff.c **** #else
1126:ffat_chan/ff.c **** 	res = validate(fp->fs, fp->id);
1127:ffat_chan/ff.c **** #endif
1128:ffat_chan/ff.c **** 	if (res == FR_OK) fp->fs = NULL;
1129:ffat_chan/ff.c **** 	return res;
1130:ffat_chan/ff.c **** }
1131:ffat_chan/ff.c **** 
1132:ffat_chan/ff.c **** 
1133:ffat_chan/ff.c **** 
1134:ffat_chan/ff.c **** 
1135:ffat_chan/ff.c **** #if _FS_MINIMIZE <= 2
1136:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1137:ffat_chan/ff.c **** /* Seek File R/W Pointer                                                 */
1138:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1139:ffat_chan/ff.c **** 
1140:ffat_chan/ff.c **** FRESULT f_lseek (
1141:ffat_chan/ff.c **** 	FIL *fp,		/* Pointer to the file object */
1142:ffat_chan/ff.c **** 	DWORD ofs		/* File pointer from top of file */
1143:ffat_chan/ff.c **** )
1144:ffat_chan/ff.c **** {
1145:ffat_chan/ff.c **** 	FRESULT res;
1146:ffat_chan/ff.c **** 	DWORD clust, csize, nsect, ifptr;
1147:ffat_chan/ff.c **** 
1148:ffat_chan/ff.c **** 
1149:ffat_chan/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
1150:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1151:ffat_chan/ff.c **** 	if (fp->flag & FA__ERROR) return FR_RW_ERROR;
1152:ffat_chan/ff.c **** 	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
1153:ffat_chan/ff.c **** #if !_FS_READONLY
1154:ffat_chan/ff.c **** 		 && !(fp->flag & FA_WRITE)
1155:ffat_chan/ff.c **** #endif
1156:ffat_chan/ff.c **** 		) ofs = fp->fsize;
1157:ffat_chan/ff.c **** 
1158:ffat_chan/ff.c **** 	ifptr = fp->fptr;
1159:ffat_chan/ff.c **** 	fp->fptr = 0; fp->csect = 255;
1160:ffat_chan/ff.c **** 	nsect = 0;
1161:ffat_chan/ff.c **** 	if (ofs > 0) {
1162:ffat_chan/ff.c **** 		csize = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
1163:ffat_chan/ff.c **** 		if (ifptr > 0 &&
1164:ffat_chan/ff.c **** 			(ofs - 1) / csize >= (ifptr - 1) / csize) {/* When seek to same or following cluster, */
1165:ffat_chan/ff.c **** 			fp->fptr = (ifptr - 1) & ~(csize - 1);	/* start from the current cluster */
1166:ffat_chan/ff.c **** 			ofs -= fp->fptr;
1167:ffat_chan/ff.c **** 			clust = fp->curr_clust;
1168:ffat_chan/ff.c **** 		} else {									/* When seek to back cluster, */
1169:ffat_chan/ff.c **** 			clust = fp->org_clust;					/* start from the first cluster */
1170:ffat_chan/ff.c **** #if !_FS_READONLY
1171:ffat_chan/ff.c **** 			if (clust == 0) {						/* If no cluster chain, create a new chain */
1172:ffat_chan/ff.c **** 				clust = create_chain(fp->fs, 0);
1173:ffat_chan/ff.c **** 				if (clust == 1) goto fk_error;
1174:ffat_chan/ff.c **** 				fp->org_clust = clust;
1175:ffat_chan/ff.c **** 			}
1176:ffat_chan/ff.c **** #endif
1177:ffat_chan/ff.c **** 			fp->curr_clust = clust;
1178:ffat_chan/ff.c **** 		}
1179:ffat_chan/ff.c **** 		if (clust != 0) {
1180:ffat_chan/ff.c **** 			while (ofs > csize) {					/* Cluster following loop */
1181:ffat_chan/ff.c **** #if !_FS_READONLY
1182:ffat_chan/ff.c **** 				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
1183:ffat_chan/ff.c **** 					clust = create_chain(fp->fs, clust);	/* Force streached if in write mode */
1184:ffat_chan/ff.c **** 					if (clust == 0) {				/* When disk gets full, clip file size */
1185:ffat_chan/ff.c **** 						ofs = csize; break;
1186:ffat_chan/ff.c **** 					}
1187:ffat_chan/ff.c **** 				} else
1188:ffat_chan/ff.c **** #endif
1189:ffat_chan/ff.c **** 					clust = get_cluster(fp->fs, clust);	/* Follow cluster chain if not in write mode */
1190:ffat_chan/ff.c **** 				if (clust < 2 || clust >= fp->fs->max_clust) goto fk_error;
1191:ffat_chan/ff.c **** 				fp->curr_clust = clust;
1192:ffat_chan/ff.c **** 				fp->fptr += csize;
1193:ffat_chan/ff.c **** 				ofs -= csize;
1194:ffat_chan/ff.c **** 			}
1195:ffat_chan/ff.c **** 			fp->fptr += ofs;
1196:ffat_chan/ff.c **** 			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
1197:ffat_chan/ff.c **** 			if (ofs & (SS(fp->fs) - 1)) {
1198:ffat_chan/ff.c **** 				nsect = clust2sect(fp->fs, clust) + fp->csect;	/* Current sector */
1199:ffat_chan/ff.c **** 				fp->csect++;
1200:ffat_chan/ff.c **** 			}
1201:ffat_chan/ff.c **** 		}
1202:ffat_chan/ff.c **** 	}
1203:ffat_chan/ff.c **** 	if (nsect && nsect != fp->curr_sect) {
1204:ffat_chan/ff.c **** #if !_FS_READONLY
1205:ffat_chan/ff.c **** 		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
1206:ffat_chan/ff.c **** 			if (disk_write(fp->fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
1207:ffat_chan/ff.c **** 				goto fk_error;
1208:ffat_chan/ff.c **** 			fp->flag &= (BYTE)~FA__DIRTY;
1209:ffat_chan/ff.c **** 		}
1210:ffat_chan/ff.c **** #endif
1211:ffat_chan/ff.c **** 		if (disk_read(fp->fs->drive, fp->buffer, nsect, 1) != RES_OK)
1212:ffat_chan/ff.c **** 			goto fk_error;
1213:ffat_chan/ff.c **** 		fp->curr_sect = nsect;
1214:ffat_chan/ff.c **** 	}
1215:ffat_chan/ff.c **** 
1216:ffat_chan/ff.c **** #if !_FS_READONLY
1217:ffat_chan/ff.c **** 	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file was extended */
1218:ffat_chan/ff.c **** 		fp->fsize = fp->fptr;
1219:ffat_chan/ff.c **** 		fp->flag |= FA__WRITTEN;
1220:ffat_chan/ff.c **** 	}
1221:ffat_chan/ff.c **** #endif
1222:ffat_chan/ff.c **** 
1223:ffat_chan/ff.c **** 	return FR_OK;
1224:ffat_chan/ff.c **** 
1225:ffat_chan/ff.c **** fk_error:	/* Abort this file due to an unrecoverable error */
1226:ffat_chan/ff.c **** 	fp->flag |= FA__ERROR;
1227:ffat_chan/ff.c **** 	return FR_RW_ERROR;
1228:ffat_chan/ff.c **** }
1229:ffat_chan/ff.c **** 
1230:ffat_chan/ff.c **** 
1231:ffat_chan/ff.c **** 
1232:ffat_chan/ff.c **** 
1233:ffat_chan/ff.c **** #if _FS_MINIMIZE <= 1
1234:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1235:ffat_chan/ff.c **** /* Create a directroy object                                             */
1236:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1237:ffat_chan/ff.c **** 
1238:ffat_chan/ff.c **** FRESULT f_opendir (
1239:ffat_chan/ff.c **** 	DIR *dj,			/* Pointer to directory object to create */
1240:ffat_chan/ff.c **** 	const char *path	/* Pointer to the directory path */
1241:ffat_chan/ff.c **** )
1242:ffat_chan/ff.c **** {
1243:ffat_chan/ff.c **** 	FRESULT res;
1244:ffat_chan/ff.c **** 	BYTE *dir;
1245:ffat_chan/ff.c **** 	char fn[8+3+1];
1246:ffat_chan/ff.c **** 
1247:ffat_chan/ff.c **** 
1248:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj->fs, 0);
1249:ffat_chan/ff.c **** 	if (res == FR_OK) {
1250:ffat_chan/ff.c **** 		res = trace_path(dj, fn, path, &dir);	/* Trace the directory path */
1251:ffat_chan/ff.c **** 		if (res == FR_OK) {						/* Trace completed */
1252:ffat_chan/ff.c **** 			if (dir) {							/* It is not the root dir */
1253:ffat_chan/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* The entry is a directory */
1254:ffat_chan/ff.c **** 					dj->clust = ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
1255:ffat_chan/ff.c **** 					dj->sect = clust2sect(dj->fs, dj->clust);
1256:ffat_chan/ff.c **** 					dj->index = 2;
1257:ffat_chan/ff.c **** 				} else {						/* The entry is not a directory */
1258:ffat_chan/ff.c **** 					res = FR_NO_FILE;
1259:ffat_chan/ff.c **** 				}
1260:ffat_chan/ff.c **** 			}
1261:ffat_chan/ff.c **** 			dj->id = dj->fs->id;
1262:ffat_chan/ff.c **** 		}
1263:ffat_chan/ff.c **** 	}
1264:ffat_chan/ff.c **** 
1265:ffat_chan/ff.c **** 	return res;
1266:ffat_chan/ff.c **** }
1267:ffat_chan/ff.c **** 
1268:ffat_chan/ff.c **** 
1269:ffat_chan/ff.c **** 
1270:ffat_chan/ff.c **** 
1271:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1272:ffat_chan/ff.c **** /* Read Directory Entry in Sequense                                      */
1273:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1274:ffat_chan/ff.c **** 
1275:ffat_chan/ff.c **** FRESULT f_readdir (
1276:ffat_chan/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1277:ffat_chan/ff.c **** 	FILINFO *finfo		/* Pointer to file information to return */
1278:ffat_chan/ff.c **** )
1279:ffat_chan/ff.c **** {
1280:ffat_chan/ff.c **** 	BYTE *dir, c, res;
1281:ffat_chan/ff.c **** 
1282:ffat_chan/ff.c **** 
1283:ffat_chan/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
1284:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1285:ffat_chan/ff.c **** 
1286:ffat_chan/ff.c **** 	finfo->fname[0] = 0;
1287:ffat_chan/ff.c **** 	while (dj->sect) {
1288:ffat_chan/ff.c **** 		if (!move_window(dj->fs, dj->sect))
1289:ffat_chan/ff.c **** 			return FR_RW_ERROR;
1290:ffat_chan/ff.c **** 		dir = &dj->fs->win[(dj->index & ((SS(dj->fs) - 1) >> 5)) * 32];	/* pointer to the directory entry
1291:ffat_chan/ff.c **** 		c = dir[DIR_Name];
1292:ffat_chan/ff.c **** 		if (c == 0) break;							/* Has it reached to end of dir? */
1293:ffat_chan/ff.c **** 		if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1294:ffat_chan/ff.c **** 			get_fileinfo(finfo, dir);
1295:ffat_chan/ff.c **** 		if (!next_dir_entry(dj)) dj->sect = 0;		/* Next entry */
1296:ffat_chan/ff.c **** 		if (finfo->fname[0]) break;					/* Found valid entry */
1297:ffat_chan/ff.c **** 	}
1298:ffat_chan/ff.c **** 
1299:ffat_chan/ff.c **** 	return FR_OK;
1300:ffat_chan/ff.c **** }
1301:ffat_chan/ff.c **** 
1302:ffat_chan/ff.c **** 
1303:ffat_chan/ff.c **** 
1304:ffat_chan/ff.c **** 
1305:ffat_chan/ff.c **** #if _FS_MINIMIZE == 0
1306:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1307:ffat_chan/ff.c **** /* Get File Status                                                       */
1308:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1309:ffat_chan/ff.c **** 
1310:ffat_chan/ff.c **** FRESULT f_stat (
1311:ffat_chan/ff.c **** 	const char *path,	/* Pointer to the file path */
1312:ffat_chan/ff.c **** 	FILINFO *finfo		/* Pointer to file information to return */
1313:ffat_chan/ff.c **** )
1314:ffat_chan/ff.c **** {
1315:ffat_chan/ff.c **** 	FRESULT res;
1316:ffat_chan/ff.c **** 	DIR dj;
1317:ffat_chan/ff.c **** 	BYTE *dir;
1318:ffat_chan/ff.c **** 	char fn[8+3+1];
1319:ffat_chan/ff.c **** 
1320:ffat_chan/ff.c **** 
1321:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj.fs, 0);
1322:ffat_chan/ff.c **** 	if (res == FR_OK) {
1323:ffat_chan/ff.c **** 		res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
1324:ffat_chan/ff.c **** 		if (res == FR_OK) {						/* Trace completed */
1325:ffat_chan/ff.c **** 			if (dir)	/* Found an object */
1326:ffat_chan/ff.c **** 				get_fileinfo(finfo, dir);
1327:ffat_chan/ff.c **** 			else		/* It is root dir */
1328:ffat_chan/ff.c **** 				res = FR_INVALID_NAME;
1329:ffat_chan/ff.c **** 		}
1330:ffat_chan/ff.c **** 	}
1331:ffat_chan/ff.c **** 
1332:ffat_chan/ff.c **** 	return res;
1333:ffat_chan/ff.c **** }
1334:ffat_chan/ff.c **** 
1335:ffat_chan/ff.c **** 
1336:ffat_chan/ff.c **** 
1337:ffat_chan/ff.c **** #if !_FS_READONLY
1338:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1339:ffat_chan/ff.c **** /* Truncate File                                                         */
1340:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1341:ffat_chan/ff.c **** 
1342:ffat_chan/ff.c **** FRESULT f_truncate (
1343:ffat_chan/ff.c **** 	FIL *fp		/* Pointer to the file object */
1344:ffat_chan/ff.c **** )
1345:ffat_chan/ff.c **** {
1346:ffat_chan/ff.c **** 	FRESULT res;
1347:ffat_chan/ff.c **** 	DWORD ncl;
1348:ffat_chan/ff.c **** 
1349:ffat_chan/ff.c **** 
1350:ffat_chan/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
1351:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1352:ffat_chan/ff.c **** 	if (fp->flag & FA__ERROR) return FR_RW_ERROR;	/* Check error flag */
1353:ffat_chan/ff.c **** 	if (!(fp->flag & FA_WRITE)) return FR_DENIED;	/* Check access mode */
1354:ffat_chan/ff.c **** 
1355:ffat_chan/ff.c **** 	if (fp->fsize > fp->fptr) {
1356:ffat_chan/ff.c **** 		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
1357:ffat_chan/ff.c **** 		fp->flag |= FA__WRITTEN;
1358:ffat_chan/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
1359:ffat_chan/ff.c **** 			if (!remove_chain(fp->fs, fp->org_clust)) goto ft_error;
1360:ffat_chan/ff.c **** 			fp->org_clust = 0;
1361:ffat_chan/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
1362:ffat_chan/ff.c **** 			ncl = get_cluster(fp->fs, fp->curr_clust);
1363:ffat_chan/ff.c **** 			if (ncl < 2) goto ft_error;
1364:ffat_chan/ff.c **** 			if (ncl < fp->fs->max_clust) {
1365:ffat_chan/ff.c **** 				if (!put_cluster(fp->fs, fp->curr_clust, 0x0FFFFFFF)) goto ft_error;
1366:ffat_chan/ff.c **** 				if (!remove_chain(fp->fs, ncl)) goto ft_error;
1367:ffat_chan/ff.c **** 			}
1368:ffat_chan/ff.c **** 		}
1369:ffat_chan/ff.c **** 	}
1370:ffat_chan/ff.c **** 
1371:ffat_chan/ff.c **** 	return FR_OK;
1372:ffat_chan/ff.c **** 
1373:ffat_chan/ff.c **** ft_error:	/* Abort this file due to an unrecoverable error */
1374:ffat_chan/ff.c **** 	fp->flag |= FA__ERROR;
1375:ffat_chan/ff.c **** 	return FR_RW_ERROR;
1376:ffat_chan/ff.c **** }
1377:ffat_chan/ff.c **** 
1378:ffat_chan/ff.c **** 
1379:ffat_chan/ff.c **** 
1380:ffat_chan/ff.c **** 
1381:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1382:ffat_chan/ff.c **** /* Get Number of Free Clusters                                           */
1383:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1384:ffat_chan/ff.c **** 
1385:ffat_chan/ff.c **** FRESULT f_getfree (
1386:ffat_chan/ff.c **** 	const char *drv,	/* Pointer to the logical drive number (root dir) */
1387:ffat_chan/ff.c **** 	DWORD *nclust,		/* Pointer to the variable to return number of free clusters */
1388:ffat_chan/ff.c **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
1389:ffat_chan/ff.c **** )
1390:ffat_chan/ff.c **** {
1391:ffat_chan/ff.c **** 	FRESULT res;
1392:ffat_chan/ff.c **** 	DWORD n, clust, sect;
1393:ffat_chan/ff.c **** 	BYTE fat, f, *p;
1394:ffat_chan/ff.c **** 
1395:ffat_chan/ff.c **** 
1396:ffat_chan/ff.c **** 	/* Get drive number */
1397:ffat_chan/ff.c **** 	res = auto_mount(&drv, fatfs, 0);
1398:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1399:ffat_chan/ff.c **** 
1400:ffat_chan/ff.c **** 	/* If number of free cluster is valid, return it without cluster scan. */
1401:ffat_chan/ff.c **** 	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
1402:ffat_chan/ff.c **** 		*nclust = (*fatfs)->free_clust;
1403:ffat_chan/ff.c **** 		return FR_OK;
1404:ffat_chan/ff.c **** 	}
1405:ffat_chan/ff.c **** 
1406:ffat_chan/ff.c **** 	/* Get number of free clusters */
1407:ffat_chan/ff.c **** 	fat = (*fatfs)->fs_type;
1408:ffat_chan/ff.c **** 	n = 0;
1409:ffat_chan/ff.c **** 	if (fat == FS_FAT12) {
1410:ffat_chan/ff.c **** 		clust = 2;
1411:ffat_chan/ff.c **** 		do {
1412:ffat_chan/ff.c **** 			if ((WORD)get_cluster(*fatfs, clust) == 0) n++;
1413:ffat_chan/ff.c **** 		} while (++clust < (*fatfs)->max_clust);
1414:ffat_chan/ff.c **** 	} else {
1415:ffat_chan/ff.c **** 		clust = (*fatfs)->max_clust;
1416:ffat_chan/ff.c **** 		sect = (*fatfs)->fatbase;
1417:ffat_chan/ff.c **** 		f = 0; p = 0;
1418:ffat_chan/ff.c **** 		do {
1419:ffat_chan/ff.c **** 			if (!f) {
1420:ffat_chan/ff.c **** 				if (!move_window(*fatfs, sect++)) return FR_RW_ERROR;
1421:ffat_chan/ff.c **** 				p = (*fatfs)->win;
1422:ffat_chan/ff.c **** 			}
1423:ffat_chan/ff.c **** 			if (fat == FS_FAT16) {
1424:ffat_chan/ff.c **** 				if (LD_WORD(p) == 0) n++;
1425:ffat_chan/ff.c **** 				p += 2; f += 1;
1426:ffat_chan/ff.c **** 			} else {
1427:ffat_chan/ff.c **** 				if (LD_DWORD(p) == 0) n++;
1428:ffat_chan/ff.c **** 				p += 4; f += 2;
1429:ffat_chan/ff.c **** 			}
1430:ffat_chan/ff.c **** 		} while (--clust);
1431:ffat_chan/ff.c **** 	}
1432:ffat_chan/ff.c **** 	(*fatfs)->free_clust = n;
1433:ffat_chan/ff.c **** #if _USE_FSINFO
1434:ffat_chan/ff.c **** 	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
1435:ffat_chan/ff.c **** #endif
1436:ffat_chan/ff.c **** 
1437:ffat_chan/ff.c **** 	*nclust = n;
1438:ffat_chan/ff.c **** 	return FR_OK;
1439:ffat_chan/ff.c **** }
1440:ffat_chan/ff.c **** 
1441:ffat_chan/ff.c **** 
1442:ffat_chan/ff.c **** 
1443:ffat_chan/ff.c **** 
1444:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1445:ffat_chan/ff.c **** /* Delete a File or Directory                                            */
1446:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1447:ffat_chan/ff.c **** 
1448:ffat_chan/ff.c **** FRESULT f_unlink (
1449:ffat_chan/ff.c **** 	const char *path		/* Pointer to the file or directory path */
1450:ffat_chan/ff.c **** )
1451:ffat_chan/ff.c **** {
1452:ffat_chan/ff.c **** 	FRESULT res;
1453:ffat_chan/ff.c **** 	DIR dj;
1454:ffat_chan/ff.c **** 	BYTE *dir, *sdir;
1455:ffat_chan/ff.c **** 	DWORD dclust, dsect;
1456:ffat_chan/ff.c **** 	char fn[8+3+1];
1457:ffat_chan/ff.c **** 
1458:ffat_chan/ff.c **** 	//xprintf("pass2");
1459:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
1460:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1461:ffat_chan/ff.c **** 	res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
1462:ffat_chan/ff.c **** 	if (res != FR_OK) return res;			/* Trace failed */
1463:ffat_chan/ff.c **** 	if (!dir) return FR_INVALID_NAME;		/* It is the root directory */
1464:ffat_chan/ff.c **** 	if (dir[DIR_Attr] & AM_RDO) return FR_DENIED;	/* It is a R/O object */
1465:ffat_chan/ff.c **** 	dsect = dj.fs->winsect;
1466:ffat_chan/ff.c **** 	dclust = ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
1467:ffat_chan/ff.c **** 	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
1468:ffat_chan/ff.c **** 		dj.clust = dclust;					/* Check if the sub-dir is empty or not */
1469:ffat_chan/ff.c **** 		dj.sect = clust2sect(dj.fs, dclust);
1470:ffat_chan/ff.c **** 		dj.index = 2;
1471:ffat_chan/ff.c **** 		do {
1472:ffat_chan/ff.c **** 			if (!move_window(dj.fs, dj.sect)) return FR_RW_ERROR;
1473:ffat_chan/ff.c **** 			sdir = &dj.fs->win[(dj.index & ((SS(dj.fs) - 1) >> 5)) * 32];
1474:ffat_chan/ff.c **** 			if (sdir[DIR_Name] == 0) break;
1475:ffat_chan/ff.c **** 			if (sdir[DIR_Name] != 0xE5 && !(sdir[DIR_Attr] & AM_VOL))
1476:ffat_chan/ff.c **** 				return FR_DENIED;	/* The directory is not empty */
1477:ffat_chan/ff.c **** 		} while (next_dir_entry(&dj));
1478:ffat_chan/ff.c **** 	}
1479:ffat_chan/ff.c **** 	if (!move_window(dj.fs, dsect)) return FR_RW_ERROR;	/* Mark the directory entry 'deleted' */
1480:ffat_chan/ff.c **** 	dir[DIR_Name] = 0xE5;
1481:ffat_chan/ff.c **** 	dj.fs->winflag = 1;
1482:ffat_chan/ff.c **** 	if (!remove_chain(dj.fs, dclust)) return FR_RW_ERROR;	/* Remove the cluster chain */
1483:ffat_chan/ff.c **** 
1484:ffat_chan/ff.c **** 	return sync(dj.fs);
1485:ffat_chan/ff.c **** }
1486:ffat_chan/ff.c **** 
1487:ffat_chan/ff.c **** 
1488:ffat_chan/ff.c **** 
1489:ffat_chan/ff.c **** 
1490:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1491:ffat_chan/ff.c **** /* Create a Directory                                                    */
1492:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1493:ffat_chan/ff.c **** 
1494:ffat_chan/ff.c **** FRESULT f_mkdir (
1495:ffat_chan/ff.c **** 	const char *path		/* Pointer to the directory path */
1496:ffat_chan/ff.c **** )
1497:ffat_chan/ff.c **** {
1498:ffat_chan/ff.c **** 	FRESULT res;
1499:ffat_chan/ff.c **** 	DIR dj;
1500:ffat_chan/ff.c **** 	BYTE *dir, *fw, n;
1501:ffat_chan/ff.c **** 	char fn[8+3+1];
1502:ffat_chan/ff.c **** 	DWORD sect, dsect, dclust, pclust, tim;
1503:ffat_chan/ff.c **** 
1504:ffat_chan/ff.c **** 
1505:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
1506:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1507:ffat_chan/ff.c **** 	res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
1508:ffat_chan/ff.c **** 	if (res == FR_OK) return FR_EXIST;		/* Any file or directory is already existing */
1509:ffat_chan/ff.c **** 	if (res != FR_NO_FILE) return res;
1510:ffat_chan/ff.c **** 
1511:ffat_chan/ff.c **** 	res = reserve_direntry(&dj, &dir); 		/* Reserve a directory entry */
1512:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1513:ffat_chan/ff.c **** 	sect = dj.fs->winsect;
1514:ffat_chan/ff.c **** 	dclust = create_chain(dj.fs, 0);		/* Allocate a cluster for new directory table */
1515:ffat_chan/ff.c **** 	if (dclust == 1) return FR_RW_ERROR;
1516:ffat_chan/ff.c **** 	dsect = clust2sect(dj.fs, dclust);
1517:ffat_chan/ff.c **** 	if (!dsect) return FR_DENIED;
1518:ffat_chan/ff.c **** 	if (!move_window(dj.fs, dsect)) return FR_RW_ERROR;
1519:ffat_chan/ff.c **** 
1520:ffat_chan/ff.c **** 	fw = dj.fs->win;
1521:ffat_chan/ff.c **** 	memset(fw, 0, SS(dj.fs));				/* Clear the new directory table */
1522:ffat_chan/ff.c **** 	for (n = 1; n < dj.fs->csize; n++) {
1523:ffat_chan/ff.c **** 		if (disk_write(dj.fs->drive, fw, ++dsect, 1) != RES_OK)
1524:ffat_chan/ff.c **** 			return FR_RW_ERROR;
1525:ffat_chan/ff.c **** 	}
1526:ffat_chan/ff.c **** 	memset(&fw[DIR_Name], ' ', 8+3);		/* Create "." entry */
1527:ffat_chan/ff.c **** 	fw[DIR_Name] = '.';
1528:ffat_chan/ff.c **** 	fw[DIR_Attr] = AM_DIR;
1529:ffat_chan/ff.c **** 	tim = get_fattime();
1530:ffat_chan/ff.c **** 	ST_DWORD(&fw[DIR_WrtTime], tim);
1531:ffat_chan/ff.c **** 	memcpy(&fw[32], &fw[0], 32); fw[33] = '.';	/* Create ".." entry */
1532:ffat_chan/ff.c **** 	ST_WORD(&fw[   DIR_FstClusLO], dclust);
1533:ffat_chan/ff.c **** 	ST_WORD(&fw[   DIR_FstClusHI], dclust >> 16);
1534:ffat_chan/ff.c **** 	pclust = dj.sclust;
1535:ffat_chan/ff.c **** 	if (dj.fs->fs_type == FS_FAT32 && pclust == dj.fs->dirbase) pclust = 0;
1536:ffat_chan/ff.c **** 	ST_WORD(&fw[32+DIR_FstClusLO], pclust);
1537:ffat_chan/ff.c **** 	ST_WORD(&fw[32+DIR_FstClusHI], pclust >> 16);
1538:ffat_chan/ff.c **** 	dj.fs->winflag = 1;
1539:ffat_chan/ff.c **** 
1540:ffat_chan/ff.c **** 	if (!move_window(dj.fs, sect)) return FR_RW_ERROR;
1541:ffat_chan/ff.c **** 	memset(&dir[0], 0, 32);						/* Initialize the new entry */
1542:ffat_chan/ff.c **** 	memcpy(&dir[DIR_Name], fn, 8+3);			/* Name */
1543:ffat_chan/ff.c **** 	dir[DIR_NTres] = fn[11];
1544:ffat_chan/ff.c **** 	dir[DIR_Attr] = AM_DIR;						/* Attribute */
1545:ffat_chan/ff.c **** 	ST_DWORD(&dir[DIR_WrtTime], tim);			/* Crated time */
1546:ffat_chan/ff.c **** 	ST_WORD(&dir[DIR_FstClusLO], dclust);		/* Table start cluster */
1547:ffat_chan/ff.c **** 	ST_WORD(&dir[DIR_FstClusHI], dclust >> 16);
1548:ffat_chan/ff.c **** 
1549:ffat_chan/ff.c **** 	return sync(dj.fs);
1550:ffat_chan/ff.c **** }
1551:ffat_chan/ff.c **** 
1552:ffat_chan/ff.c **** 
1553:ffat_chan/ff.c **** 
1554:ffat_chan/ff.c **** 
1555:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1556:ffat_chan/ff.c **** /* Change File Attribute                                                 */
1557:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1558:ffat_chan/ff.c **** 
1559:ffat_chan/ff.c **** FRESULT f_chmod (
1560:ffat_chan/ff.c **** 	const char *path,	/* Pointer to the file path */
1561:ffat_chan/ff.c **** 	BYTE value,			/* Attribute bits */
1562:ffat_chan/ff.c **** 	BYTE mask			/* Attribute mask to change */
1563:ffat_chan/ff.c **** )
1564:ffat_chan/ff.c **** {
1565:ffat_chan/ff.c **** 	FRESULT res;
1566:ffat_chan/ff.c **** 	DIR dj;
1567:ffat_chan/ff.c **** 	BYTE *dir;
1568:ffat_chan/ff.c **** 	char fn[8+3+1];
1569:ffat_chan/ff.c **** 
1570:ffat_chan/ff.c **** 
1571:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
1572:ffat_chan/ff.c **** 	if (res == FR_OK) {
1573:ffat_chan/ff.c **** 		res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
1574:ffat_chan/ff.c **** 		if (res == FR_OK) {				/* Trace completed */
1575:ffat_chan/ff.c **** 			if (!dir) {
1576:ffat_chan/ff.c **** 				res = FR_INVALID_NAME;	/* Root directory */
1577:ffat_chan/ff.c **** 			} else {
1578:ffat_chan/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
1579:ffat_chan/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
1580:ffat_chan/ff.c **** 				res = sync(dj.fs);
1581:ffat_chan/ff.c **** 			}
1582:ffat_chan/ff.c **** 		}
1583:ffat_chan/ff.c **** 	}
1584:ffat_chan/ff.c **** 	return res;
1585:ffat_chan/ff.c **** }
1586:ffat_chan/ff.c **** 
1587:ffat_chan/ff.c **** 
1588:ffat_chan/ff.c **** 
1589:ffat_chan/ff.c **** 
1590:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1591:ffat_chan/ff.c **** /* Change Timestamp                                                      */
1592:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1593:ffat_chan/ff.c **** 
1594:ffat_chan/ff.c **** FRESULT f_utime (
1595:ffat_chan/ff.c **** 	const char *path,		/* Pointer to the file/directory name */
1596:ffat_chan/ff.c **** 	const FILINFO *finfo	/* Pointer to the timestamp to be set */
1597:ffat_chan/ff.c **** )
1598:ffat_chan/ff.c **** {
1599:ffat_chan/ff.c **** 	FRESULT res;
1600:ffat_chan/ff.c **** 	DIR dj;
1601:ffat_chan/ff.c **** 	BYTE *dir;
1602:ffat_chan/ff.c **** 	char fn[8+3+1];
1603:ffat_chan/ff.c **** 
1604:ffat_chan/ff.c **** 
1605:ffat_chan/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
1606:ffat_chan/ff.c **** 	if (res == FR_OK) {
1607:ffat_chan/ff.c **** 		res = trace_path(&dj, fn, path, &dir);	/* Trace the file path */
1608:ffat_chan/ff.c **** 		if (res == FR_OK) {				/* Trace completed */
1609:ffat_chan/ff.c **** 			if (!dir) {
1610:ffat_chan/ff.c **** 				res = FR_INVALID_NAME;	/* Root directory */
1611:ffat_chan/ff.c **** 			} else {
1612:ffat_chan/ff.c **** 				ST_WORD(&dir[DIR_WrtTime], finfo->ftime);
1613:ffat_chan/ff.c **** 				ST_WORD(&dir[DIR_WrtDate], finfo->fdate);
1614:ffat_chan/ff.c **** 				res = sync(dj.fs);
1615:ffat_chan/ff.c **** 			}
1616:ffat_chan/ff.c **** 		}
1617:ffat_chan/ff.c **** 	}
1618:ffat_chan/ff.c **** 	return res;
1619:ffat_chan/ff.c **** }
1620:ffat_chan/ff.c **** 
1621:ffat_chan/ff.c **** 
1622:ffat_chan/ff.c **** 
1623:ffat_chan/ff.c **** 
1624:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1625:ffat_chan/ff.c **** /* Rename File/Directory                                                 */
1626:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1627:ffat_chan/ff.c **** 
1628:ffat_chan/ff.c **** FRESULT f_rename (
1629:ffat_chan/ff.c **** 	const char *path_old,	/* Pointer to the old name */
1630:ffat_chan/ff.c **** 	const char *path_new	/* Pointer to the new name */
1631:ffat_chan/ff.c **** )
1632:ffat_chan/ff.c **** {
1633:ffat_chan/ff.c **** 	FRESULT res;
1634:ffat_chan/ff.c **** 	DIR dj;
1635:ffat_chan/ff.c **** 	DWORD sect_old;
1636:ffat_chan/ff.c **** 	BYTE *dir_old, *dir_new, direntry[32-11];
1637:ffat_chan/ff.c **** 	char fn[8+3+1];
1638:ffat_chan/ff.c **** 
1639:ffat_chan/ff.c **** 
1640:ffat_chan/ff.c **** 	res = auto_mount(&path_old, &dj.fs, 1);
1641:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1642:ffat_chan/ff.c **** 
1643:ffat_chan/ff.c **** 	res = trace_path(&dj, fn, path_old, &dir_old);	/* Check old object */
1644:ffat_chan/ff.c **** 	if (res != FR_OK) return res;				/* The old object is not found */
1645:ffat_chan/ff.c **** 	if (!dir_old) return FR_NO_FILE;
1646:ffat_chan/ff.c **** 	sect_old = dj.fs->winsect;					/* Save the object information */
1647:ffat_chan/ff.c **** 	memcpy(direntry, &dir_old[DIR_Attr], 32-11);
1648:ffat_chan/ff.c **** 
1649:ffat_chan/ff.c **** 	res = trace_path(&dj, fn, path_new, &dir_new);	/* Check new object */
1650:ffat_chan/ff.c **** 	if (res == FR_OK) return FR_EXIST;			/* The new object name is already existing */
1651:ffat_chan/ff.c **** 	if (res != FR_NO_FILE) return res;			/* Is there no old name? */
1652:ffat_chan/ff.c **** 	res = reserve_direntry(&dj, &dir_new); 		/* Reserve a directory entry */
1653:ffat_chan/ff.c **** 	if (res != FR_OK) return res;
1654:ffat_chan/ff.c **** 
1655:ffat_chan/ff.c **** 	memcpy(&dir_new[DIR_Attr], direntry, 32-11);	/* Create new entry */
1656:ffat_chan/ff.c **** 	memcpy(&dir_new[DIR_Name], fn, 8+3);
1657:ffat_chan/ff.c **** 	dir_new[DIR_NTres] = fn[11];
1658:ffat_chan/ff.c **** 	dj.fs->winflag = 1;
1659:ffat_chan/ff.c **** 
1660:ffat_chan/ff.c **** 	if (!move_window(dj.fs, sect_old)) return FR_RW_ERROR;	/* Delete old entry */
1661:ffat_chan/ff.c **** 	dir_old[DIR_Name] = 0xE5;
1662:ffat_chan/ff.c **** 
1663:ffat_chan/ff.c **** 	return sync(dj.fs);
1664:ffat_chan/ff.c **** }
1665:ffat_chan/ff.c **** 
1666:ffat_chan/ff.c **** #endif /* !_FS_READONLY */
1667:ffat_chan/ff.c **** #endif /* _FS_MINIMIZE == 0 */
1668:ffat_chan/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1669:ffat_chan/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
1670:ffat_chan/ff.c **** 
1671:ffat_chan/ff.c **** 
1672:ffat_chan/ff.c **** 
1673:ffat_chan/ff.c **** #if _USE_MKFS && !_FS_READONLY
1674:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1675:ffat_chan/ff.c **** /* Create File System on the Drive                                       */
1676:ffat_chan/ff.c **** /*-----------------------------------------------------------------------*/
1677:ffat_chan/ff.c **** #define N_ROOTDIR	512			/* Multiple of 32 and <= 2048 */
1678:ffat_chan/ff.c **** #define N_FATS		1			/* 1 or 2 */
1679:ffat_chan/ff.c **** #define MAX_SECTOR	64000000UL	/* Maximum partition size */
1680:ffat_chan/ff.c **** #define MIN_SECTOR	2000UL		/* Minimum partition size */
1681:ffat_chan/ff.c **** 
1682:ffat_chan/ff.c **** 
1683:ffat_chan/ff.c **** 
1684:ffat_chan/ff.c **** FRESULT f_mkfs (
1685:ffat_chan/ff.c **** 	BYTE drv,			/* Logical drive number */
1686:ffat_chan/ff.c **** 	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
1687:ffat_chan/ff.c **** 	WORD allocsize		/* Allocation unit size [bytes] */
1688:ffat_chan/ff.c **** )
1689:ffat_chan/ff.c **** {
 220              	sl #16
 221              	.LVL19:
 222              		sub	fp, ip, #4
 223              	.LCFI8:
 224 0000 0DC0A0E1 		sub	sp, sp, #52
 225              	.LCFI9:
 226 0004 F0DF2DE9 		.loc 1 1699 0
 227              		ands	r0, r0, #255
 228 0008 0228A0E1 	.LVL20:
 229              		.loc 1 1689 0
 230 000c 04B04CE2 		.loc 1 1689 0
 231              		and	r5, r1, #255
 232 0010 34D04DE2 	.LVL21:
 233              		mov	r4, r2, lsr #16
1690:ffat_chan/ff.c **** 	BYTE fmt, m, *tbl;
1691:ffat_chan/ff.c **** 	DWORD b_part, b_fat, b_dir, b_data;		/* Area offset (LBA) */
1692:ffat_chan/ff.c **** 	DWORD n_part, n_rsv, n_fat, n_dir;		/* Area size */
1693:ffat_chan/ff.c **** 	DWORD n_clust, n;
1694:ffat_chan/ff.c **** 	FATFS *fs;
1695:ffat_chan/ff.c **** 	DSTATUS stat;
1696:ffat_chan/ff.c **** 
1697:ffat_chan/ff.c **** 
1698:ffat_chan/ff.c **** 	/* Check validity of the parameters */
1699:ffat_chan/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 234              	1 1699 0
 235 0014 FF0010E2 		movne	r0, #5
 236              	.LVL23:
 237              		bne	.L25
 238              		.loc 1 1700 0
 239 0018 FF5001E2 		cmp	r5, #1
 240              		.loc 1 1701 0
 241 001c 2248A0E1 		movls	r3, #512
 242              		movls	r2, r3
 243              		.loc 1 1700 0
 244 0020 0500A013 		bls	.L27
 245              	.LVL24:
 246 0024 0400001A 	.L26:
1700:ffat_chan/ff.c **** 	if (partition >= 2) return FR_MKFS_ABORTED;
 247              	0
 248 0028 010055E3 		mov	r0, #13
1701:ffat_chan/ff.c **** 	for (n = 512; n <= 32768U && n != allocsize; n <<= 1);
 249              	VL25:
 250 002c 023CA093 	.L25:
 251 0030 0320A091 		.loc 1 1871 0
 252              		sub	sp, fp, #40
 253 0034 0300009A 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 254              	.LVL26:
 255              	.L70:
1702:ffat_chan/ff.c **** 	if (n != allocsize) return FR_MKFS_ABORTED;
1703:ffat_chan/ff.c **** 
1704:ffat_chan/ff.c **** 	/* Check mounted drive and clear work area */
1705:ffat_chan/ff.c **** 	fs = FatFs[drv];
1706:ffat_chan/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
1707:ffat_chan/ff.c **** 	fs->fs_type = 0;
1708:ffat_chan/ff.c **** 	drv = LD2PD(drv);
1709:ffat_chan/ff.c **** 
1710:ffat_chan/ff.c **** 	/* Get disk statics */
1711:ffat_chan/ff.c **** 	stat = disk_initialize(drv);
1712:ffat_chan/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
1713:ffat_chan/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
1714:ffat_chan/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
1715:ffat_chan/ff.c **** 		return FR_MKFS_ABORTED;
1716:ffat_chan/ff.c **** 	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
1717:ffat_chan/ff.c **** 	b_part = (!partition) ? 63 : 0;		/* Boot sector */
1718:ffat_chan/ff.c **** 	n_part -= b_part;
1719:ffat_chan/ff.c **** #if S_MAX_SIZ > 512						/* Check disk sector size */
1720:ffat_chan/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
1721:ffat_chan/ff.c **** 		|| SS(fs) > S_MAX_SIZ
1722:ffat_chan/ff.c **** 		|| SS(fs) > allocsize)
1723:ffat_chan/ff.c **** 		return FR_MKFS_ABORTED;
1724:ffat_chan/ff.c **** #endif
1725:ffat_chan/ff.c **** 	allocsize /= SS(fs);		/* Number of sectors per cluster */
1726:ffat_chan/ff.c **** 
1727:ffat_chan/ff.c **** 	/* Pre-compute number of clusters and FAT type */
1728:ffat_chan/ff.c **** 	n_clust = n_part / allocsize;
1729:ffat_chan/ff.c **** 	fmt = FS_FAT12;
1730:ffat_chan/ff.c **** 	if (n_clust >= 0xFF5) fmt = FS_FAT16;
1731:ffat_chan/ff.c **** 	if (n_clust >= 0xFFF5) fmt = FS_FAT32;
1732:ffat_chan/ff.c **** 
1733:ffat_chan/ff.c **** 	/* Determine offset and size of FAT structure */
1734:ffat_chan/ff.c **** 	switch (fmt) {
1735:ffat_chan/ff.c **** 	case FS_FAT12:
1736:ffat_chan/ff.c **** 		n_fat = ((n_clust * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
1737:ffat_chan/ff.c **** 		n_rsv = 1 + partition;
1738:ffat_chan/ff.c **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
1739:ffat_chan/ff.c **** 		break;
1740:ffat_chan/ff.c **** 	case FS_FAT16:
1741:ffat_chan/ff.c **** 		n_fat = ((n_clust * 2) + 4 + SS(fs) - 1) / SS(fs);
1742:ffat_chan/ff.c **** 		n_rsv = 1 + partition;
1743:ffat_chan/ff.c **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
1744:ffat_chan/ff.c **** 		break;
1745:ffat_chan/ff.c **** 	default:
1746:ffat_chan/ff.c **** 		n_fat = ((n_clust * 4) + 8 + SS(fs) - 1) / SS(fs);
1747:ffat_chan/ff.c **** 		n_rsv = 33 - partition;
1748:ffat_chan/ff.c **** 		n_dir = 0;
1749:ffat_chan/ff.c **** 	}
1750:ffat_chan/ff.c **** 	b_fat = b_part + n_rsv;			/* FATs start sector */
1751:ffat_chan/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
1752:ffat_chan/ff.c **** 	b_data = b_dir + n_dir;			/* Data start sector */
1753:ffat_chan/ff.c **** 
1754:ffat_chan/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
1755:ffat_chan/ff.c **** 	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
1756:ffat_chan/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);
1757:ffat_chan/ff.c **** 	n_fat += (n - b_data) / N_FATS;
1758:ffat_chan/ff.c **** 	/* b_dir and b_data are no longer used below */
1759:ffat_chan/ff.c **** 
1760:ffat_chan/ff.c **** 	/* Determine number of cluster and final check of validity of the FAT type */
1761:ffat_chan/ff.c **** 	n_clust = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
1762:ffat_chan/ff.c **** 	if (   (fmt == FS_FAT16 && n_clust < 0xFF5)
1763:ffat_chan/ff.c **** 		|| (fmt == FS_FAT32 && n_clust < 0xFFF5))
1764:ffat_chan/ff.c **** 		return FR_MKFS_ABORTED;
1765:ffat_chan/ff.c **** 
1766:ffat_chan/ff.c **** 	/* Create partition table if needed */
1767:ffat_chan/ff.c **** 	if (!partition) {
1768:ffat_chan/ff.c **** 		DWORD n_disk = b_part + n_part;
1769:ffat_chan/ff.c **** 
1770:ffat_chan/ff.c **** 		tbl = &fs->win[MBR_Table];
1771:ffat_chan/ff.c **** 		ST_DWORD(&tbl[0], 0x00010180);	/* Partition start in CHS */
1772:ffat_chan/ff.c **** 		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
1773:ffat_chan/ff.c **** 			n_disk = n_disk / 63 / 255;
1774:ffat_chan/ff.c **** 			tbl[7] = (BYTE)n_disk;
1775:ffat_chan/ff.c **** 			tbl[6] = (BYTE)((n_disk >> 2) | 63);
1776:ffat_chan/ff.c **** 		} else {
1777:ffat_chan/ff.c **** 			ST_WORD(&tbl[6], 0xFFFF);
1778:ffat_chan/ff.c **** 		}
1779:ffat_chan/ff.c **** 		tbl[5] = 254;
1780:ffat_chan/ff.c **** 		if (fmt != FS_FAT32)			/* System ID */
1781:ffat_chan/ff.c **** 			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
1782:ffat_chan/ff.c **** 		else
1783:ffat_chan/ff.c **** 			tbl[4] = 0x0c;
1784:ffat_chan/ff.c **** 		ST_DWORD(&tbl[8], 63);			/* Partition start in LBA */
1785:ffat_chan/ff.c **** 		ST_DWORD(&tbl[12], n_part);		/* Partition size in LBA */
1786:ffat_chan/ff.c **** 		ST_WORD(&tbl[64], 0xAA55);		/* Signature */
1787:ffat_chan/ff.c **** 		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
1788:ffat_chan/ff.c **** 			return FR_RW_ERROR;
1789:ffat_chan/ff.c **** 	}
1790:ffat_chan/ff.c **** 
1791:ffat_chan/ff.c **** 	/* Create boot record */
1792:ffat_chan/ff.c **** 	tbl = fs->win;								/* Clear buffer */
1793:ffat_chan/ff.c **** 	memset(tbl, 0, SS(fs));
1794:ffat_chan/ff.c **** 	ST_DWORD(&tbl[BS_jmpBoot], 0x90FEEB);		/* Boot code (jmp $, nop) */
1795:ffat_chan/ff.c **** 	ST_WORD(&tbl[BPB_BytsPerSec], SS(fs));		/* Sector size */
1796:ffat_chan/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
1797:ffat_chan/ff.c **** 	ST_WORD(&tbl[BPB_RsvdSecCnt], n_rsv);		/* Reserved sectors */
1798:ffat_chan/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
1799:ffat_chan/ff.c **** 	ST_WORD(&tbl[BPB_RootEntCnt], SS(fs) / 32 * n_dir); /* Number of rootdir entries */
1800:ffat_chan/ff.c **** 	if (n_part < 0x10000) {						/* Number of total sectors */
1801:ffat_chan/ff.c **** 		ST_WORD(&tbl[BPB_TotSec16], n_part);
1802:ffat_chan/ff.c **** 	} else {
1803:ffat_chan/ff.c **** 		ST_DWORD(&tbl[BPB_TotSec32], n_part);
1804:ffat_chan/ff.c **** 	}
1805:ffat_chan/ff.c **** 	tbl[BPB_Media] = 0xF8;						/* Media descripter */
1806:ffat_chan/ff.c **** 	ST_WORD(&tbl[BPB_SecPerTrk], 63);			/* Number of sectors per track */
1807:ffat_chan/ff.c **** 	ST_WORD(&tbl[BPB_NumHeads], 255);			/* Number of heads */
1808:ffat_chan/ff.c **** 	ST_DWORD(&tbl[BPB_HiddSec], b_part);		/* Hidden sectors */
1809:ffat_chan/ff.c **** 	n = get_fattime();							/* Use current time as a VSN */
1810:ffat_chan/ff.c **** 	if (fmt != FS_FAT32) {
1811:ffat_chan/ff.c **** 		ST_DWORD(&tbl[BS_VolID], n);			/* Volume serial number */
1812:ffat_chan/ff.c **** 		ST_WORD(&tbl[BPB_FATSz16], n_fat);		/* Number of secters per FAT */
1813:ffat_chan/ff.c **** 		tbl[BS_DrvNum] = 0x80;					/* Drive number */
1814:ffat_chan/ff.c **** 		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
1815:ffat_chan/ff.c **** 		memcpy(&tbl[BS_VolLab], "NO NAME    FAT     ", 19);	/* Volume lavel, FAT signature */
1816:ffat_chan/ff.c **** 	} else {
1817:ffat_chan/ff.c **** 		ST_DWORD(&tbl[BS_VolID32], n);			/* Volume serial number */
1818:ffat_chan/ff.c **** 		ST_DWORD(&tbl[BPB_FATSz32], n_fat);		/* Number of secters per FAT */
1819:ffat_chan/ff.c **** 		ST_DWORD(&tbl[BPB_RootClus], 2);		/* Root directory cluster (2) */
1820:ffat_chan/ff.c **** 		ST_WORD(&tbl[BPB_FSInfo], 1);			/* FSInfo record (bs+1) */
1821:ffat_chan/ff.c **** 		ST_WORD(&tbl[BPB_BkBootSec], 6);		/* Backup boot record (bs+6) */
1822:ffat_chan/ff.c **** 		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
1823:ffat_chan/ff.c **** 		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
1824:ffat_chan/ff.c **** 		memcpy(&tbl[BS_VolLab32], "NO NAME    FAT32   ", 19);	/* Volume lavel, FAT signature */
1825:ffat_chan/ff.c **** 	}
1826:ffat_chan/ff.c **** 	ST_WORD(&tbl[BS_55AA], 0xAA55);			/* Signature */
1827:ffat_chan/ff.c **** 	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
1828:ffat_chan/ff.c **** 		return FR_RW_ERROR;
1829:ffat_chan/ff.c **** 	if (fmt == FS_FAT32)
1830:ffat_chan/ff.c **** 		disk_write(drv, tbl, b_part+6, 1);
1831:ffat_chan/ff.c **** 
1832:ffat_chan/ff.c **** 	/* Initialize FAT area */
1833:ffat_chan/ff.c **** 	for (m = 0; m < N_FATS; m++) {
1834:ffat_chan/ff.c **** 		memset(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
1835:ffat_chan/ff.c **** 		if (fmt != FS_FAT32) {
1836:ffat_chan/ff.c **** 			n = (fmt == FS_FAT12) ? 0x00FFFFF8 : 0xFFFFFFF8;
1837:ffat_chan/ff.c **** 			ST_DWORD(&tbl[0], n);			/* Reserve cluster #0-1 (FAT12/16) */
1838:ffat_chan/ff.c **** 		} else {
1839:ffat_chan/ff.c **** 			ST_DWORD(&tbl[0], 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
1840:ffat_chan/ff.c **** 			ST_DWORD(&tbl[4], 0xFFFFFFFF);
1841:ffat_chan/ff.c **** 			ST_DWORD(&tbl[8], 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
1842:ffat_chan/ff.c **** 		}
1843:ffat_chan/ff.c **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
1844:ffat_chan/ff.c **** 			return FR_RW_ERROR;
1845:ffat_chan/ff.c **** 		memset(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
1846:ffat_chan/ff.c **** 		for (n = 1; n < n_fat; n++) {
1847:ffat_chan/ff.c **** 			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
1848:ffat_chan/ff.c **** 				return FR_RW_ERROR;
1849:ffat_chan/ff.c **** 		}
1850:ffat_chan/ff.c **** 	}
1851:ffat_chan/ff.c **** 
1852:ffat_chan/ff.c **** 	/* Initialize Root directory */
1853:ffat_chan/ff.c **** 	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
1854:ffat_chan/ff.c **** 	do {
1855:ffat_chan/ff.c **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
1856:ffat_chan/ff.c **** 			return FR_RW_ERROR;
1857:ffat_chan/ff.c **** 	} while (--m);
1858:ffat_chan/ff.c **** 
1859:ffat_chan/ff.c **** 	/* Create FSInfo record if needed */
1860:ffat_chan/ff.c **** 	if (fmt == FS_FAT32) {
1861:ffat_chan/ff.c **** 		ST_WORD(&tbl[BS_55AA], 0xAA55);
1862:ffat_chan/ff.c **** 		ST_DWORD(&tbl[FSI_LeadSig], 0x41615252);
1863:ffat_chan/ff.c **** 		ST_DWORD(&tbl[FSI_StrucSig], 0x61417272);
1864:ffat_chan/ff.c **** 		ST_DWORD(&tbl[FSI_Free_Count], n_clust - 1);
1865:ffat_chan/ff.c **** 		ST_DWORD(&tbl[FSI_Nxt_Free], 0xFFFFFFFF);
1866:ffat_chan/ff.c **** 		disk_write(drv, tbl, b_part+1, 1);
1867:ffat_chan/ff.c **** 		disk_write(drv, tbl, b_part+7, 1);
1868:ffat_chan/ff.c **** 	}
1869:ffat_chan/ff.c **** 
1870:ffat_chan/ff.c **** 	return (disk_ioctl(drv, CTRL_SYNC, NULL) == RES_OK) ? FR_OK : FR_RW_ERROR;
 256              	 1701 0
 257 0038 0D00A0E3 		mov	r3, r2
 258              	.L27:
 259              		cmp	r4, r3
1871:ffat_chan/ff.c **** }
 260              		r0, r0, #1
 261 003c 28D04BE2 		beq	.L69
 262 0040 F0AF9DE8 		cmp	r0, #7
 263              		mov	r2, r3, asl #1
 264              		bne	.L70
 265              		.loc 1 1702 0
 266 0044 0230A0E1 		cmp	r4, r2
 267              		.loc 1 1701 0
 268 0048 030054E1 		str	r2, [fp, #-48]
 269 004c 010080E2 	.LVL27:
 270 0050 0600000A 		.loc 1 1702 0
 271 0054 070050E3 		bne	.L26
 272 0058 8320A0E1 		b	.L30
 273 005c F8FFFF1A 	.LVL28:
 274              	.L69:
 275 0060 020054E1 		.loc 1 1701 0
 276              		str	r2, [fp, #-48]
 277 0064 30200BE5 	.LVL29:
 278              	.L30:
 279              		.loc 1 1705 0
 280 0068 F2FFFF1A 		ldr	r3, .L76
 281 006c 000000EA 		ldr	r9, [r3, #0]
 282              	.LVL30:
 283              		.loc 1 1706 0
 284              		cmp	r9, #0
 285 0070 30200BE5 		moveq	r0, #10
 286              		beq	.L25
 287              		.loc 1 1707 0
 288              		mov	r0, #0
 289 0074 04389FE5 		strb	r0, [r9, #42]
 290 0078 009093E5 		.loc 1 1711 0
 291              		bl	disk_initialize
 292              		.loc 1 1712 0
 293 007c 000059E3 		tst	r0, #1
 294 0080 0A00A003 		movne	r0, #1
 295 0084 ECFFFF0A 		bne	.L25
 296              		.loc 1 1713 0
 297 0088 0000A0E3 		ands	r0, r0, #4
 298 008c 2A00C9E5 		movne	r0, #9
 299              		bne	.L25
 300 0090 FEFFFFEB 		.loc 1 1714 0
 301              		mov	r1, #1
 302 0094 010010E3 		sub	r2, fp, #44
 303 0098 0100A013 		bl	disk_ioctl
 304 009c E6FFFF1A 		cmp	r0, #0
 305              		bne	.L26
 306 00a0 040010E2 		ldr	r0, [fp, #-44]
 307 00a4 0900A013 	.LVL31:
 308 00a8 E3FFFF1A 		cmp	r0, #2000
 309              		bcc	.L26
 310 00ac 0110A0E3 	.LVL32:
 311 00b0 2C204BE2 		.loc 1 1716 0
 312 00b4 FEFFFFEB 		mov	r3, #63963136
 313 00b8 000050E3 		add	r3, r3, #36864
 314 00bc DDFFFF1A 		cmp	r0, r3
 315 00c0 2C001BE5 		movcs	r0, r3
 316              		.loc 1 1717 0
 317 00c4 7D0E50E3 		cmp	r5, #0
 318 00c8 DAFFFF3A 		moveq	r1, #63
 319              		movne	r1, #0
 320              		.loc 1 1718 0
 321 00cc 3D36A0E3 		rsb	r6, r1, r0
 322 00d0 093A83E2 	.LVL33:
 323 00d4 030050E1 		.loc 1 1725 0
 324 00d8 0300A021 		mov	sl, r4, lsr #9
 325              	.LVL34:
 326 00dc 000055E3 		.loc 1 1717 0
 327 00e0 3F10A003 		str	r1, [fp, #-68]
 328 00e4 0010A013 	.LVL35:
 329              		.loc 1 1728 0
 330 00e8 006061E0 		mov	r0, r6
 331              		mov	r1, sl
 332              		bl	__udivsi3
 333 00ec A4A4A0E1 		.loc 1 1730 0
 334              		mov	r3, #4080
 335              		add	r3, r3, #4
 336 00f0 44100BE5 		cmp	r0, r3
 337              		bls	.L37
 338              		.loc 1 1731 0
 339 00f4 0600A0E1 		mov	r3, #65280
 340 00f8 0A10A0E1 		add	r3, r3, #244
 341 00fc FEFFFFEB 		cmp	r0, r3
 342              		bls	.L71
 343 0100 FF3EA0E3 		.loc 1 1746 0
 344 0104 043083E2 		add	r3, r0, #130
 345 0108 030050E1 		mov	r3, r3, asl #2
 346 010c 2801009A 		sub	r3, r3, #1
 347              		mov	r4, r3, lsr #9
 348 0110 FF3CA0E3 	.LVL36:
 349 0114 F43083E2 		.loc 1 1747 0
 350 0118 030050E1 		rsb	r2, r5, #33
 351 011c CC01009A 		mov	r3, #0
 352              		mov	r1, #3
 353 0120 823080E2 		str	r2, [fp, #-60]
 354 0124 0331A0E1 	.LVL37:
 355 0128 013043E2 		str	r3, [fp, #-56]
 356 012c A344A0E1 	.LVL38:
 357              		str	r1, [fp, #-76]
 358              	.LVL39:
 359 0130 212065E2 	.L39:
 360 0134 0030A0E3 		.loc 1 1755 0
 361 0138 0310A0E3 		mov	r0, #0
 362 013c 3C200BE5 		mov	r1, #3
 363              		sub	r2, fp, #48
 364 0140 38300BE5 		.loc 1 1718 0
 365              		str	r6, [fp, #-44]
 366 0144 4C100BE5 		.loc 1 1755 0
 367              		bl	disk_ioctl
 368              		cmp	r0, #0
 369              		bne	.L26
 370 0148 0000A0E3 	.LVL40:
 371 014c 0310A0E3 		.loc 1 1750 0
 372 0150 30204BE2 		ldr	r3, [fp, #-68]
 373              		ldr	r2, [fp, #-60]
 374 0154 2C600BE5 		add	r2, r2, r3
 375              		.loc 1 1752 0
 376 0158 FEFFFFEB 		ldr	r3, [fp, #-56]
 377 015c 000050E3 		.loc 1 1750 0
 378 0160 B4FFFF1A 		str	r2, [fp, #-64]
 379              	.LVL41:
 380              		.loc 1 1756 0
 381 0164 44301BE5 		ldr	r1, [fp, #-48]
 382 0168 3C201BE5 		.loc 1 1752 0
 383 016c 032082E0 		add	r2, r3, r4
 384              		ldr	r3, [fp, #-64]
 385 0170 38301BE5 		add	r2, r2, r3
 386              	.LVL42:
 387 0174 40200BE5 		.loc 1 1756 0
 388              		sub	r3, r1, #1
 389              		add	r3, r3, r2
 390 0178 30101BE5 		rsb	r1, r1, #0
 391              		and	r6, r3, r1
 392 017c 042083E0 	.LVL43:
 393 0180 40301BE5 		.loc 1 1761 0
 394 0184 032082E0 		ldr	r7, [fp, #-44]
 395              		ldr	r1, [fp, #-60]
 396              		.loc 1 1757 0
 397 0188 013041E2 		rsb	r2, r2, r4
 398 018c 023083E0 	.LVL44:
 399 0190 001061E2 		add	r8, r2, r6
 400 0194 016003E0 	.LVL45:
 401              		.loc 1 1761 0
 402              		rsb	r0, r1, r7
 403 0198 2C701BE5 		ldr	r2, [fp, #-56]
 404 019c 3C101BE5 		rsb	r0, r8, r0
 405              		mov	r1, sl
 406 01a0 042062E0 		rsb	r0, r2, r0
 407              		bl	__udivsi3
 408 01a4 068082E0 		.loc 1 1762 0
 409              		mov	r3, #4080
 410              		ldr	r1, [fp, #-76]
 411 01a8 070061E0 		add	r3, r3, #4
 412 01ac 38201BE5 		cmp	r0, r3
 413 01b0 000068E0 		cmpls	r1, #2
 414 01b4 0A10A0E1 		.loc 1 1761 0
 415 01b8 000062E0 		str	r0, [fp, #-52]
 416 01bc FEFFFFEB 	.LVL46:
 417              		.loc 1 1762 0
 418 01c0 FF3EA0E3 		beq	.L26
 419 01c4 4C101BE5 		mov	r3, #65280
 420 01c8 043083E2 		add	r3, r3, #244
 421 01cc 030050E1 		cmp	r1, #3
 422 01d0 02005193 		movne	r2, #0
 423              		moveq	r2, #1
 424 01d4 34000BE5 		cmp	r0, r3
 425              		cmpls	r1, #3
 426              		str	r2, [fp, #-88]
 427 01d8 96FFFF0A 		beq	.L26
 428 01dc FF3CA0E3 		.loc 1 1767 0
 429 01e0 F43083E2 		cmp	r5, #0
 430 01e4 030051E3 		.loc 1 1756 0
 431 01e8 0020A013 		str	r6, [fp, #-48]
 432 01ec 0120A003 		addne	ip, r9, #48
 433 01f0 030050E1 	.LVL47:
 434 01f4 03005193 		.loc 1 1767 0
 435 01f8 58200BE5 		bne	.L40
 436 01fc 8DFFFF0A 	.LVL48:
 437              	.LBB26:
 438 0200 000055E3 		.loc 1 1768 0
 439              		ldr	r1, [fp, #-68]
 440 0204 30600BE5 		.loc 1 1772 0
 441 0208 30C08912 		mvn	r3, #-16777216
 442              		sub	r3, r3, #323584
 443              		sub	r3, r3, #3072
 444 020c 4100001A 		.loc 1 1768 0
 445              		add	r0, r1, r7
 446              	.LVL49:
 447              		.loc 1 1772 0
 448 0210 44101BE5 		cmp	r0, r3
 449              		.loc 1 1771 0
 450 0214 FF34E0E3 		mvn	r3, #127
 451 0218 4F3A43E2 		strb	r3, [r9, #494]
 452 021c 033B43E2 		mov	r2, #1
 453              		.loc 1 1777 0
 454 0220 070081E0 		mvnhi	r3, #0
 455              		.loc 1 1770 0
 456              		add	ip, r9, #492
 457 0224 030050E1 	.LVL50:
 458              		.loc 1 1771 0
 459 0228 7F30E0E3 		strb	r2, [r9, #495]
 460 022c EE31C9E5 		.loc 1 1770 0
 461 0230 0120A0E3 		add	ip, ip, #2
 462              		.loc 1 1771 0
 463 0234 0030E083 		strb	r2, [r9, #496]
 464              		strb	r5, [r9, #497]
 465 0238 7BCF89E2 		.loc 1 1777 0
 466              		strhib	r3, [r9, #500]
 467              		strhib	r3, [r9, #501]
 468 023c EF21C9E5 		.loc 1 1772 0
 469              		bhi	.L42
 470 0240 02C08CE2 		.loc 1 1773 0
 471              		ldr	r2, .L76+4
 472 0244 F021C9E5 		umull	r1, r3, r2, r0
 473 0248 F151C9E5 		rsb	r1, r3, r0
 474              		add	r3, r3, r1, lsr #1
 475 024c F431C985 		.loc 1 1775 0
 476 0250 F531C985 		mov	r2, r3, lsr #15
 477              		orr	r2, r2, #63
 478 0254 0800008A 		.loc 1 1773 0
 479              		mov	r3, r3, lsr #13
 480 0258 24269FE5 	.LVL51:
 481 025c 921083E0 		.loc 1 1774 0
 482 0260 001063E0 		strb	r3, [r9, #501]
 483 0264 A13083E0 		.loc 1 1775 0
 484              		strb	r2, [ip, #6]
 485 0268 A327A0E1 	.LVL52:
 486 026c 3F2082E3 	.L42:
 487              		.loc 1 1780 0
 488 0270 A336A0E1 		ldr	r2, [fp, #-76]
 489              		.loc 1 1779 0
 490              		mvn	r3, #1
 491 0274 F531C9E5 		.loc 1 1780 0
 492              		cmp	r2, #3
 493 0278 0620CCE5 		.loc 1 1779 0
 494              		strb	r3, [r9, #499]
 495              		.loc 1 1783 0
 496              		moveq	r3, #12
 497 027c 4C201BE5 		streqb	r3, [r9, #498]
 498              		.loc 1 1780 0
 499 0280 0130E0E3 		beq	.L46
 500              		.loc 1 1781 0
 501 0284 030052E3 		ldr	r3, [fp, #-44]
 502              		cmp	r3, #65536
 503 0288 F331C9E5 		movcc	r3, #4
 504              		movcs	r3, #6
 505 028c 0C30A003 		strb	r3, [r9, #498]
 506 0290 F231C905 	.L46:
 507              		.loc 1 1784 0
 508 0294 0400000A 		mov	r0, #0
 509              	.LVL53:
 510 0298 2C301BE5 		mov	r3, #63
 511 029c 010853E3 		strb	r3, [r9, #502]
 512 02a0 0430A033 		strb	r0, [r9, #503]
 513 02a4 0630A023 		strb	r0, [ip, #10]
 514 02a8 F231C9E5 		strb	r0, [r9, #505]
 515              		.loc 1 1785 0
 516              		ldrb	r3, [fp, #-44]	@ zero_extendqisi2
 517 02ac 0000A0E3 		strb	r3, [r9, #506]
 518              		ldrb	r2, [fp, #-43]	@ zero_extendqisi2
 519 02b0 3F30A0E3 	.LVL54:
 520 02b4 F631C9E5 		strb	r2, [r9, #507]
 521 02b8 F701C9E5 		ldrb	r3, [fp, #-42]	@ zero_extendqisi2
 522 02bc 0A00CCE5 	.LVL55:
 523 02c0 F901C9E5 		strb	r3, [ip, #14]
 524              		ldrb	r2, [fp, #-41]	@ zero_extendqisi2
 525 02c4 2C305BE5 	.LVL56:
 526 02c8 FA31C9E5 		.loc 1 1787 0
 527 02cc 2B205BE5 		add	ip, r9, #48
 528              	.LVL57:
 529 02d0 FB21C9E5 		.loc 1 1785 0
 530 02d4 2A305BE5 		strb	r2, [r9, #509]
 531              		.loc 1 1786 0
 532 02d8 0E30CCE5 		mov	r3, #85
 533 02dc 29205BE5 		mvn	r2, #85
 534              		strb	r3, [r9, #558]
 535              		.loc 1 1787 0
 536 02e0 30C089E2 		mov	r1, ip
 537              		.loc 1 1786 0
 538              		strb	r2, [r9, #559]
 539 02e4 FD21C9E5 		.loc 1 1787 0
 540              		sub	r3, r3, #84
 541 02e8 5530A0E3 		mov	r2, r0
 542 02ec 5520E0E3 		str	ip, [fp, #-92]
 543 02f0 2E32C9E5 	.LVL58:
 544              		bl	disk_write
 545 02f4 0C10A0E1 		cmp	r0, #0
 546              		ldr	ip, [fp, #-92]
 547 02f8 2F22C9E5 		bne	.L47
 548              	.LVL59:
 549 02fc 543043E2 	.L40:
 550 0300 0020A0E1 	.LBE26:
 551 0304 5CC00BE5 		.loc 1 1793 0
 552              		mov	r0, ip
 553 0308 FEFFFFEB 		mov	r1, #0
 554 030c 000050E3 		mov	r2, #512
 555 0310 5CC01BE5 		str	ip, [fp, #-92]
 556 0314 A400001A 	.LVL60:
 557              		bl	memset
 558              		.loc 1 1799 0
 559              		ldr	r3, [fp, #-56]
 560              		.loc 1 1794 0
 561 0318 0C00A0E1 		ldr	ip, [fp, #-92]
 562 031c 0010A0E3 		.loc 1 1799 0
 563 0320 022CA0E3 		cmp	r3, #0
 564 0324 5CC00BE5 		.loc 1 1794 0
 565              		mvn	r2, #1
 566 0328 FEFFFFEB 		mvn	r3, #20
 567              		.loc 1 1796 0
 568 032c 38301BE5 		and	sl, sl, #255
 569              	.LVL61:
 570 0330 5CC01BE5 		.loc 1 1797 0
 571              		ldr	r1, [fp, #-60]
 572 0334 000053E3 		.loc 1 1796 0
 573              		str	sl, [fp, #-72]
 574 0338 0120E0E3 	.LVL62:
 575 033c 1430E0E3 		.loc 1 1794 0
 576              		strb	r3, [ip, #0]
 577 0340 FFA00AE2 	.LVL63:
 578              		strb	r2, [r9, #49]
 579              		.loc 1 1798 0
 580 0344 3C101BE5 		add	r3, r3, #22
 581              		.loc 1 1794 0
 582 0348 48A00BE5 		sub	r2, r2, #110
 583              		strb	r2, [r9, #50]
 584              		.loc 1 1798 0
 585 034c 0030CCE5 		strb	r3, [r9, #64]
 586              		.loc 1 1796 0
 587 0350 3120C9E5 		ldr	r2, [fp, #-72]
 588              		.loc 1 1799 0
 589 0354 163083E2 		movne	r0, #2
 590              		moveq	r0, #0
 591 0358 6E2042E2 		.loc 1 1797 0
 592 035c 3220C9E5 		and	lr, r1, #255
 593              		.loc 1 1795 0
 594 0360 4030C9E5 		add	r3, r3, #1
 595              		.loc 1 1794 0
 596 0364 48201BE5 		mov	r1, #0
 597              		strb	r1, [r9, #51]
 598 0368 0200A013 		.loc 1 1796 0
 599 036c 0000A003 		strb	r2, [r9, #61]
 600              		.loc 1 1795 0
 601 0370 FFE001E2 		strb	r1, [r9, #59]
 602              		strb	r3, [r9, #60]
 603 0374 013083E2 		.loc 1 1797 0
 604              		strb	lr, [r9, #62]
 605 0378 0010A0E3 		strb	r1, [r9, #63]
 606 037c 3310C9E5 		.loc 1 1799 0
 607              		strb	r1, [r9, #65]
 608 0380 3D20C9E5 		strb	r0, [r9, #66]
 609              		.loc 1 1800 0
 610 0384 3B10C9E5 		ldr	r3, [fp, #-44]
 611 0388 3C30C9E5 		cmp	r3, #65536
 612              		bcs	.L48
 613 038c 3EE0C9E5 		.loc 1 1801 0
 614 0390 3F10C9E5 		and	r3, r3, #255
 615              		strb	r3, [r9, #67]
 616 0394 4110C9E5 		ldrb	r2, [fp, #-43]	@ zero_extendqisi2
 617 0398 4200C9E5 		strb	r2, [r9, #68]
 618              	.L49:
 619 039c 2C301BE5 		.loc 1 1808 0
 620 03a0 010853E3 		ldr	r3, [fp, #-68]
 621 03a4 A800002A 		and	r1, r3, #255
 622              		.loc 1 1805 0
 623 03a8 FF3003E2 		mvn	r3, #7
 624 03ac 4330C9E5 		strb	r3, [r9, #69]
 625 03b0 2B205BE5 		.loc 1 1806 0
 626 03b4 4420C9E5 		mov	r4, #0
 627              		mov	r2, #63
 628              		.loc 1 1807 0
 629 03b8 44301BE5 		add	r3, r3, #7
 630 03bc FF1003E2 		.loc 1 1806 0
 631              		strb	r2, [ip, #24]
 632 03c0 0730E0E3 		strb	r4, [ip, #25]
 633 03c4 4530C9E5 		.loc 1 1807 0
 634              		strb	r3, [ip, #26]
 635 03c8 0040A0E3 		strb	r4, [ip, #27]
 636 03cc 3F20A0E3 		.loc 1 1808 0
 637              		strb	r1, [ip, #28]
 638 03d0 073083E2 		strb	r4, [ip, #29]
 639              		strb	r4, [ip, #30]
 640 03d4 1820CCE5 		strb	r4, [ip, #31]
 641 03d8 1940CCE5 		.loc 1 1809 0
 642              		str	ip, [fp, #-92]
 643 03dc 1A30CCE5 	.LVL64:
 644 03e0 1B40CCE5 		bl	get_fattime
 645              		.loc 1 1810 0
 646 03e4 1C10CCE5 		ldr	r1, [fp, #-76]
 647 03e8 1D40CCE5 		cmp	r1, #3
 648 03ec 1E40CCE5 		.loc 1 1809 0
 649 03f0 1F40CCE5 		str	r0, [fp, #-48]
 650              		.loc 1 1810 0
 651 03f4 5CC00BE5 		ldr	ip, [fp, #-92]
 652              		beq	.L50
 653 03f8 FEFFFFEB 		.loc 1 1811 0
 654              		and	r3, r0, #255
 655 03fc 4C101BE5 		strb	r3, [ip, #39]
 656 0400 030051E3 	.LVL65:
 657              		ldrb	r2, [fp, #-47]	@ zero_extendqisi2
 658 0404 30000BE5 	.LVL66:
 659              		strb	r2, [ip, #40]
 660 0408 5CC01BE5 		ldrb	r3, [fp, #-46]	@ zero_extendqisi2
 661 040c A700000A 	.LVL67:
 662              		strb	r3, [ip, #41]
 663 0410 FF3000E2 		.loc 1 1812 0
 664 0414 2730CCE5 		mov	r2, r8, asl #16
 665              		.loc 1 1811 0
 666 0418 2F205BE5 		ldrb	r1, [fp, #-45]	@ zero_extendqisi2
 667              	.LVL68:
 668 041c 2820CCE5 		.loc 1 1812 0
 669 0420 2E305BE5 		mov	r2, r2, lsr #24
 670              		and	r3, r8, #255
 671 0424 2930CCE5 		.loc 1 1811 0
 672              		strb	r1, [ip, #42]
 673 0428 0828A0E1 		.loc 1 1812 0
 674              		strb	r3, [ip, #22]
 675 042c 2D105BE5 		strb	r2, [ip, #23]
 676              		.loc 1 1813 0
 677              		mvn	r3, #127
 678 0430 222CA0E1 		.loc 1 1814 0
 679 0434 FF3008E2 		mov	r2, #41
 680              		strb	r2, [r9, #86]
 681 0438 2A10CCE5 		.loc 1 1813 0
 682              		strb	r3, [r9, #84]
 683 043c 1630CCE5 		.loc 1 1815 0
 684 0440 1720CCE5 		add	r0, ip, #43
 685              		ldr	r1, .L76+8
 686 0444 7F30E0E3 		sub	r2, r2, #22
 687              		str	ip, [fp, #-92]
 688 0448 2920A0E3 	.LVL69:
 689 044c 5620C9E5 		bl	memcpy
 690              		ldr	ip, [fp, #-92]
 691 0450 5430C9E5 	.L51:
 692              		.loc 1 1826 0
 693 0454 2B008CE2 		mov	r3, #85
 694 0458 28149FE5 		mvn	r2, #85
 695 045c 162042E2 		strb	r3, [ip, #510]
 696 0460 5CC00BE5 	.LVL70:
 697              		strb	r2, [ip, #511]
 698 0464 FEFFFFEB 		.loc 1 1827 0
 699 0468 5CC01BE5 		mov	r1, ip
 700              		ldr	r2, [fp, #-68]
 701              		sub	r3, r3, #84
 702 046c 5530A0E3 		mov	r0, #0
 703 0470 5520E0E3 		str	ip, [fp, #-92]
 704 0474 FE31CCE5 	.LVL71:
 705              		bl	disk_write
 706 0478 FF21CCE5 		.loc 1 1826 0
 707              		ldr	ip, [fp, #-92]
 708 047c 0C10A0E1 		add	r2, ip, #508
 709 0480 44201BE5 	.LVL72:
 710 0484 543043E2 		add	r3, ip, #508
 711 0488 0000A0E3 		add	r2, r2, #2
 712 048c 5CC00BE5 		add	r3, r3, #3
 713              		.loc 1 1827 0
 714 0490 FEFFFFEB 		cmp	r0, #0
 715              		.loc 1 1826 0
 716 0494 5CC01BE5 		str	r2, [fp, #-84]
 717 0498 7F2F8CE2 		str	r3, [fp, #-80]
 718              		.loc 1 1827 0
 719 049c 7F3F8CE2 		bne	.L47
 720 04a0 022082E2 		.loc 1 1829 0
 721 04a4 033083E2 		ldr	r1, [fp, #-88]
 722              		cmp	r1, #0
 723 04a8 000050E3 		bne	.L72
 724              	.L52:
 725 04ac 54200BE5 		.loc 1 1834 0
 726 04b0 50300BE5 		mov	r0, ip
 727              		mov	r1, #0
 728 04b4 3C00001A 		mov	r2, #512
 729              		str	ip, [fp, #-92]
 730 04b8 58101BE5 	.LVL73:
 731 04bc 000051E3 		bl	memset
 732 04c0 A200001A 		.loc 1 1835 0
 733              		ldr	r1, [fp, #-76]
 734              		cmp	r1, #3
 735 04c4 0C00A0E1 		ldr	ip, [fp, #-92]
 736 04c8 0010A0E3 		beq	.L53
 737 04cc 022CA0E3 		.loc 1 1836 0
 738 04d0 5CC00BE5 		mov	r3, #16777216
 739              		cmp	r1, #1
 740 04d4 FEFFFFEB 		sub	r3, r3, #8
 741              		mvnne	r3, #7
 742 04d8 4C101BE5 	.LVL74:
 743 04dc 030051E3 		.loc 1 1837 0
 744 04e0 5CC01BE5 		mvn	r2, #7
 745 04e4 6100000A 		.loc 1 1836 0
 746              		str	r3, [fp, #-48]
 747 04e8 0134A0E3 		.loc 1 1837 0
 748 04ec 010051E3 		strb	r2, [ip, #0]
 749 04f0 083043E2 	.LVL75:
 750 04f4 0730E013 		ldrb	r3, [fp, #-47]	@ zero_extendqisi2
 751              	.LVL76:
 752              		strb	r3, [r9, #49]
 753 04f8 0720E0E3 		ldrb	r2, [fp, #-46]	@ zero_extendqisi2
 754              		strb	r2, [r9, #50]
 755 04fc 30300BE5 		ldrb	r3, [fp, #-45]	@ zero_extendqisi2
 756              		strb	r3, [r9, #51]
 757 0500 0020CCE5 	.LVL77:
 758              	.L56:
 759 0504 2F305BE5 		.loc 1 1843 0
 760              		mov	r1, ip
 761 0508 3130C9E5 		mov	r0, #0
 762 050c 2E205BE5 		ldr	r2, [fp, #-64]
 763 0510 3220C9E5 		mov	r3, #1
 764 0514 2D305BE5 		str	ip, [fp, #-92]
 765 0518 3330C9E5 	.LVL78:
 766              		bl	disk_write
 767              		cmp	r0, #0
 768              		ldr	ip, [fp, #-92]
 769 051c 0C10A0E1 		bne	.L47
 770 0520 0000A0E3 		.loc 1 1845 0
 771 0524 40201BE5 		mov	r1, r0
 772 0528 0130A0E3 		mov	r2, #512
 773 052c 5CC00BE5 		mov	r0, ip
 774              	.LVL79:
 775 0530 FEFFFFEB 		bl	memset
 776 0534 000050E3 	.LVL80:
 777 0538 5CC01BE5 		.loc 1 1843 0
 778 053c 1A00001A 		ldr	r2, [fp, #-64]
 779              		.loc 1 1846 0
 780 0540 0010A0E1 		mov	r3, #1
 781 0544 022CA0E3 		cmp	r8, #1
 782 0548 0C00A0E1 		str	r3, [fp, #-48]
 783              	.LVL81:
 784 054c FEFFFFEB 		.loc 1 1843 0
 785              		add	r4, r2, r3
 786              	.LVL82:
 787 0550 40201BE5 		.loc 1 1846 0
 788              		ldr	ip, [fp, #-92]
 789 0554 0130A0E3 		bhi	.L64
 790 0558 010058E3 		b	.L57
 791 055c 30300BE5 	.L73:
 792              		ldr	r3, [fp, #-48]
 793              		add	r3, r3, #1
 794 0560 034082E0 	.LVL83:
 795              		cmp	r8, r3
 796              		str	r3, [fp, #-48]
 797 0564 5CC01BE5 		bls	.L57
 798 0568 0500008A 	.LVL84:
 799 056c 1E0000EA 	.L64:
 800              		.loc 1 1847 0
 801 0570 30301BE5 		mov	r2, r4
 802 0574 013083E2 		mov	r1, ip
 803              	.LVL85:
 804 0578 030058E1 		mov	r0, #0
 805 057c 30300BE5 		mov	r3, #1
 806 0580 1900009A 		str	ip, [fp, #-92]
 807              	.LVL86:
 808              		bl	disk_write
 809              		cmp	r0, #0
 810 0584 0420A0E1 		add	r4, r4, #1
 811 0588 0C10A0E1 		ldr	ip, [fp, #-92]
 812              		beq	.L73
 813 058c 0000A0E3 	.LVL87:
 814 0590 0130A0E3 	.L47:
 815 0594 5CC00BE5 		.loc 1 1870 0
 816              		mov	r0, #8
 817 0598 FEFFFFEB 		b	.L25
 818 059c 000050E3 	.LVL88:
 819 05a0 014084E2 	.L37:
 820 05a4 5CC01BE5 		.loc 1 1736 0
 821 05a8 F0FFFF0A 		mov	r3, r0, asl #1
 822              		add	r3, r3, r0
 823              		add	r3, r3, #1
 824              		mov	r3, r3, lsr #1
 825 05ac 0800A0E3 		add	r3, r3, #512
 826 05b0 A1FEFFEA 		add	r3, r3, #2
 827              		mov	r4, r3, lsr #9
 828              	.LVL89:
 829              		.loc 1 1737 0
 830 05b4 8030A0E1 		add	r1, r5, #1
 831 05b8 003083E0 		mov	r2, #32
 832 05bc 013083E2 		mov	r3, #1
 833 05c0 A330A0E1 		str	r1, [fp, #-60]
 834 05c4 023C83E2 	.LVL90:
 835 05c8 023083E2 		str	r2, [fp, #-56]
 836 05cc A344A0E1 	.LVL91:
 837              		str	r3, [fp, #-76]
 838              	.LVL92:
 839 05d0 011085E2 		b	.L39
 840 05d4 2020A0E3 	.LVL93:
 841 05d8 0130A0E3 	.L57:
 842 05dc 3C100BE5 		.loc 1 1853 0
 843              		ldr	r3, [fp, #-88]
 844 05e0 38200BE5 		cmp	r3, #0
 845              		ldreq	r1, [fp, #-56]
 846 05e4 4C300BE5 		andeq	r1, r1, #255
 847              		streq	r1, [fp, #-72]
 848 05e8 D6FEFFEA 	.LVL94:
 849              		b	.L66
 850              	.LVL95:
 851              	.L75:
 852 05ec 58301BE5 		.loc 1 1857 0
 853 05f0 000053E3 		ands	r1, r1, #255
 854 05f4 38101B05 		str	r1, [fp, #-72]
 855 05f8 FF100102 	.LVL96:
 856 05fc 48100B05 		beq	.L74
 857              	.L66:
 858 0600 020000EA 		.loc 1 1855 0
 859              		mov	r2, r4
 860              		mov	r1, ip
 861              	.LVL97:
 862 0604 FF1011E2 		mov	r3, #1
 863 0608 48100BE5 		mov	r0, #0
 864              		str	ip, [fp, #-92]
 865 060c 5600000A 	.LVL98:
 866              		bl	disk_write
 867              		.loc 1 1857 0
 868 0610 0420A0E1 		ldr	r2, [fp, #-72]
 869 0614 0C10A0E1 		.loc 1 1855 0
 870              		add	r3, r4, #1
 871 0618 0130A0E3 	.LVL99:
 872 061c 0000A0E3 		cmp	r0, #0
 873 0620 5CC00BE5 		.loc 1 1857 0
 874              		sub	r1, r2, #1
 875 0624 FEFFFFEB 		mov	r4, r3
 876              		.loc 1 1855 0
 877 0628 48201BE5 		ldr	ip, [fp, #-92]
 878              		beq	.L75
 879 062c 013084E2 	.LVL100:
 880              		.loc 1 1870 0
 881 0630 000050E3 		mov	r0, #8
 882              		b	.L25
 883 0634 011042E2 	.LVL101:
 884 0638 0340A0E1 	.L48:
 885              		.loc 1 1803 0
 886 063c 5CC01BE5 		and	r3, r3, #255
 887 0640 EFFFFF0A 		strb	r3, [r9, #80]
 888              		ldrb	r2, [fp, #-43]	@ zero_extendqisi2
 889              		strb	r2, [r9, #81]
 890 0644 0800A0E3 		ldrb	r3, [fp, #-42]	@ zero_extendqisi2
 891 0648 7BFEFFEA 		strb	r3, [r9, #82]
 892              		ldrb	r2, [fp, #-41]	@ zero_extendqisi2
 893              		strb	r2, [r9, #83]
 894              		b	.L49
 895 064c FF3003E2 	.LVL102:
 896 0650 5030C9E5 	.L53:
 897 0654 2B205BE5 		.loc 1 1839 0
 898 0658 5120C9E5 		mvn	r2, #7
 899 065c 2A305BE5 		strb	r2, [ip, #0]
 900 0660 5230C9E5 	.LVL103:
 901 0664 29205BE5 		mvn	r3, #0
 902 0668 5320C9E5 		.loc 1 1841 0
 903 066c 51FFFFEA 		add	r2, r2, #23
 904              		.loc 1 1839 0
 905              		strb	r3, [r9, #49]
 906              		strb	r3, [r9, #50]
 907 0670 0720E0E3 		strb	r3, [r9, #51]
 908 0674 0020CCE5 		.loc 1 1840 0
 909              		strb	r3, [ip, #4]
 910 0678 0030E0E3 		strb	r3, [ip, #5]
 911              		strb	r3, [ip, #6]
 912 067c 172082E2 		strb	r3, [ip, #7]
 913              		.loc 1 1841 0
 914 0680 3130C9E5 		strb	r3, [ip, #8]
 915 0684 3230C9E5 		strb	r3, [ip, #9]
 916 0688 3330C9E5 		strb	r3, [ip, #10]
 917              		strb	r2, [r9, #59]
 918 068c 0430CCE5 		b	.L56
 919 0690 0530CCE5 	.LVL104:
 920 0694 0630CCE5 	.L50:
 921 0698 0730CCE5 		.loc 1 1817 0
 922              		and	r3, r0, #255
 923 069c 0830CCE5 		strb	r3, [ip, #67]
 924 06a0 0930CCE5 	.LVL105:
 925 06a4 0A30CCE5 		ldrb	r2, [fp, #-47]	@ zero_extendqisi2
 926 06a8 3B20C9E5 	.LVL106:
 927 06ac 9AFFFFEA 		strb	r2, [ip, #68]
 928              		ldrb	r3, [fp, #-46]	@ zero_extendqisi2
 929              	.LVL107:
 930              		strb	r3, [ip, #69]
 931 06b0 FF3000E2 		.loc 1 1818 0
 932 06b4 4330CCE5 		mov	r2, r8, asl #16
 933              		.loc 1 1817 0
 934 06b8 2F205BE5 		ldrb	lr, [fp, #-45]	@ zero_extendqisi2
 935              	.LVL108:
 936 06bc 4420CCE5 		.loc 1 1818 0
 937 06c0 2E305BE5 		mov	r3, r8, lsr #16
 938              		mov	r2, r2, lsr #24
 939 06c4 4530CCE5 		and	r3, r3, #255
 940              		and	r1, r8, #255
 941 06c8 0828A0E1 		.loc 1 1817 0
 942              		strb	lr, [ip, #70]
 943 06cc 2DE05BE5 		.loc 1 1818 0
 944              		mov	r0, r8, lsr #24
 945              		strb	r1, [ip, #36]
 946 06d0 2838A0E1 		strb	r2, [ip, #37]
 947 06d4 222CA0E1 		strb	r3, [ip, #38]
 948 06d8 FF3003E2 		.loc 1 1819 0
 949 06dc FF1008E2 		mov	r3, #2
 950              		.loc 1 1818 0
 951 06e0 46E0CCE5 		strb	r0, [ip, #39]
 952              		.loc 1 1819 0
 953 06e4 280CA0E1 		strb	r3, [ip, #44]
 954 06e8 2410CCE5 		.loc 1 1820 0
 955 06ec 2520CCE5 		sub	r3, r3, #1
 956 06f0 2630CCE5 		.loc 1 1819 0
 957              		strb	r4, [ip, #45]
 958 06f4 0230A0E3 		strb	r4, [ip, #46]
 959              		strb	r4, [ip, #47]
 960 06f8 2700CCE5 		.loc 1 1820 0
 961              		strb	r3, [ip, #48]
 962 06fc 2C30CCE5 		.loc 1 1821 0
 963              		add	r3, r3, #5
 964 0700 013043E2 		.loc 1 1820 0
 965              		strb	r4, [ip, #49]
 966 0704 2D40CCE5 		.loc 1 1823 0
 967 0708 2E40CCE5 		mov	r2, #41
 968 070c 2F40CCE5 		.loc 1 1821 0
 969              		strb	r3, [ip, #50]
 970 0710 3030CCE5 		.loc 1 1822 0
 971              		sub	r3, r3, #134
 972 0714 053083E2 		.loc 1 1821 0
 973              		strb	r4, [ip, #51]
 974 0718 3140CCE5 		.loc 1 1824 0
 975              		add	r0, ip, #71
 976 071c 2920A0E3 		.loc 1 1823 0
 977              		strb	r2, [r9, #114]
 978 0720 3230CCE5 		.loc 1 1822 0
 979              		strb	r3, [r9, #112]
 980 0724 863043E2 		.loc 1 1824 0
 981              		ldr	r1, .L76+12
 982 0728 3340CCE5 		sub	r2, r2, #22
 983              		str	ip, [fp, #-92]
 984 072c 47008CE2 	.LVL109:
 985              		bl	memcpy
 986 0730 7220C9E5 		ldr	ip, [fp, #-92]
 987              		b	.L51
 988 0734 7030C9E5 	.LVL110:
 989              	.L72:
 990 0738 4C119FE5 		.loc 1 1830 0
 991 073c 162042E2 		ldr	r3, [fp, #-68]
 992 0740 5CC00BE5 		mov	r1, ip
 993              		add	r2, r3, #6
 994 0744 FEFFFFEB 		mov	r3, #1
 995 0748 5CC01BE5 		bl	disk_write
 996 074c 46FFFFEA 	.LVL111:
 997              		ldr	ip, [fp, #-92]
 998              		b	.L52
 999              	.LVL112:
 1000 0750 44301BE5 	.L74:
 1001 0754 0C10A0E1 		.loc 1 1860 0
 1002 0758 062083E2 		ldr	r3, [fp, #-88]
 1003 075c 0130A0E3 		cmp	r3, #0
 1004 0760 FEFFFFEB 		beq	.L61
 1005              		.loc 1 1864 0
 1006 0764 5CC01BE5 		ldr	r2, [fp, #-52]
 1007 0768 55FFFFEA 		sub	r1, r2, #1
 1008              		.loc 1 1861 0
 1009              		ldr	r2, [fp, #-84]
 1010              		mov	r3, #85
 1011 076c 58301BE5 		strb	r3, [r2, #0]
 1012 0770 000053E3 		ldr	r3, [fp, #-80]
 1013 0774 2F00000A 		.loc 1 1864 0
 1014              		mov	lr, r1, asl #16
 1015 0778 34201BE5 		mov	r4, r1, lsr #16
 1016 077c 011042E2 	.LVL113:
 1017              		mov	sl, r1, lsr #24
 1018 0780 54201BE5 		.loc 1 1862 0
 1019 0784 5530A0E3 		mov	r5, #82
 1020 0788 0030C2E5 	.LVL114:
 1021 078c 50301BE5 		mov	r6, #97
 1022              		mov	r7, #65
 1023 0790 01E8A0E1 		.loc 1 1863 0
 1024 0794 2148A0E1 		mov	r8, #114
 1025              	.LVL115:
 1026 0798 21ACA0E1 		.loc 1 1864 0
 1027              		and	r1, r1, #255
 1028 079c 5250A0E3 		.loc 1 1861 0
 1029              		mvn	r2, #85
 1030 07a0 6160A0E3 		strb	r2, [r3, #0]
 1031 07a4 4170A0E3 		.loc 1 1864 0
 1032              		mov	lr, lr, lsr #24
 1033 07a8 7280A0E3 		.loc 1 1862 0
 1034              		strb	r5, [ip, #0]
 1035              	.LVL116:
 1036 07ac FF1001E2 		.loc 1 1864 0
 1037              		and	r4, r4, #255
 1038 07b0 5520E0E3 		.loc 1 1862 0
 1039 07b4 0020C3E5 		strb	r5, [r9, #49]
 1040              		strb	r6, [r9, #50]
 1041 07b8 2EECA0E1 		strb	r7, [r9, #51]
 1042              		.loc 1 1863 0
 1043 07bc 0050CCE5 		strb	r8, [ip, #484]
 1044              		strb	r8, [ip, #485]
 1045              		strb	r7, [ip, #486]
 1046 07c0 FF4004E2 		strb	r6, [ip, #487]
 1047              		.loc 1 1864 0
 1048 07c4 3150C9E5 		strb	r1, [ip, #488]
 1049 07c8 3260C9E5 		.loc 1 1865 0
 1050 07cc 3370C9E5 		mvn	r1, #0
 1051              		.loc 1 1864 0
 1052 07d0 E481CCE5 		strb	lr, [ip, #489]
 1053 07d4 E581CCE5 		strb	r4, [ip, #490]
 1054 07d8 E671CCE5 		strb	sl, [ip, #491]
 1055 07dc E761CCE5 		.loc 1 1865 0
 1056              		strb	r1, [ip, #492]
 1057 07e0 E811CCE5 		strb	r1, [ip, #493]
 1058              		strb	r1, [ip, #494]
 1059 07e4 0010E0E3 		strb	r1, [ip, #495]
 1060              		.loc 1 1866 0
 1061 07e8 E9E1CCE5 		ldr	r3, [fp, #-68]
 1062 07ec EA41CCE5 		mov	r1, ip
 1063 07f0 EBA1CCE5 		add	r2, r3, #1
 1064              		mov	r3, #1
 1065 07f4 EC11CCE5 		str	ip, [fp, #-92]
 1066 07f8 ED11CCE5 	.LVL117:
 1067 07fc EE11CCE5 		bl	disk_write
 1068 0800 EF11CCE5 		.loc 1 1867 0
 1069              		ldr	r3, [fp, #-68]
 1070 0804 44301BE5 		ldr	ip, [fp, #-92]
 1071 0808 0C10A0E1 		add	r2, r3, #7
 1072 080c 012083E2 		ldr	r0, [fp, #-72]
 1073 0810 0130A0E3 		mov	r1, ip
 1074 0814 5CC00BE5 	.LVL118:
 1075              		mov	r3, #1
 1076 0818 FEFFFFEB 		bl	disk_write
 1077              	.LVL119:
 1078 081c 44301BE5 	.L61:
 1079 0820 5CC01BE5 		.loc 1 1870 0
 1080 0824 072083E2 		mov	r0, #0
 1081 0828 48001BE5 		mov	r1, r0
 1082 082c 0C10A0E1 		mov	r2, r0
 1083              		bl	disk_ioctl
 1084 0830 0130A0E3 		cmp	r0, #0
 1085 0834 FEFFFFEB 		bne	.L47
 1086              		b	.L25
 1087              	.LVL120:
 1088              	.L71:
 1089 0838 0000A0E3 		.loc 1 1741 0
 1090 083c 0010A0E1 		mov	r3, r0, asl #1
 1091 0840 0020A0E1 		add	r3, r3, #512
 1092 0844 FEFFFFEB 		add	r3, r3, #3
 1093 0848 000050E3 		mov	r4, r3, lsr #9
 1094 084c 56FFFF1A 	.LVL121:
 1095 0850 F9FDFFEA 		.loc 1 1742 0
 1096              		add	r2, r5, #1
 1097              		mov	r3, #32
 1098              		mov	r1, #2
 1099 0854 8030A0E1 		str	r2, [fp, #-60]
 1100 0858 023C83E2 	.LVL122:
 1101 085c 033083E2 		str	r3, [fp, #-56]
 1102 0860 A344A0E1 	.LVL123:
 1103              		str	r1, [fp, #-76]
 1104              	.LVL124:
 1105 0864 012085E2 		b	.L39
 1106 0868 2030A0E3 	.L77:
 1107 086c 0210A0E3 		.align	2
 1108 0870 3C200BE5 	.L76:
 1109              		.word	FatFs
 1110 0874 38300BE5 		.word	85284443
 1111              		.word	.LC0
 1112 0878 4C100BE5 		.word	.LC1
 1113              	.LFE34:
 1115              		.section	.text.validate,"ax",%progbits
 1116              		.align	2
 1118 0880 00000000 	validate:
 1119 0884 5B561505 	.LFB16:
 1120 0888 00000000 		.loc 1 776 0
 1121 088c 14000000 		@ args = 0, pretend = 0, frame = 0
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123              	.LVL125:
 1124              		mov	ip, sp
 1125              	.LCFI10:
 1126              		mov	r1, r1, asl #16
 1127              	.LVL126:
 1128              		.loc 1 777 0
 1129              		cmp	r0, #0
 1130              		.loc 1 776 0
 1131              		stmfd	sp!, {fp, ip, lr, pc}
 1132              	.LCFI11:
 1133 0000 0DC0A0E1 		mov	r1, r1, lsr #16
 1134              	.LVL127:
 1135 0004 0118A0E1 		sub	fp, ip, #4
 1136              	.LCFI12:
 1137              		.loc 1 777 0
 1138 0008 000050E3 		beq	.L79
 1139              		ldrb	r3, [r0, #42]	@ zero_extendqisi2
 1140 000c 00D82DE9 		cmp	r3, #0
 1141              		beq	.L79
 1142 0010 2118A0E1 		ldrh	r3, [r0, #0]
 1143              		cmp	r3, r1
 1144 0014 04B04CE2 		beq	.L82
 1145              	.L79:
 1146              		.loc 1 779 0
 1147 0018 0500000A 		mov	r0, #12
 1148 001c 2A30D0E5 	.LVL128:
 1149 0020 000053E3 		.loc 1 783 0
 1150 0024 0200000A 		ldmfd	sp, {fp, sp, pc}
 1151 0028 B030D0E1 	.LVL129:
 1152 002c 010053E1 	.L82:
 1153 0030 0100000A 		.loc 1 779 0
 1154              		ldrb	r0, [r0, #45]	@ zero_extendqisi2
 1155              	.LVL130:
 1156 0034 0C00A0E3 		bl	disk_status
 1157              	.LVL131:
 1158              		and	r0, r0, #1
 1159 0038 00A89DE8 		ldmfd	sp, {fp, sp, pc}
 1160              	.LFE16:
 1162              		.section	.text.move_window,"ax",%progbits
 1163 003c 2D00D0E5 		.align	2
 1165 0040 FEFFFFEB 	move_window:
 1166              	.LFB2:
 1167 0044 010000E2 		.loc 1 85 0
 1168 0048 00A89DE8 		@ args = 0, pretend = 0, frame = 0
 1169              		@ frame_needed = 1, uses_anonymous_args = 0
 1170              	.LVL132:
 1171              		mov	ip, sp
 1172              	.LCFI13:
 1173              		stmfd	sp!, {r4, r5, r6, r7, r8, fp, ip, lr, pc}
 1174              	.LCFI14:
 1175              		.loc 1 89 0
 1176              		ldr	r6, [r0, #4]
 1177              	.LVL133:
 1178              		.loc 1 90 0
 1179              		cmp	r6, r1
 1180 0000 0DC0A0E1 		.loc 1 85 0
 1181              		sub	fp, ip, #4
 1182 0004 F0D92DE9 	.LCFI15:
 1183              		.loc 1 85 0
 1184              		mov	r4, r0
 1185 0008 046090E5 		mov	r7, r1
 1186              		.loc 1 90 0
 1187              		beq	.L84
 1188 000c 010056E1 	.LVL134:
 1189              	.LBB27:
 1190 0010 04B04CE2 		.loc 1 93 0
 1191              		ldrb	r3, [r0, #46]	@ zero_extendqisi2
 1192              		cmp	r3, #0
 1193 0014 0040A0E1 		bne	.L91
 1194 0018 0170A0E1 	.LVL135:
 1195              	.L85:
 1196 001c 0400000A 		.loc 1 105 0
 1197              		cmp	r7, #0
 1198              		bne	.L92
 1199              	.L84:
 1200 0020 2E30D0E5 		.loc 1 108 0
 1201 0024 000053E3 		mov	r0, #1
 1202 0028 0300001A 	.LBE27:
 1203              		.loc 1 112 0
 1204              		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1205              	.LVL136:
 1206 002c 000057E3 	.L91:
 1207 0030 1F00001A 	.LBB28:
 1208              		.loc 1 94 0
 1209              		add	r8, r0, #48
 1210 0034 0100A0E3 		mov	r1, r8
 1211              		ldrb	r0, [r0, #45]	@ zero_extendqisi2
 1212              	.LVL137:
 1213 0038 F0A99DE8 		mov	r2, r6
 1214              		mov	r3, #1
 1215              		bl	disk_write
 1216              		cmp	r0, #0
 1217              		bne	.L86
 1218 003c 308080E2 		.loc 1 97 0
 1219 0040 0810A0E1 		ldr	r2, [r4, #8]
 1220 0044 2D00D0E5 		ldr	r3, [r4, #16]
 1221              		add	r3, r2, r3
 1222 0048 0620A0E1 		cmp	r6, r3
 1223 004c 0130A0E3 		.loc 1 96 0
 1224 0050 FEFFFFEB 		strb	r0, [r4, #46]
 1225 0054 000050E3 		.loc 1 97 0
 1226 0058 1E00001A 		bcs	.L85
 1227              		.loc 1 98 0
 1228 005c 082094E5 		ldrb	r5, [r4, #44]	@ zero_extendqisi2
 1229 0060 103094E5 	.LVL138:
 1230 0064 033082E0 		cmp	r5, #1
 1231 0068 030056E1 		bhi	.L90
 1232              		b	.L85
 1233 006c 2E00C4E5 	.L93:
 1234              		ldr	r2, [r4, #8]
 1235 0070 EDFFFF2A 	.L90:
 1236              		.loc 1 99 0
 1237 0074 2C50D4E5 		add	r6, r6, r2
 1238              		.loc 1 100 0
 1239 0078 010055E3 		mov	r3, #1
 1240 007c 0100008A 		ldrb	r0, [r4, #45]	@ zero_extendqisi2
 1241 0080 E9FFFFEA 		mov	r1, r8
 1242              		mov	r2, r6
 1243 0084 082094E5 		bl	disk_write
 1244              		.loc 1 98 0
 1245              		sub	r3, r5, #1
 1246 0088 026086E0 		and	r5, r3, #255
 1247              	.LVL139:
 1248 008c 0130A0E3 		cmp	r5, #1
 1249 0090 2D00D4E5 		bhi	.L93
 1250 0094 0810A0E1 		b	.L85
 1251 0098 0620A0E1 	.LVL140:
 1252 009c FEFFFFEB 	.L92:
 1253              		.loc 1 106 0
 1254 00a0 013045E2 		ldrb	r0, [r4, #45]	@ zero_extendqisi2
 1255 00a4 FF5003E2 		add	r1, r4, #48
 1256              		mov	r2, r7
 1257 00a8 010055E3 		mov	r3, #1
 1258 00ac F4FFFF8A 		bl	disk_read
 1259 00b0 DDFFFFEA 		cmp	r0, #0
 1260              		.loc 1 108 0
 1261              		streq	r7, [r4, #4]
 1262              		addeq	r0, r0, #1
 1263 00b4 2D00D4E5 		.loc 1 106 0
 1264 00b8 301084E2 		ldmeqfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1265 00bc 0720A0E1 	.L86:
 1266 00c0 0130A0E3 		.loc 1 108 0
 1267 00c4 FEFFFFEB 		mov	r0, #0
 1268 00c8 000050E3 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1269              	.LBE28:
 1270 00cc 04708405 	.LFE2:
 1272              		.section	.text.get_cluster,"ax",%progbits
 1273 00d4 F0A99D08 		.align	2
 1275              	get_cluster:
 1276 00d8 0000A0E3 	.LFB4:
 1277 00dc F0A99DE8 		.loc 1 162 0
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280              	.LVL141:
 1281              		mov	ip, sp
 1282              	.LCFI16:
 1283              		.loc 1 167 0
 1284              		cmp	r1, #1
 1285              		.loc 1 162 0
 1286              		stmfd	sp!, {r4, r5, r6, r7, fp, ip, lr, pc}
 1287              	.LCFI17:
 1288              		sub	fp, ip, #4
 1289              	.LCFI18:
 1290 0000 0DC0A0E1 		.loc 1 162 0
 1291              		mov	r4, r1
 1292              		mov	r5, r0
 1293 0004 010051E3 		.loc 1 167 0
 1294              		bls	.L95
 1295 0008 F0D82DE9 	.LVL142:
 1296              		ldr	r3, [r0, #12]
 1297 000c 04B04CE2 		cmp	r1, r3
 1298              		bcs	.L95
 1299              	.LVL143:
 1300 0010 0140A0E1 		.loc 1 169 0
 1301 0014 0050A0E1 		ldrb	r3, [r0, #42]	@ zero_extendqisi2
 1302              		cmp	r3, #2
 1303 0018 1400009A 		.loc 1 168 0
 1304              		ldr	r6, [r0, #16]
 1305 001c 0C3090E5 	.LVL144:
 1306 0020 030051E1 		.loc 1 169 0
 1307 0024 1100002A 		beq	.L97
 1308              		cmp	r3, #3
 1309              		beq	.L98
 1310 0028 2A30D0E5 		cmp	r3, #1
 1311 002c 020053E3 		bne	.L95
 1312              		.loc 1 171 0
 1313 0030 106090E5 		mov	r2, r1, asl #16
 1314              		mov	r3, r2, lsr #16
 1315              		add	r3, r3, r2, lsr #15
 1316 0034 2300000A 		mov	r3, r3, asr #1
 1317 0038 030053E3 		mov	r3, r3, asl #16
 1318 003c 0D00000A 		.loc 1 172 0
 1319 0040 010053E3 		add	r1, r6, r3, lsr #25
 1320 0044 0900001A 	.LVL145:
 1321              		.loc 1 171 0
 1322 0048 0128A0E1 		mov	r7, r3, lsr #16
 1323 004c 2238A0E1 	.LVL146:
 1324 0050 A23783E0 		.loc 1 172 0
 1325 0054 C330A0E1 		bl	move_window
 1326 0058 0338A0E1 	.LVL147:
 1327              		cmp	r0, #0
 1328 005c A31C86E0 		bne	.L103
 1329              	.LVL148:
 1330              	.L95:
 1331 0060 2378A0E1 		.loc 1 184 0
 1332              		mov	r0, #1
 1333              		.loc 1 189 0
 1334 0064 FEFFFFEB 		ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 1335              	.LVL149:
 1336 0068 000050E3 	.L98:
 1337 006c 2300001A 		.loc 1 183 0
 1338              		add	r1, r6, r1, lsr #7
 1339              	.LVL150:
 1340              		bl	move_window
 1341 0070 0100A0E3 	.LVL151:
 1342              		cmp	r0, #0
 1343 0074 F0A89DE8 		beq	.L95
 1344              		.loc 1 184 0
 1345              		mov	r1, r4, asl #2
 1346              		and	r1, r1, #508
 1347 0078 A11386E0 		add	r0, r5, #48
 1348              		add	r2, r1, #3
 1349 007c FEFFFFEB 		add	ip, r1, #2
 1350              		ldrb	r5, [r0, r2]	@ zero_extendqisi2
 1351 0080 000050E3 	.LVL152:
 1352 0084 F9FFFF0A 		ldrb	r3, [r0, ip]	@ zero_extendqisi2
 1353              		add	r2, r1, #1
 1354 0088 0411A0E1 		ldrb	r4, [r0, r2]	@ zero_extendqisi2
 1355 008c 7F1F01E2 	.LVL153:
 1356 0090 300085E2 		mov	r3, r3, asl #16
 1357 0094 032081E2 		ldrb	ip, [r0, r1]	@ zero_extendqisi2
 1358 0098 02C081E2 		orr	r3, r3, r5, asl #24
 1359 009c 0250D0E7 		orr	r3, r3, ip
 1360              		orr	r3, r3, r4, asl #8
 1361 00a0 0C30D0E7 		bic	r0, r3, #-268435456
 1362 00a4 012081E2 		ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 1363 00a8 0240D0E7 	.LVL154:
 1364              	.L97:
 1365 00ac 0338A0E1 		.loc 1 179 0
 1366 00b0 01C0D0E7 		add	r1, r6, r1, lsr #8
 1367 00b4 053C83E1 	.LVL155:
 1368 00b8 0C3083E1 		bl	move_window
 1369 00bc 043483E1 	.LVL156:
 1370 00c0 0F02C3E3 		cmp	r0, #0
 1371 00c4 F0A89DE8 		beq	.L95
 1372              		.loc 1 180 0
 1373              		mov	r3, r4, asl #1
 1374              		bic	r3, r3, #1
 1375 00c8 211486E0 		mov	r3, r3, asl #23
 1376              		mov	r3, r3, lsr #23
 1377 00cc FEFFFFEB 		add	r0, r5, #48
 1378              		add	r2, r3, #1
 1379 00d0 000050E3 		ldrb	ip, [r0, r2]	@ zero_extendqisi2
 1380 00d4 E5FFFF0A 		ldrb	r1, [r0, r3]	@ zero_extendqisi2
 1381              		orr	r0, r1, ip, asl #8
 1382 00d8 8430A0E1 		ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 1383 00dc 0130C3E3 	.LVL157:
 1384 00e0 833BA0E1 	.L103:
 1385 00e4 A33BA0E1 		.loc 1 173 0
 1386 00e8 300085E2 		add	r2, r7, #1
 1387 00ec 012083E2 		mov	r3, r7, asl #23
 1388 00f0 02C0D0E7 		mov	r2, r2, asl #16
 1389 00f4 0310D0E7 		mov	r3, r3, lsr #23
 1390 00f8 0C0481E1 		.loc 1 174 0
 1391 00fc F0A89DE8 		add	r1, r6, r2, lsr #25
 1392              		.loc 1 173 0
 1393              		add	r3, r5, r3
 1394              		.loc 1 174 0
 1395 0100 012087E2 		mov	r0, r5
 1396 0104 873BA0E1 		.loc 1 173 0
 1397 0108 0228A0E1 		ldrb	r7, [r3, #48]	@ zero_extendqisi2
 1398 010c A33BA0E1 	.LVL158:
 1399              		mov	r6, r2, lsr #16
 1400 0110 A21C86E0 	.LVL159:
 1401              		.loc 1 174 0
 1402 0114 033085E0 		bl	move_window
 1403              		cmp	r0, #0
 1404 0118 0500A0E1 		beq	.L95
 1405              		.loc 1 175 0
 1406 011c 3070D3E5 		mov	r3, r6, asl #23
 1407              		mov	r3, r3, lsr #23
 1408 0120 2268A0E1 		add	r3, r5, r3
 1409              		ldrb	r2, [r3, #48]	@ zero_extendqisi2
 1410              		orr	r2, r7, r2, asl #8
 1411 0124 FEFFFFEB 		mov	r0, r2, asl #16
 1412 0128 000050E3 		mov	r2, r0, lsr #16
 1413 012c CFFFFF0A 	.LVL160:
 1414              		.loc 1 176 0
 1415 0130 863BA0E1 		tst	r4, #1
 1416 0134 A33BA0E1 		moveq	r0, r2, asl #20
 1417 0138 033085E0 		mov	r0, r0, lsr #20
 1418 013c 3020D3E5 		ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 1419 0140 022487E1 	.LFE4:
 1421 0148 2028A0E1 		.section	.text.next_dir_entry,"ax",%progbits
 1422              		.align	2
 1424 014c 010014E3 	next_dir_entry:
 1425 0150 020AA001 	.LFB9:
 1426 0154 200AA0E1 		.loc 1 361 0
 1427 0158 F0A89DE8 		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 1, uses_anonymous_args = 0
 1429              	.LVL161:
 1430              		.loc 1 366 0
 1431              		ldrh	r3, [r0, #2]
 1432              		add	r3, r3, #1
 1433              		.loc 1 361 0
 1434              		mov	ip, sp
 1435              	.LCFI19:
 1436              		.loc 1 366 0
 1437              		mov	r2, r3, asl #16
 1438              		.loc 1 361 0
 1439              		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 1440 0000 B230D0E1 	.LCFI20:
 1441 0004 013083E2 		.loc 1 366 0
 1442              		mov	r5, r2, lsr #16
 1443 0008 0DC0A0E1 	.LVL162:
 1444              		.loc 1 367 0
 1445              		tst	r5, #15
 1446 000c 0328A0E1 		.loc 1 361 0
 1447              		sub	fp, ip, #4
 1448 0010 70D82DE9 	.LCFI21:
 1449              		.loc 1 361 0
 1450              		mov	r4, r0
 1451 0014 2258A0E1 		.loc 1 367 0
 1452              		bne	.L105
 1453              	.LVL163:
 1454 0018 0F0015E3 		.loc 1 368 0
 1455              		add	r1, r0, #12
 1456 001c 04B04CE2 		ldmia	r1, {r1, r3}	@ phole ldm
 1457              		add	r3, r3, #1
 1458              		.loc 1 369 0
 1459 0020 0040A0E1 		cmp	r1, #0
 1460              		.loc 1 368 0
 1461 0024 0900001A 		str	r3, [r0, #16]
 1462              		.loc 1 369 0
 1463              		bne	.L106
 1464 0028 0C1080E2 	.LVL164:
 1465 002c 0A0091E8 		.loc 1 370 0
 1466 0030 013083E2 		ldr	r3, [r0, #4]
 1467              		ldrh	r2, [r3, #2]
 1468 0034 000051E3 		cmp	r2, r5
 1469              		bls	.L107
 1470 0038 103080E5 	.LVL165:
 1471              	.L105:
 1472 003c 0600001A 		.loc 1 381 0
 1473              		strh	r5, [r4, #2]	@ movhi
 1474              		mov	r0, #1
 1475 0040 043090E5 	.LVL166:
 1476 0044 B220D3E1 		ldmfd	sp, {r4, r5, r6, fp, sp, pc}
 1477 0048 050052E1 	.LVL167:
 1478 004c 1900009A 	.L106:
 1479              		.loc 1 372 0
 1480              		ldr	r0, [r0, #4]
 1481              	.LVL168:
 1482 0050 B250C4E1 		ldrb	r3, [r0, #43]	@ zero_extendqisi2
 1483 0054 0100A0E3 		sub	r3, r3, #1
 1484              		ands	r6, r3, r2, lsr #20
 1485 0058 70A89DE8 		bne	.L105
 1486              		.loc 1 373 0
 1487              		bl	get_cluster
 1488              		.loc 1 374 0
 1489 005c 040090E5 		cmp	r0, #1
 1490              	.LVL169:
 1491 0060 2B30D0E5 		bls	.L107
 1492 0064 013043E2 		ldr	r1, [r4, #4]
 1493 0068 226A13E0 		ldr	r3, [r1, #12]
 1494 006c F7FFFF1A 		cmp	r0, r3
 1495              		bcs	.L107
 1496 0070 FEFFFFEB 		.loc 1 376 0
 1497              		str	r0, [r4, #12]
 1498 0074 010050E3 	.LBB29:
 1499              	.LBB30:
 1500 0078 0E00009A 		.loc 1 346 0
 1501 007c 041094E5 		ldr	r3, [r1, #12]
 1502 0080 0C3091E5 		.loc 1 345 0
 1503 0084 030050E1 		sub	r0, r0, #2
 1504 0088 0A00002A 	.LVL170:
 1505              		.loc 1 346 0
 1506 008c 0C0084E5 		sub	r3, r3, #2
 1507              		cmp	r0, r3
 1508              		.loc 1 347 0
 1509              		ldrcc	r2, [r1, #24]
 1510 0090 0C3091E5 		ldrccb	r3, [r1, #43]	@ zero_extendqisi2
 1511              		mlacc	r1, r3, r0, r2
 1512 0094 020040E2 		.loc 1 346 0
 1513              		movcs	r1, r6
 1514              	.LBE30:
 1515 0098 023043E2 	.LBE29:
 1516 009c 030050E1 		.loc 1 377 0
 1517              		str	r1, [r4, #16]
 1518 00a0 18209135 		b	.L105
 1519 00a4 2B30D135 	.LVL171:
 1520 00a8 93202130 	.L107:
 1521              		.loc 1 382 0
 1522 00ac 0610A021 		mov	r0, #0
 1523              	.LVL172:
 1524              		.loc 1 383 0
 1525              		ldmfd	sp, {r4, r5, r6, fp, sp, pc}
 1526 00b0 101084E5 	.LFE9:
 1528              		.section	.text.put_cluster,"ax",%progbits
 1529              		.align	2
 1531 00b8 0000A0E3 	put_cluster:
 1532              	.LFB5:
 1533              		.loc 1 205 0
 1534 00bc 70A89DE8 		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 1, uses_anonymous_args = 0
 1536              	.LVL173:
 1537              		mov	ip, sp
 1538              	.LCFI22:
 1539              		stmfd	sp!, {r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 1540              	.LCFI23:
 1541              		.loc 1 212 0
 1542              		ldrb	r3, [r0, #42]	@ zero_extendqisi2
 1543              		cmp	r3, #2
 1544              		.loc 1 205 0
 1545              		sub	fp, ip, #4
 1546 0000 0DC0A0E1 	.LCFI24:
 1547              		.loc 1 205 0
 1548 0004 F0DD2DE9 		mov	r8, r0
 1549              		mov	r4, r1
 1550              		mov	sl, r2
 1551 0008 2A30D0E5 		.loc 1 211 0
 1552 000c 020053E3 		ldr	r5, [r0, #16]
 1553              	.LVL174:
 1554 0010 04B04CE2 		.loc 1 212 0
 1555              		beq	.L115
 1556              	.LVL175:
 1557 0014 0080A0E1 		cmp	r3, #3
 1558 0018 0140A0E1 		beq	.L116
 1559 001c 02A0A0E1 		cmp	r3, #1
 1560              		beq	.L124
 1561 0020 105090E5 	.LVL176:
 1562              	.L113:
 1563              		.loc 1 239 0
 1564 0024 4A00000A 		mov	r0, #0
 1565              		.loc 1 240 0
 1566 0028 030053E3 		ldmfd	sp, {r4, r5, r6, r7, r8, sl, fp, sp, pc}
 1567 002c 3000000A 	.LVL177:
 1568 0030 010053E3 	.L124:
 1569 0034 0100000A 		.loc 1 214 0
 1570              		mov	r2, r1, asl #16
 1571              		mov	r3, r2, lsr #16
 1572              		add	r3, r3, r2, lsr #15
 1573 0038 0000A0E3 		mov	r3, r3, asr #1
 1574              		mov	r3, r3, asl #16
 1575 003c F0AD9DE8 		.loc 1 215 0
 1576              		add	r1, r5, r3, lsr #25
 1577              		.loc 1 214 0
 1578              		mov	r6, r3, lsr #16
 1579 0040 0128A0E1 	.LVL178:
 1580 0044 2238A0E1 		.loc 1 215 0
 1581 0048 A23783E0 		bl	move_window
 1582 004c C330A0E1 	.LVL179:
 1583 0050 0338A0E1 		cmp	r0, #0
 1584              		beq	.L113
 1585 0054 A31C85E0 		.loc 1 216 0
 1586              		mov	r3, r6, asl #23
 1587 0058 2368A0E1 		.loc 1 217 0
 1588              		ands	r7, r4, #1
 1589              		.loc 1 216 0
 1590 005c FEFFFFEB 		mov	r3, r3, lsr #23
 1591              		.loc 1 217 0
 1592 0060 000050E3 		addne	r1, r8, r3
 1593 0064 F3FFFF0A 		ldrneb	r3, [r1, #48]	@ zero_extendqisi2
 1594              		andne	r2, sl, #255
 1595 0068 863BA0E1 		andne	r3, r3, #15
 1596              		orrne	r3, r3, r2, asl #4
 1597 006c 017014E2 		addeq	r1, r8, r3
 1598              		andne	r3, r3, #255
 1599 0070 A33BA0E1 		andeq	r3, sl, #255
 1600              		.loc 1 218 0
 1601 0074 03108810 		add	r2, r6, #1
 1602 0078 3030D115 		mov	r2, r2, asl #16
 1603 007c FF200A12 		.loc 1 217 0
 1604 0080 0F300312 		strb	r3, [r1, #48]
 1605 0084 02328311 		.loc 1 219 0
 1606 0088 03108800 		mov	r3, #1
 1607 008c FF300312 		strb	r3, [r8, #46]
 1608 0090 FF300A02 		.loc 1 220 0
 1609              		add	r1, r5, r2, lsr #25
 1610 0094 012086E2 		mov	r0, r8
 1611 0098 0228A0E1 		.loc 1 218 0
 1612              		mov	r4, r2, lsr #16
 1613 009c 3030C1E5 	.LVL180:
 1614              		.loc 1 220 0
 1615 00a0 0130A0E3 		bl	move_window
 1616 00a4 2E30C8E5 		cmp	r0, #0
 1617              		beq	.L113
 1618 00a8 A21C85E0 		.loc 1 221 0
 1619 00ac 0800A0E1 		mov	r2, r4, asl #23
 1620              		.loc 1 222 0
 1621 00b0 2248A0E1 		cmp	r7, #0
 1622              		.loc 1 221 0
 1623              		mov	r2, r2, lsr #23
 1624 00b4 FEFFFFEB 		.loc 1 222 0
 1625 00b8 000050E3 		addeq	lr, r8, r2
 1626 00bc DDFFFF0A 		ldreqb	r3, [lr, #48]	@ zero_extendqisi2
 1627              		movne	r3, sl, lsr #4
 1628 00c0 842BA0E1 		moveq	r2, sl, asl #20
 1629              		biceq	r3, r3, #15
 1630 00c4 000057E3 		andne	r0, r3, #255
 1631              		addne	lr, r8, r2
 1632 00c8 A22BA0E1 		orreq	r0, r3, r2, lsr #28
 1633              		strb	r0, [lr, #48]
 1634 00cc 02E08800 		b	.L121
 1635 00d0 3030DE05 	.LVL181:
 1636 00d4 2A32A011 	.L116:
 1637 00d8 0A2AA001 		.loc 1 231 0
 1638 00dc 0F30C303 		add	r1, r5, r1, lsr #7
 1639 00e0 FF000312 		bl	move_window
 1640 00e4 02E08810 	.LVL182:
 1641 00e8 220E8301 		cmp	r0, #0
 1642 00ec 3000CEE5 		beq	.L113
 1643 00f0 260000EA 		.loc 1 232 0
 1644              		mov	r2, r4, asl #2
 1645              		and	r2, r2, #508
 1646              		mov	r1, sl, asl #16
 1647 00f4 A11385E0 		mov	r0, sl, lsr #16
 1648 00f8 FEFFFFEB 		add	r3, r8, #48
 1649              		and	r0, r0, #255
 1650 00fc 000050E3 		mov	r1, r1, lsr #24
 1651 0100 CCFFFF0A 		add	r7, r2, #3
 1652              		mov	r6, sl, lsr #24
 1653 0104 0421A0E1 		and	ip, sl, #255
 1654 0108 7F2F02E2 		add	r4, r2, #1
 1655 010c 0A18A0E1 	.LVL183:
 1656 0110 2A08A0E1 		add	r5, r2, #2
 1657 0114 303088E2 	.LVL184:
 1658 0118 FF0000E2 		strb	ip, [r3, r2]
 1659 011c 211CA0E1 		strb	r1, [r3, r4]
 1660 0120 037082E2 		strb	r0, [r3, r5]
 1661 0124 2A6CA0E1 		strb	r6, [r3, r7]
 1662 0128 FFC00AE2 		.loc 1 238 0
 1663 012c 014082E2 		mov	r3, #1
 1664              		strb	r3, [r8, #46]
 1665 0130 025082E2 		mov	r0, r3
 1666              		ldmfd	sp, {r4, r5, r6, r7, r8, sl, fp, sp, pc}
 1667 0134 02C0C3E7 	.LVL185:
 1668 0138 0410C3E7 	.L115:
 1669 013c 0500C3E7 		.loc 1 226 0
 1670 0140 0760C3E7 		add	r1, r5, r1, lsr #8
 1671              		bl	move_window
 1672 0144 0130A0E3 	.LVL186:
 1673 0148 2E30C8E5 		cmp	r0, #0
 1674 014c 0300A0E1 		beq	.L113
 1675 0150 F0AD9DE8 		.loc 1 227 0
 1676              		mov	r3, r4, asl #1
 1677              		bic	r3, r3, #1
 1678              		mov	r3, r3, asl #23
 1679 0154 211485E0 		mov	r3, r3, lsr #23
 1680 0158 FEFFFFEB 		mov	r1, sl, asl #16
 1681              		add	r0, r8, #48
 1682 015c 000050E3 		add	ip, r3, #1
 1683 0160 B4FFFF0A 		mov	r1, r1, lsr #24
 1684              		and	r2, sl, #255
 1685 0164 8430A0E1 		strb	r2, [r0, r3]
 1686 0168 0130C3E3 		strb	r1, [r0, ip]
 1687 016c 833BA0E1 	.LVL187:
 1688 0170 A33BA0E1 	.L121:
 1689 0174 0A18A0E1 		.loc 1 238 0
 1690 0178 300088E2 		mov	r3, #1
 1691 017c 01C083E2 		strb	r3, [r8, #46]
 1692 0180 211CA0E1 		mov	r0, r3
 1693 0184 FF200AE2 		ldmfd	sp, {r4, r5, r6, r7, r8, sl, fp, sp, pc}
 1694 0188 0320C0E7 	.LFE5:
 1696              		.section	.text.create_chain,"ax",%progbits
 1697              		.align	2
 1699 0190 0130A0E3 	create_chain:
 1700 0194 2E30C8E5 	.LFB7:
 1701 0198 0300A0E1 		.loc 1 289 0
 1702 019c F0AD9DE8 		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704              	.LVL188:
 1705              		mov	ip, sp
 1706              	.LCFI25:
 1707              		stmfd	sp!, {r4, r5, r6, r7, r8, fp, ip, lr, pc}
 1708              	.LCFI26:
 1709              		.loc 1 293 0
 1710              		subs	r8, r1, #0
 1711              		.loc 1 289 0
 1712              		sub	fp, ip, #4
 1713              	.LCFI27:
 1714 0000 0DC0A0E1 		.loc 1 289 0
 1715              		mov	r7, r0
 1716 0004 F0D92DE9 		.loc 1 290 0
 1717              		ldr	r6, [r0, #12]
 1718              	.LVL189:
 1719 0008 008051E2 		.loc 1 293 0
 1720              		bne	.L126
 1721 000c 04B04CE2 	.LVL190:
 1722              		.loc 1 294 0
 1723              		ldr	r5, [r0, #28]
 1724 0010 0070A0E1 	.LVL191:
 1725              		.loc 1 295 0
 1726 0014 0C6090E5 		cmp	r5, #0
 1727              		cmpne	r5, r6
 1728              		movcs	r5, #1
 1729 0018 1500001A 	.LVL192:
 1730              	.L127:
 1731              		.loc 1 300 0
 1732 001c 1C5090E5 		mov	r4, r5
 1733              	.LVL193:
 1734              	.L133:
 1735 0020 000055E3 		.loc 1 306 0
 1736 0024 06005511 		add	r4, r4, #1
 1737 0028 0150A023 		.loc 1 307 0
 1738              		cmp	r6, r4
 1739              		.loc 1 311 0
 1740              		mov	r0, r7
 1741 002c 0540A0E1 	.LVL194:
 1742              		.loc 1 307 0
 1743              		bhi	.L130
 1744              		.loc 1 309 0
 1745 0030 014084E2 		cmp	r5, #1
 1746              		bls	.L131
 1747 0034 040056E1 		mov	r4, #2
 1748              	.L130:
 1749 0038 0700A0E1 		.loc 1 311 0
 1750              		mov	r1, r4
 1751              		bl	get_cluster
 1752 003c 0200008A 		.loc 1 312 0
 1753              		cmp	r0, #0
 1754 0040 010055E3 	.LVL195:
 1755 0044 0800009A 		beq	.L132
 1756 0048 0240A0E3 		.loc 1 313 0
 1757              		cmp	r0, #1
 1758              		ldmeqfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1759 004c 0410A0E1 		.loc 1 314 0
 1760 0050 FEFFFFEB 		cmp	r4, r5
 1761              		bne	.L133
 1762 0054 000050E3 	.LVL196:
 1763              	.L131:
 1764 0058 0C00000A 		.loc 1 324 0
 1765              		mov	r0, #0
 1766 005c 010050E3 	.LVL197:
 1767 0060 F0A99D08 		.loc 1 329 0
 1768              		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1769 0064 050054E1 	.LVL198:
 1770 0068 F0FFFF1A 	.L126:
 1771              		.loc 1 298 0
 1772              		bl	get_cluster
 1773              	.LVL199:
 1774 006c 0000A0E3 		.loc 1 299 0
 1775              		cmp	r0, #1
 1776              	.LVL200:
 1777 0070 F0A99DE8 		bls	.L128
 1778              		.loc 1 300 0
 1779              		cmp	r6, r0
 1780              		ldmhifd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1781 0074 FEFFFFEB 		mov	r5, r8
 1782              	.LVL201:
 1783              		b	.L127
 1784 0078 010050E3 	.LVL202:
 1785              	.L132:
 1786 007c 1100009A 		.loc 1 317 0
 1787              		mov	r0, r7
 1788 0080 000056E1 	.LVL203:
 1789 0084 F0A99D88 		mov	r1, r4
 1790 0088 0850A0E1 		mvn	r2, #-268435456
 1791              		bl	put_cluster
 1792 008c E6FFFFEA 		cmp	r0, #0
 1793              		beq	.L128
 1794              		.loc 1 318 0
 1795              		cmp	r8, #0
 1796 0090 0700A0E1 		beq	.L134
 1797              		mov	r1, r8
 1798 0094 0410A0E1 		mov	r0, r7
 1799 0098 0F22E0E3 		mov	r2, r4
 1800 009c FEFFFFEB 		bl	put_cluster
 1801 00a0 000050E3 		cmp	r0, #0
 1802 00a4 0700000A 		bne	.L134
 1803              	.LVL204:
 1804 00a8 000058E3 	.L128:
 1805 00ac 0700000A 		.loc 1 324 0
 1806 00b0 0810A0E1 		mov	r0, #1
 1807 00b4 0700A0E1 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1808 00b8 0420A0E1 	.LVL205:
 1809 00bc FEFFFFEB 	.L134:
 1810 00c0 000050E3 		.loc 1 321 0
 1811 00c4 0100001A 		ldr	r2, [r7, #32]
 1812              		cmn	r2, #1
 1813              		.loc 1 322 0
 1814              		subne	r2, r2, #1
 1815 00c8 0100A0E3 		.loc 1 324 0
 1816 00cc F0A99DE8 		movne	r3, #1
 1817              		.loc 1 320 0
 1818              		str	r4, [r7, #28]
 1819              		.loc 1 324 0
 1820 00d0 202097E5 		strneb	r3, [r7, #40]
 1821 00d4 010072E3 		.loc 1 322 0
 1822              		strne	r2, [r7, #32]
 1823 00d8 01204212 		.loc 1 324 0
 1824              		mov	r0, r4
 1825 00dc 0130A013 	.LVL206:
 1826              		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 1827 00e0 1C4087E5 	.LFE7:
 1829 00e4 2830C715 		.section	.text.remove_chain,"ax",%progbits
 1830              		.align	2
 1832              	remove_chain:
 1833 00ec 0400A0E1 	.LFB6:
 1834              		.loc 1 256 0
 1835 00f0 F0A99DE8 		@ args = 0, pretend = 0, frame = 0
 1836              		@ frame_needed = 1, uses_anonymous_args = 0
 1837              	.LVL207:
 1838              		mov	ip, sp
 1839              	.LCFI28:
 1840              		.loc 1 260 0
 1841              		cmp	r1, #1
 1842              		.loc 1 256 0
 1843              		stmfd	sp!, {r4, r5, r6, r7, fp, ip, lr, pc}
 1844              	.LCFI29:
 1845              		sub	fp, ip, #4
 1846              	.LCFI30:
 1847 0000 0DC0A0E1 		.loc 1 256 0
 1848              		mov	r6, r1
 1849              		mov	r4, r0
 1850 0004 010051E3 		.loc 1 260 0
 1851              		bls	.L139
 1852 0008 F0D82DE9 	.LVL208:
 1853              		ldr	r3, [r0, #12]
 1854 000c 04B04CE2 		cmp	r1, r3
 1855              		bcs	.L139
 1856              	.LVL209:
 1857 0010 0160A0E1 		.loc 1 267 0
 1858 0014 0040A0E1 		mov	r7, #1
 1859              		b	.L145
 1860 0018 1D00009A 	.LVL210:
 1861              	.L147:
 1862 001c 0C3090E5 		.loc 1 263 0
 1863 0020 030051E1 		bl	put_cluster
 1864 0024 1A00002A 		cmp	r0, #0
 1865              		beq	.L140
 1866              		.loc 1 264 0
 1867 0028 0170A0E3 		ldr	r3, [r4, #32]
 1868 002c 0C0000EA 		cmn	r3, #1
 1869              		.loc 1 265 0
 1870              		add	r3, r3, #1
 1871              		strne	r3, [r4, #32]
 1872 0030 FEFFFFEB 		.loc 1 267 0
 1873 0034 000050E3 		strneb	r7, [r4, #40]
 1874 0038 1300000A 		.loc 1 260 0
 1875              		cmp	r5, #1
 1876 003c 203094E5 		bls	.L139
 1877 0040 010073E3 		ldr	r3, [r4, #12]
 1878              		cmp	r3, r5
 1879 0044 013083E2 		bls	.L139
 1880 0048 20308415 	.LVL211:
 1881              	.L145:
 1882 004c 2870C415 		.loc 1 261 0
 1883              		mov	r1, r6
 1884 0050 010055E3 		mov	r0, r4
 1885 0054 0E00009A 		bl	get_cluster
 1886 0058 0C3094E5 		mov	r5, r0
 1887 005c 050053E1 		.loc 1 262 0
 1888 0060 0B00009A 		cmp	r5, #1
 1889              		.loc 1 263 0
 1890              		mov	r1, r6
 1891              		mov	r2, #0
 1892 0064 0610A0E1 		.loc 1 260 0
 1893 0068 0400A0E1 		mov	r6, r0
 1894 006c FEFFFFEB 		.loc 1 263 0
 1895 0070 0050A0E1 		mov	r0, r4
 1896              		.loc 1 262 0
 1897 0074 010055E3 		bne	.L147
 1898              	.L140:
 1899 0078 0610A0E1 		.loc 1 260 0
 1900 007c 0020A0E3 		mov	r0, #0
 1901              		ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 1902 0080 0060A0E1 	.LVL212:
 1903              	.L139:
 1904 0084 0400A0E1 		mov	r0, #1
 1905              		.loc 1 273 0
 1906 0088 E8FFFF1A 		ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 1907              	.LFE6:
 1909 008c 0000A0E3 		.section	.text.f_truncate,"ax",%progbits
 1910 0090 F0A89DE8 		.align	2
 1911              		.global	f_truncate
 1913 0094 0100A0E3 	f_truncate:
 1914              	.LFB27:
 1915 0098 F0A89DE8 		.loc 1 1345 0
 1916              		@ args = 0, pretend = 0, frame = 0
 1917              		@ frame_needed = 1, uses_anonymous_args = 0
 1918              	.LVL213:
 1919              		mov	ip, sp
 1920              	.LCFI31:
 1921              		stmfd	sp!, {r4, r5, r6, fp, ip, lr, pc}
 1922              	.LCFI32:
 1923              		mov	r4, r0
 1924              		sub	fp, ip, #4
 1925              	.LCFI33:
 1926              		.loc 1 1350 0
 1927              		ldr	r0, [r0, #4]
 1928 0000 0DC0A0E1 	.LVL214:
 1929              		ldrh	r1, [r4, #0]
 1930 0004 70D82DE9 		bl	validate
 1931              		.loc 1 1351 0
 1932 0008 0040A0E1 		subs	r5, r0, #0
 1933 000c 04B04CE2 	.LVL215:
 1934              		bne	.L149
 1935              		.loc 1 1352 0
 1936 0010 040090E5 		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 1937              		tst	r2, #128
 1938 0014 B010D4E1 		bne	.L155
 1939 0018 FEFFFFEB 		.loc 1 1353 0
 1940              		tst	r2, #2
 1941 001c 005050E2 		moveq	r5, #6
 1942              		beq	.L149
 1943 0020 1900001A 		.loc 1 1355 0
 1944              		add	r1, r4, #8
 1945 0024 0220D4E5 		ldmia	r1, {r1, r3}	@ phole ldm
 1946 0028 800012E3 		cmp	r3, r1
 1947 002c 1500001A 		bls	.L149
 1948              		.loc 1 1357 0
 1949 0030 020012E3 		orr	r3, r2, #32
 1950 0034 0650A003 		.loc 1 1358 0
 1951 0038 1300000A 		cmp	r1, #0
 1952              		.loc 1 1357 0
 1953 003c 081084E2 		strb	r3, [r4, #2]
 1954 0040 0A0091E8 		.loc 1 1356 0
 1955 0044 010053E1 		str	r1, [r4, #12]
 1956 0048 0F00009A 		.loc 1 1358 0
 1957              		bne	.L152
 1958 004c 203082E3 		.loc 1 1359 0
 1959              		ldr	r0, [r4, #4]
 1960 0050 000051E3 		ldr	r1, [r4, #16]
 1961              		bl	remove_chain
 1962 0054 0230C4E5 		cmp	r0, #0
 1963              		.loc 1 1360 0
 1964 0058 0C1084E5 		strne	r5, [r4, #16]
 1965              		.loc 1 1359 0
 1966 005c 0C00001A 		bne	.L149
 1967              	.LVL216:
 1968 0060 040094E5 	.L153:
 1969 0064 101094E5 		.loc 1 1374 0
 1970 0068 FEFFFFEB 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1971 006c 000050E3 		mvn	r3, r3, asl #25
 1972              		mvn	r3, r3, lsr #25
 1973 0070 10508415 		strb	r3, [r4, #2]
 1974              	.L155:
 1975 0074 0400001A 		mov	r5, #8
 1976              	.L149:
 1977              		.loc 1 1376 0
 1978              		mov	r0, r5
 1979 0078 0230D4E5 		ldmfd	sp, {r4, r5, r6, fp, sp, pc}
 1980 007c 833CE0E1 	.LVL217:
 1981 0080 A33CE0E1 	.L152:
 1982 0084 0230C4E5 		.loc 1 1362 0
 1983              		ldr	r0, [r4, #4]
 1984 0088 0850A0E3 		ldr	r1, [r4, #20]
 1985              		bl	get_cluster
 1986              		.loc 1 1363 0
 1987 008c 0500A0E1 		cmp	r0, #1
 1988 0090 70A89DE8 	.LVL218:
 1989              		.loc 1 1362 0
 1990              		mov	r6, r0
 1991              	.LVL219:
 1992 0094 040094E5 		.loc 1 1363 0
 1993 0098 141094E5 		bls	.L153
 1994 009c FEFFFFEB 		.loc 1 1364 0
 1995              		ldr	r0, [r4, #4]
 1996 00a0 010050E3 		ldr	r3, [r0, #12]
 1997              		cmp	r6, r3
 1998              		bcs	.L149
 1999 00a4 0060A0E1 		.loc 1 1365 0
 2000              		ldr	r1, [r4, #20]
 2001              		mvn	r2, #-268435456
 2002 00a8 F2FFFF9A 		bl	put_cluster
 2003              		cmp	r0, #0
 2004 00ac 040094E5 		beq	.L153
 2005 00b0 0C3090E5 		.loc 1 1366 0
 2006 00b4 030056E1 		mov	r1, r6
 2007 00b8 F3FFFF2A 		ldr	r0, [r4, #4]
 2008              		bl	remove_chain
 2009 00bc 141094E5 		cmp	r0, #0
 2010 00c0 0F22E0E3 		beq	.L153
 2011 00c4 FEFFFFEB 		b	.L149
 2012 00c8 000050E3 	.LFE27:
 2014              		.section	.text.reserve_direntry,"ax",%progbits
 2015 00d0 0610A0E1 		.align	2
 2017 00d8 FEFFFFEB 	reserve_direntry:
 2018 00dc 000050E3 	.LFB13:
 2019 00e0 E4FFFF0A 		.loc 1 566 0
 2020 00e4 E8FFFFEA 		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 1, uses_anonymous_args = 0
 2022              	.LVL220:
 2023              		mov	ip, sp
 2024              	.LCFI34:
 2025              		stmfd	sp!, {r4, r5, r6, r7, r8, fp, ip, lr, pc}
 2026              	.LCFI35:
 2027              		.loc 1 573 0
 2028              	.LVL221:
 2029              		ldmib	r0, {r5, r7}	@ phole ldm
 2030              	.LVL222:
 2031              		.loc 1 574 0
 2032 0000 0DC0A0E1 		cmp	r7, #0
 2033              		.loc 1 578 0
 2034 0004 F0D92DE9 		ldreq	r3, [r5, #20]
 2035              		.loc 1 566 0
 2036              		sub	fp, ip, #4
 2037              	.LCFI36:
 2038 0008 A00090E9 		.loc 1 566 0
 2039              		mov	r4, r0
 2040              		mov	r8, r1
 2041 000c 000057E3 		.loc 1 578 0
 2042              		streq	r3, [r0, #16]
 2043 0010 14309505 		.loc 1 574 0
 2044              		beq	.L160
 2045 0014 04B04CE2 	.LVL223:
 2046              		.loc 1 575 0
 2047              		str	r7, [r0, #12]
 2048 0018 0040A0E1 	.LBB31:
 2049 001c 0180A0E1 	.LBB32:
 2050              		.loc 1 346 0
 2051 0020 10308005 		ldr	r3, [r5, #12]
 2052              		.loc 1 345 0
 2053 0024 0900000A 		sub	r0, r7, #2
 2054              	.LVL224:
 2055              		.loc 1 346 0
 2056 0028 0C7080E5 		sub	r3, r3, #2
 2057              		cmp	r0, r3
 2058              		.loc 1 347 0
 2059              		ldrccb	r2, [r5, #43]	@ zero_extendqisi2
 2060 002c 0C3095E5 		ldrcc	r3, [r5, #24]
 2061              		mlacc	r1, r0, r2, r3
 2062 0030 020047E2 		.loc 1 346 0
 2063              		movcs	r1, #0
 2064              	.LBE32:
 2065 0034 023043E2 	.LBE31:
 2066 0038 030050E1 		.loc 1 576 0
 2067              		str	r1, [r4, #16]
 2068 003c 2B20D535 	.LVL225:
 2069 0040 18309535 	.L160:
 2070 0044 90322130 		.loc 1 580 0
 2071              		mov	r3, #0	@ movhi
 2072 0048 0010A023 		strh	r3, [r4, #2]	@ movhi
 2073              	.L164:
 2074              		.loc 1 583 0
 2075              		ldr	r1, [r4, #16]
 2076 004c 101084E5 		mov	r0, r5
 2077              	.LVL226:
 2078              		bl	move_window
 2079              		cmp	r0, #0
 2080 0050 0030A0E3 		.loc 1 589 0
 2081 0054 B230C4E1 		mov	r0, r4
 2082              		.loc 1 583 0
 2083              		beq	.L161
 2084 0058 101094E5 		.loc 1 584 0
 2085 005c 0500A0E1 		ldrh	r3, [r4, #2]
 2086              		and	r3, r3, #15
 2087 0060 FEFFFFEB 		mov	r3, r3, asl #5
 2088 0064 000050E3 		.loc 1 585 0
 2089              		add	r1, r5, r3
 2090 0068 0400A0E1 		ldrb	r2, [r1, #48]	@ zero_extendqisi2
 2091              	.LVL227:
 2092 006c 3800000A 		.loc 1 584 0
 2093              		add	r3, r3, #48
 2094 0070 B230D4E1 		.loc 1 586 0
 2095 0074 0F3003E2 		cmp	r2, #229
 2096 0078 8332A0E1 		cmpne	r2, #0
 2097              		.loc 1 584 0
 2098 007c 031085E0 		add	r3, r5, r3
 2099 0080 3020D1E5 	.LVL228:
 2100              		.loc 1 586 0
 2101              		beq	.L173
 2102 0084 303083E2 		.loc 1 589 0
 2103              		bl	next_dir_entry
 2104 0088 E50052E3 	.LVL229:
 2105 008c 00005213 		subs	r6, r0, #0
 2106              		bne	.L164
 2107 0090 033085E0 		.loc 1 593 0
 2108              		cmp	r7, #0
 2109              		bne	.L174
 2110 0094 3000000A 	.LVL230:
 2111              	.L165:
 2112 0098 FEFFFFEB 		.loc 1 607 0
 2113              		mov	r0, #6
 2114 009c 006050E2 		.loc 1 608 0
 2115 00a0 ECFFFF1A 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 2116              	.LVL231:
 2117 00a4 000057E3 	.L174:
 2118 00a8 0100001A 		.loc 1 593 0
 2119              		ldr	r1, [r4, #12]
 2120              		mov	r0, r5
 2121              		bl	create_chain
 2122 00ac 0600A0E3 		subs	r4, r0, #0
 2123              	.LVL232:
 2124 00b0 F0A99DE8 		beq	.L165
 2125              		.loc 1 594 0
 2126              		cmp	r4, #1
 2127              		beq	.L161
 2128 00b4 0C1094E5 		mov	r0, r5
 2129 00b8 0500A0E1 		mov	r1, r6
 2130 00bc FEFFFFEB 		bl	move_window
 2131 00c0 004050E2 		cmp	r0, #0
 2132              		beq	.L161
 2133 00c4 F8FFFF0A 	.LBB33:
 2134              	.LBB34:
 2135 00c8 010054E3 		.loc 1 346 0
 2136 00cc 2000000A 		ldr	r3, [r5, #12]
 2137 00d0 0500A0E1 		.loc 1 345 0
 2138 00d4 0610A0E1 		sub	r0, r4, #2
 2139 00d8 FEFFFFEB 	.LVL233:
 2140 00dc 000050E3 		.loc 1 346 0
 2141 00e0 1B00000A 		sub	r3, r3, #2
 2142              		cmp	r0, r3
 2143              		.loc 1 347 0
 2144              		ldrccb	r2, [r5, #43]	@ zero_extendqisi2
 2145 00e4 0C3095E5 		ldrcc	r3, [r5, #24]
 2146              		mlacc	r6, r2, r0, r3
 2147 00e8 020044E2 	.LVL234:
 2148              	.LBE34:
 2149              	.LBE33:
 2150 00ec 023043E2 		.loc 1 598 0
 2151 00f0 030050E1 		add	r7, r5, #48
 2152              		.loc 1 597 0
 2153 00f4 2B20D535 		str	r6, [r5, #4]
 2154 00f8 18309535 		.loc 1 598 0
 2155 00fc 92302630 		mov	r0, r7
 2156              	.LVL235:
 2157              		mov	r1, #0
 2158              		mov	r2, #512
 2159              		bl	memset
 2160 0100 307085E2 		.loc 1 599 0
 2161              		ldrb	r4, [r5, #43]	@ zero_extendqisi2
 2162 0104 046085E5 	.LVL236:
 2163              		cmp	r4, #0
 2164 0108 0700A0E1 		bne	.L172
 2165              		b	.L168
 2166 010c 0010A0E3 	.L175:
 2167 0110 022CA0E3 		ands	r4, r3, #255
 2168 0114 FEFFFFEB 	.LVL237:
 2169              		beq	.L168
 2170 0118 2B40D5E5 	.L172:
 2171              		.loc 1 600 0
 2172 011c 000054E3 		mov	r2, r6
 2173 0120 0200001A 		mov	r3, #1
 2174 0124 0F0000EA 		ldrb	r0, [r5, #45]	@ zero_extendqisi2
 2175              		mov	r1, r7
 2176 0128 FF4013E2 		bl	disk_write
 2177              		cmp	r0, #0
 2178 012c 0D00000A 		.loc 1 599 0
 2179              		sub	r3, r4, #1
 2180              		.loc 1 602 0
 2181 0130 0620A0E1 		add	r6, r6, #1
 2182 0134 0130A0E3 		.loc 1 600 0
 2183 0138 2D00D5E5 		beq	.L175
 2184 013c 0710A0E1 	.LVL238:
 2185 0140 FEFFFFEB 	.L161:
 2186 0144 000050E3 		.loc 1 607 0
 2187              		mov	r0, #8
 2188 0148 013044E2 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 2189              	.LVL239:
 2190 014c 016086E2 	.L173:
 2191              		.loc 1 587 0
 2192 0150 F4FFFF0A 		str	r3, [r8, #0]
 2193              		mov	r0, #0
 2194              		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 2195              	.LVL240:
 2196 0154 0800A0E3 	.L168:
 2197 0158 F0A99DE8 		.loc 1 604 0
 2198              		mov	r3, #1
 2199              		strb	r3, [r5, #46]
 2200              		.loc 1 605 0
 2201 015c 003088E5 		mov	r0, #0
 2202 0160 0000A0E3 		str	r7, [r8, #0]
 2203 0164 F0A99DE8 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 2204              	.LFE13:
 2206              		.section	.text.sync,"ax",%progbits
 2207 0168 0130A0E3 		.align	2
 2209              	sync:
 2210 0170 0000A0E3 	.LFB3:
 2211 0174 007088E5 		.loc 1 126 0
 2212 0178 F0A99DE8 		@ args = 0, pretend = 0, frame = 28
 2213              		@ frame_needed = 1, uses_anonymous_args = 0
 2214              	.LVL241:
 2215              		mov	ip, sp
 2216              	.LCFI37:
 2217              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2218              	.LCFI38:
 2219              		sub	fp, ip, #4
 2220              	.LCFI39:
 2221              		sub	sp, sp, #28
 2222              	.LCFI40:
 2223              		.loc 1 127 0
 2224 0000 0DC0A0E1 		mov	r9, #1
 2225              		.loc 1 126 0
 2226 0004 F0DF2DE9 		.loc 1 128 0
 2227              		mov	r1, #0
 2228 0008 04B04CE2 		.loc 1 127 0
 2229              		strb	r9, [r0, #46]
 2230 000c 1CD04DE2 		.loc 1 128 0
 2231              		str	r0, [fp, #-68]
 2232              	.LVL242:
 2233 0010 0190A0E3 		bl	move_window
 2234              		cmp	r0, #0
 2235              		ldr	ip, [fp, #-68]
 2236 0014 0010A0E3 		beq	.L177
 2237              		.loc 1 131 0
 2238 0018 2E90C0E5 		ldrb	r3, [ip, #42]	@ zero_extendqisi2
 2239              	.LVL243:
 2240 001c 44000BE5 		cmp	r3, #3
 2241              		beq	.L181
 2242 0020 FEFFFFEB 	.L178:
 2243 0024 000050E3 		.loc 1 144 0
 2244 0028 44C01BE5 		mov	r1, #0
 2245 002c 0A00000A 		ldrb	r0, [ip, #45]	@ zero_extendqisi2
 2246              		mov	r2, r1
 2247 0030 2A30DCE5 		bl	disk_ioctl
 2248              	.LVL244:
 2249 0034 030053E3 		cmp	r0, #0
 2250 0038 0900000A 		bne	.L177
 2251              	.L179:
 2252              		.loc 1 147 0
 2253 003c 0010A0E3 		sub	sp, fp, #40
 2254 0040 2D00DCE5 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 2255 0044 0120A0E1 	.L177:
 2256 0048 FEFFFFEB 		.loc 1 144 0
 2257              		mov	r0, #8
 2258 004c 000050E3 		b	.L179
 2259 0050 0100001A 	.LVL245:
 2260              	.L181:
 2261              		.loc 1 131 0
 2262 0054 28D04BE2 		ldrb	r3, [ip, #40]	@ zero_extendqisi2
 2263 0058 F0AF9DE8 		cmp	r3, #0
 2264              		beq	.L178
 2265              		.loc 1 133 0
 2266 005c 0800A0E3 		add	r7, ip, #48
 2267 0060 FBFFFFEA 		.loc 1 132 0
 2268              		mov	r6, #0
 2269              		str	r6, [ip, #4]
 2270              		.loc 1 133 0
 2271 0064 2830DCE5 		mov	r1, r6
 2272 0068 000053E3 		mov	r2, #512
 2273 006c F2FFFF0A 		mov	r0, r7
 2274              		bl	memset
 2275 0070 30708CE2 	.LVL246:
 2276              		.loc 1 137 0
 2277 0074 0060A0E3 		ldr	ip, [fp, #-68]
 2278 0078 04608CE5 		ldrb	r2, [ip, #34]	@ zero_extendqisi2
 2279              	.LVL247:
 2280 007c 0610A0E1 		ldrb	r3, [ip, #35]	@ zero_extendqisi2
 2281 0080 022CA0E3 		str	r2, [fp, #-64]
 2282 0084 0700A0E1 		str	r3, [fp, #-60]
 2283 0088 FEFFFFEB 		.loc 1 138 0
 2284              		ldrb	r2, [ip, #28]	@ zero_extendqisi2
 2285              		ldrb	r3, [ip, #29]	@ zero_extendqisi2
 2286 008c 44C01BE5 		str	r2, [fp, #-56]
 2287 0090 2220DCE5 		str	r3, [fp, #-52]
 2288              		ldrb	r2, [ip, #30]	@ zero_extendqisi2
 2289 0094 2330DCE5 		ldrb	r3, [ip, #31]	@ zero_extendqisi2
 2290 0098 40200BE5 		.loc 1 137 0
 2291 009c 3C300BE5 		ldrb	r8, [ip, #32]	@ zero_extendqisi2
 2292              		ldrb	sl, [ip, #33]	@ zero_extendqisi2
 2293 00a0 1C20DCE5 		.loc 1 138 0
 2294 00a4 1D30DCE5 		str	r2, [fp, #-48]
 2295 00a8 38200BE5 		str	r3, [fp, #-44]
 2296 00ac 34300BE5 		.loc 1 135 0
 2297 00b0 1E20DCE5 		mov	r0, #82
 2298 00b4 1F30DCE5 		.loc 1 136 0
 2299              		mov	lr, #114
 2300 00b8 2080DCE5 		.loc 1 135 0
 2301 00bc 21A0DCE5 		mov	r5, #97
 2302              		mov	r4, #65
 2303 00c0 30200BE5 		.loc 1 134 0
 2304 00c4 2C300BE5 		mov	r3, #85
 2305              		mvn	r2, #85
 2306 00c8 5200A0E3 		strb	r3, [ip, #558]
 2307              		strb	r2, [ip, #559]
 2308 00cc 72E0A0E3 		.loc 1 135 0
 2309              		strb	r0, [ip, #48]
 2310 00d0 6150A0E3 		strb	r0, [ip, #49]
 2311 00d4 4140A0E3 		strb	r5, [ip, #50]
 2312              		strb	r4, [ip, #51]
 2313 00d8 5530A0E3 		.loc 1 136 0
 2314 00dc 5520E0E3 		strb	lr, [ip, #532]
 2315 00e0 2E32CCE5 		strb	lr, [ip, #533]
 2316 00e4 2F22CCE5 		strb	r4, [ip, #534]
 2317              		strb	r5, [ip, #535]
 2318 00e8 3000CCE5 		.loc 1 137 0
 2319 00ec 3100CCE5 		strb	r8, [ip, #536]
 2320 00f0 3250CCE5 		strb	sl, [ip, #537]
 2321 00f4 3340CCE5 		ldr	r2, [fp, #-64]
 2322              		strb	r2, [ip, #538]
 2323 00f8 14E2CCE5 		ldr	r2, [fp, #-60]
 2324 00fc 15E2CCE5 		strb	r2, [ip, #539]
 2325 0100 1642CCE5 		.loc 1 138 0
 2326 0104 1752CCE5 		ldr	r2, [fp, #-56]
 2327              		strb	r2, [ip, #540]
 2328 0108 1882CCE5 		ldr	r2, [fp, #-52]
 2329 010c 19A2CCE5 		strb	r2, [ip, #541]
 2330 0110 40201BE5 		ldr	r2, [fp, #-48]
 2331 0114 1A22CCE5 		strb	r2, [ip, #542]
 2332 0118 3C201BE5 		ldr	r2, [fp, #-44]
 2333 011c 1B22CCE5 		.loc 1 139 0
 2334              		ldrb	r0, [ip, #45]	@ zero_extendqisi2
 2335 0120 38201BE5 		.loc 1 138 0
 2336 0124 1C22CCE5 		strb	r2, [ip, #543]
 2337 0128 34201BE5 		.loc 1 139 0
 2338 012c 1D22CCE5 		mov	r1, r7
 2339 0130 30201BE5 		ldr	r2, [ip, #36]
 2340 0134 1E22CCE5 		mov	r3, r9
 2341 0138 2C201BE5 		str	ip, [fp, #-68]
 2342              	.LVL248:
 2343 013c 2D00DCE5 		bl	disk_write
 2344              		.loc 1 140 0
 2345 0140 1F22CCE5 		ldr	ip, [fp, #-68]
 2346              		strb	r6, [ip, #40]
 2347 0144 0710A0E1 	.LVL249:
 2348 0148 24209CE5 		b	.L178
 2349 014c 0930A0E1 	.LFE3:
 2351              		.section	.text.f_readdir,"ax",%progbits
 2352 0154 FEFFFFEB 		.align	2
 2353              		.global	f_readdir
 2355 015c 2860CCE5 	f_readdir:
 2356              	.LFB25:
 2357 0160 B5FFFFEA 		.loc 1 1279 0
 2358              		@ args = 0, pretend = 0, frame = 0
 2359              		@ frame_needed = 1, uses_anonymous_args = 0
 2360              	.LVL250:
 2361              		mov	ip, sp
 2362              	.LCFI41:
 2363              		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 2364              	.LCFI42:
 2365              		mov	r4, r0
 2366              		mov	r5, r1
 2367              		sub	fp, ip, #4
 2368              	.LCFI43:
 2369              		.loc 1 1283 0
 2370 0000 0DC0A0E1 		ldr	r0, [r0, #4]
 2371              	.LVL251:
 2372 0004 30D82DE9 		ldrh	r1, [r4, #0]
 2373              	.LVL252:
 2374 0008 0040A0E1 		bl	validate
 2375 000c 0150A0E1 		.loc 1 1284 0
 2376 0010 04B04CE2 		ands	r0, r0, #255
 2377              	.LVL253:
 2378              		.loc 1 1286 0
 2379 0014 040090E5 		streqb	r0, [r5, #9]
 2380              		.loc 1 1284 0
 2381 0018 B010D4E1 		beq	.L185
 2382              		ldmfd	sp, {r4, r5, fp, sp, pc}
 2383 001c FEFFFFEB 	.LVL254:
 2384              	.L188:
 2385 0020 FF0010E2 		.loc 1 1295 0
 2386              		mov	r0, r4
 2387              		bl	next_dir_entry
 2388 0024 0900C505 	.LVL255:
 2389              		cmp	r0, #0
 2390 0028 0700000A 		streq	r0, [r4, #16]
 2391 002c 30A89DE8 		.loc 1 1296 0
 2392              		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 2393              		cmp	r3, #0
 2394              		bne	.L187
 2395 0030 0400A0E1 	.LVL256:
 2396 0034 FEFFFFEB 	.L185:
 2397              		.loc 1 1287 0
 2398 0038 000050E3 		ldr	r3, [r4, #16]
 2399 003c 10008405 		subs	r1, r3, #0
 2400              		beq	.L187
 2401 0040 0930D5E5 		.loc 1 1288 0
 2402 0044 000053E3 		ldr	r0, [r4, #4]
 2403 0048 1E00001A 	.LVL257:
 2404              		bl	move_window
 2405              		cmp	r0, #0
 2406              		beq	.L192
 2407 004c 103094E5 		.loc 1 1290 0
 2408 0050 001053E2 		ldrh	r3, [r4, #2]
 2409 0054 1B00000A 		and	r3, r3, #15
 2410              		mov	r3, r3, asl #5
 2411 0058 040094E5 		ldr	r2, [r4, #4]
 2412              		add	r1, r3, #48
 2413 005c FEFFFFEB 		add	r1, r2, r1
 2414 0060 000050E3 	.LVL258:
 2415 0064 1900000A 		.loc 1 1291 0
 2416              		add	r2, r2, r3
 2417 0068 B230D4E1 		ldrb	r3, [r2, #48]	@ zero_extendqisi2
 2418 006c 0F3003E2 	.LVL259:
 2419 0070 8332A0E1 		.loc 1 1292 0
 2420 0074 042094E5 		cmp	r3, #0
 2421 0078 301083E2 		beq	.L187
 2422 007c 011082E0 		.loc 1 1293 0
 2423              		cmp	r3, #229
 2424              		beq	.L188
 2425 0080 032082E0 		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 2426 0084 3030D2E5 	.LVL260:
 2427              		tst	r3, #8
 2428              		bne	.L188
 2429 0088 000053E3 		.loc 1 1294 0
 2430 008c 0D00000A 		mov	r0, r5
 2431              		bl	get_fileinfo
 2432 0090 E50053E3 	.LVL261:
 2433 0094 E5FFFF0A 		.loc 1 1295 0
 2434 0098 0B30D1E5 		mov	r0, r4
 2435              		bl	next_dir_entry
 2436 009c 080013E3 		cmp	r0, #0
 2437 00a0 E2FFFF1A 		streq	r0, [r4, #16]
 2438              		.loc 1 1296 0
 2439 00a4 0500A0E1 		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 2440 00a8 FEFFFFEB 		cmp	r3, #0
 2441              		beq	.L185
 2442              	.LVL262:
 2443 00ac 0400A0E1 	.L187:
 2444 00b0 FEFFFFEB 		.loc 1 1287 0
 2445 00b4 000050E3 		mov	r0, #0
 2446 00b8 10008405 	.LVL263:
 2447              		.loc 1 1300 0
 2448 00bc 0930D5E5 		ldmfd	sp, {r4, r5, fp, sp, pc}
 2449 00c0 000053E3 	.LVL264:
 2450 00c4 E0FFFF0A 	.L192:
 2451              		.loc 1 1288 0
 2452              		add	r0, r0, #8
 2453              		ldmfd	sp, {r4, r5, fp, sp, pc}
 2454 00c8 0000A0E3 	.LFE25:
 2456              		.section	.text.f_sync,"ax",%progbits
 2457 00cc 30A89DE8 		.align	2
 2458              		.global	f_sync
 2460              	f_sync:
 2461 00d0 080080E2 	.LFB21:
 2462 00d4 30A89DE8 		.loc 1 1075 0
 2463              		@ args = 0, pretend = 0, frame = 0
 2464              		@ frame_needed = 1, uses_anonymous_args = 0
 2465              	.LVL265:
 2466              		mov	ip, sp
 2467              	.LCFI44:
 2468              		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 2469              	.LCFI45:
 2470              		mov	r5, r0
 2471              		sub	fp, ip, #4
 2472              	.LCFI46:
 2473              		.loc 1 1081 0
 2474              		ldr	r0, [r0, #4]
 2475 0000 0DC0A0E1 	.LVL266:
 2476              		ldrh	r1, [r5, #0]
 2477 0004 30D82DE9 		bl	validate
 2478              		.loc 1 1082 0
 2479 0008 0050A0E1 		cmp	r0, #0
 2480 000c 04B04CE2 	.LVL267:
 2481              		ldmnefd	sp, {r4, r5, fp, sp, pc}
 2482              		.loc 1 1083 0
 2483 0010 040090E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2484              		tst	r3, #32
 2485 0014 B010D5E1 		ldmeqfd	sp, {r4, r5, fp, sp, pc}
 2486 0018 FEFFFFEB 		.loc 1 1085 0
 2487              		tst	r3, #64
 2488 001c 000050E3 		beq	.L195
 2489              		.loc 1 1086 0
 2490 0020 30A89D18 		ldr	r3, [r5, #4]
 2491              		add	r1, r5, #36
 2492 0024 0230D5E5 		ldrb	r0, [r3, #45]	@ zero_extendqisi2
 2493 0028 200013E3 	.LVL268:
 2494 002c 30A89D08 		ldr	r2, [r5, #24]
 2495              		mov	r3, #1
 2496 0030 400013E3 		bl	disk_write
 2497 0034 0A00000A 		cmp	r0, #0
 2498              		bne	.L196
 2499 0038 043095E5 		.loc 1 1088 0
 2500 003c 241085E2 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2501 0040 2D00D3E5 		bic	r3, r3, #64
 2502              		strb	r3, [r5, #2]
 2503 0044 182095E5 	.LVL269:
 2504 0048 0130A0E3 	.L195:
 2505 004c FEFFFFEB 		.loc 1 1091 0
 2506 0050 000050E3 		ldr	r0, [r5, #4]
 2507 0054 0700001A 	.LVL270:
 2508              		ldr	r1, [r5, #28]
 2509 0058 0230D5E5 		bl	move_window
 2510 005c 4030C3E3 		cmp	r0, #0
 2511 0060 0230C5E5 		bne	.L198
 2512              	.L196:
 2513              		.loc 1 1101 0
 2514              		mov	r0, #8
 2515 0064 040095E5 	.LVL271:
 2516              	.LVL272:
 2517 0068 1C1095E5 		.loc 1 1105 0
 2518 006c FEFFFFEB 		ldmfd	sp, {r4, r5, fp, sp, pc}
 2519 0070 000050E3 	.L198:
 2520 0074 0100001A 		.loc 1 1093 0
 2521              		ldr	r4, [r5, #32]
 2522              	.LVL273:
 2523 0078 0800A0E3 		.loc 1 1094 0
 2524              		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 2525              		orr	r3, r3, #32
 2526              		strb	r3, [r4, #11]
 2527 007c 30A89DE8 		.loc 1 1095 0
 2528              		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 2529              		strb	r2, [r4, #28]
 2530 0080 204095E5 		ldrb	r3, [r5, #13]	@ zero_extendqisi2
 2531              		strb	r3, [r4, #29]
 2532              		ldrb	r2, [r5, #14]	@ zero_extendqisi2
 2533 0084 0B30D4E5 		strb	r2, [r4, #30]
 2534 0088 203083E3 		ldrb	r3, [r5, #15]	@ zero_extendqisi2
 2535 008c 0B30C4E5 		strb	r3, [r4, #31]
 2536              		.loc 1 1096 0
 2537 0090 0C20D5E5 		ldrb	r2, [r5, #16]	@ zero_extendqisi2
 2538 0094 1C20C4E5 		strb	r2, [r4, #26]
 2539 0098 0D30D5E5 		ldrb	r3, [r5, #17]	@ zero_extendqisi2
 2540 009c 1D30C4E5 		strb	r3, [r4, #27]
 2541 00a0 0E20D5E5 		.loc 1 1097 0
 2542 00a4 1E20C4E5 		ldrb	r2, [r5, #18]	@ zero_extendqisi2
 2543 00a8 0F30D5E5 		strb	r2, [r4, #20]
 2544 00ac 1F30C4E5 		ldrb	r3, [r5, #19]	@ zero_extendqisi2
 2545              		strb	r3, [r4, #21]
 2546 00b0 1020D5E5 		.loc 1 1098 0
 2547 00b4 1A20C4E5 		bl	get_fattime
 2548 00b8 1130D5E5 		.loc 1 1099 0
 2549 00bc 1B30C4E5 		mov	r3, r0, asl #16
 2550              	.LVL274:
 2551 00c0 1220D5E5 		mov	r2, r0, lsr #16
 2552 00c4 1420C4E5 		mov	r1, r0, lsr #24
 2553 00c8 1330D5E5 		mov	r3, r3, lsr #24
 2554 00cc 1530C4E5 		and	r2, r2, #255
 2555              		and	r0, r0, #255
 2556 00d0 FEFFFFEB 	.LVL275:
 2557              		strb	r0, [r4, #22]
 2558 00d4 0038A0E1 		strb	r3, [r4, #23]
 2559              		strb	r2, [r4, #24]
 2560 00d8 2028A0E1 		strb	r1, [r4, #25]
 2561 00dc 201CA0E1 		.loc 1 1100 0
 2562 00e0 233CA0E1 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2563 00e4 FF2002E2 		.loc 1 1101 0
 2564 00e8 FF0000E2 		ldr	r0, [r5, #4]
 2565              		.loc 1 1100 0
 2566 00ec 1600C4E5 		bic	r3, r3, #32
 2567 00f0 1730C4E5 		strb	r3, [r5, #2]
 2568 00f4 1820C4E5 		.loc 1 1105 0
 2569 00f8 1910C4E5 		ldmfd	sp, {r4, r5, fp, sp, lr}
 2570              		.loc 1 1101 0
 2571 00fc 0230D5E5 		b	sync
 2572              	.LFE21:
 2574              		.section	.text.f_close,"ax",%progbits
 2575 0104 2030C3E3 		.align	2
 2576 0108 0230C5E5 		.global	f_close
 2578 010c 30689DE8 	f_close:
 2579              	.LFB22:
 2580 0110 FEFFFFEA 		.loc 1 1119 0
 2581              		@ args = 0, pretend = 0, frame = 0
 2582              		@ frame_needed = 1, uses_anonymous_args = 0
 2583              	.LVL276:
 2584              		mov	ip, sp
 2585              	.LCFI47:
 2586              		stmfd	sp!, {r4, fp, ip, lr, pc}
 2587              	.LCFI48:
 2588              		sub	fp, ip, #4
 2589              	.LCFI49:
 2590              		.loc 1 1119 0
 2591              		mov	r4, r0
 2592              		.loc 1 1124 0
 2593 0000 0DC0A0E1 		bl	f_sync
 2594              	.LVL277:
 2595 0004 10D82DE9 		.loc 1 1128 0
 2596              		cmp	r0, #0
 2597 0008 04B04CE2 	.LVL278:
 2598              		streq	r0, [r4, #4]
 2599              	.LVL279:
 2600 000c 0040A0E1 		.loc 1 1130 0
 2601              		ldmfd	sp, {r4, fp, sp, pc}
 2602 0010 FEFFFFEB 	.LFE22:
 2604              		.section	.text.f_lseek,"ax",%progbits
 2605 0014 000050E3 		.align	2
 2606              		.global	f_lseek
 2608              	f_lseek:
 2609              	.LFB23:
 2610 001c 10A89DE8 		.loc 1 1144 0
 2611              		@ args = 0, pretend = 0, frame = 0
 2612              		@ frame_needed = 1, uses_anonymous_args = 0
 2613              	.LVL280:
 2614              		mov	ip, sp
 2615              	.LCFI50:
 2616              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2617              	.LCFI51:
 2618              		mov	r5, r0
 2619              		sub	fp, ip, #4
 2620              	.LCFI52:
 2621              		.loc 1 1144 0
 2622              		mov	r4, r1
 2623 0000 0DC0A0E1 		.loc 1 1149 0
 2624              		ldr	r0, [r0, #4]
 2625 0004 F0DF2DE9 	.LVL281:
 2626              		ldrh	r1, [r5, #0]
 2627 0008 0050A0E1 	.LVL282:
 2628 000c 04B04CE2 		bl	validate
 2629              		.loc 1 1150 0
 2630              		subs	sl, r0, #0
 2631 0010 0140A0E1 	.LVL283:
 2632              		bne	.L203
 2633 0014 040090E5 		.loc 1 1151 0
 2634              		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2635 0018 B010D5E1 		tst	r3, #128
 2636              		bne	.L237
 2637 001c FEFFFFEB 		.loc 1 1152 0
 2638              		ldr	r7, [r5, #12]
 2639 0020 00A050E2 	.LVL284:
 2640              		cmp	r7, r4
 2641 0024 5C00001A 		bcs	.L205
 2642              	.LVL285:
 2643 0028 0230D5E5 		tst	r3, #2
 2644 002c 800013E3 		bne	.L205
 2645 0030 6800001A 	.L206:
 2646              		.loc 1 1159 0
 2647 0034 0C7095E5 		mov	lr, #0
 2648              		mvn	r3, #0
 2649 0038 040057E1 		.loc 1 1161 0
 2650 003c 6800002A 		cmp	r7, #0
 2651              		.loc 1 1158 0
 2652 0040 020013E3 		ldr	r0, [r5, #8]
 2653 0044 6600001A 	.LVL286:
 2654              		.loc 1 1159 0
 2655              		strb	r3, [r5, #3]
 2656 0048 00E0A0E3 		str	lr, [r5, #8]
 2657 004c 0030E0E3 		.loc 1 1161 0
 2658              		beq	.L203
 2659 0050 000057E3 	.LVL287:
 2660              		.loc 1 1162 0
 2661 0054 080095E5 		ldr	r6, [r5, #4]
 2662              		ldrb	r3, [r6, #43]	@ zero_extendqisi2
 2663              		.loc 1 1163 0
 2664 0058 0330C5E5 		cmp	r0, lr
 2665 005c 08E085E5 		.loc 1 1162 0
 2666              		mov	r8, r3, asl #9
 2667 0060 4D00000A 	.LVL288:
 2668              		.loc 1 1163 0
 2669              		beq	.L208
 2670 0064 046095E5 		sub	r9, r0, #1
 2671 0068 2B30D6E5 		mov	r1, r8
 2672              		sub	r0, r7, #1
 2673 006c 0E0050E1 	.LVL289:
 2674              		bl	__udivsi3
 2675 0070 8384A0E1 		mov	r1, r8
 2676              		mov	r4, r0
 2677              		mov	r0, r9
 2678 0074 4A00000A 		bl	__udivsi3
 2679 0078 019040E2 		cmp	r4, r0
 2680 007c 0810A0E1 		bcc	.L208
 2681 0080 010047E2 		.loc 1 1165 0
 2682              		rsb	r3, r8, #0
 2683 0084 FEFFFFEB 		and	r3, r3, r9
 2684 0088 0810A0E1 		.loc 1 1166 0
 2685 008c 0040A0E1 		rsb	r7, r3, r7
 2686 0090 0900A0E1 		.loc 1 1165 0
 2687 0094 FEFFFFEB 		str	r3, [r5, #8]
 2688 0098 000054E1 		.loc 1 1167 0
 2689 009c 4000003A 		ldr	ip, [r5, #20]
 2690              	.LVL290:
 2691 00a0 003068E2 		b	.L209
 2692 00a4 093003E0 	.L239:
 2693              		ldr	lr, [r5, #8]
 2694 00a8 077063E0 		.loc 1 1180 0
 2695              		mov	r7, r8
 2696 00ac 083085E5 	.LVL291:
 2697              	.L212:
 2698 00b0 14C095E5 		.loc 1 1197 0
 2699              		mov	r3, r7, asl #23
 2700 00b4 4E0000EA 		mov	r3, r3, lsr #23
 2701              		.loc 1 1196 0
 2702 00b8 08E095E5 		mov	r2, r7, lsr #9
 2703              		.loc 1 1195 0
 2704 00bc 0870A0E1 		add	lr, lr, r7
 2705              		.loc 1 1196 0
 2706              		and	r4, r2, #255
 2707              		.loc 1 1197 0
 2708 00c0 873BA0E1 		cmp	r3, #0
 2709 00c4 A33BA0E1 		.loc 1 1195 0
 2710              		str	lr, [r5, #8]
 2711 00c8 A724A0E1 		.loc 1 1196 0
 2712              		strb	r4, [r5, #3]
 2713 00cc 07E08EE0 		.loc 1 1197 0
 2714              		beq	.L235
 2715 00d0 FF4002E2 		.loc 1 1198 0
 2716              		ldr	r6, [r5, #4]
 2717 00d4 000053E3 	.LBB35:
 2718              	.LBB36:
 2719 00d8 08E085E5 		.loc 1 346 0
 2720              		ldr	r3, [r6, #12]
 2721 00dc 0340C5E5 		.loc 1 345 0
 2722              		sub	r0, ip, #2
 2723 00e0 6800000A 	.LVL292:
 2724              		.loc 1 346 0
 2725 00e4 046095E5 		sub	r3, r3, #2
 2726              		cmp	r0, r3
 2727              		.loc 1 347 0
 2728              		ldrcc	r3, [r6, #24]
 2729 00e8 0C3096E5 		ldrccb	r2, [r6, #43]	@ zero_extendqisi2
 2730              		mlacc	ip, r2, r0, r3
 2731 00ec 02004CE2 	.LVL293:
 2732              		.loc 1 346 0
 2733              		movcs	ip, #0
 2734 00f0 023043E2 	.LBE36:
 2735 00f4 030050E1 	.LBE35:
 2736              		.loc 1 1199 0
 2737 00f8 18309635 		add	r3, r4, #1
 2738 00fc 2B20D635 		.loc 1 1203 0
 2739 0100 92302C30 		adds	r7, ip, r4
 2740              	.LVL294:
 2741              		.loc 1 1199 0
 2742 0104 00C0A023 		strb	r3, [r5, #3]
 2743              		.loc 1 1203 0
 2744              		beq	.L235
 2745              		ldr	r2, [r5, #24]
 2746 0108 013084E2 		cmp	r7, r2
 2747              		beq	.L235
 2748 010c 04709CE0 		.loc 1 1205 0
 2749              		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2750              		tst	r3, #64
 2751 0110 0330C5E5 		addeq	r4, r5, #36
 2752              		beq	.L219
 2753 0114 5B00000A 		.loc 1 1206 0
 2754 0118 182095E5 		add	r4, r5, #36
 2755 011c 020057E1 		ldrb	r0, [r6, #45]	@ zero_extendqisi2
 2756 0120 5800000A 	.LVL295:
 2757              		mov	r1, r4
 2758 0124 0230D5E5 	.LVL296:
 2759 0128 400013E3 		mov	r3, #1
 2760 012c 24408502 		bl	disk_write
 2761 0130 0A00000A 		cmp	r0, #0
 2762              		bne	.L211
 2763 0134 244085E2 		.loc 1 1208 0
 2764 0138 2D00D6E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2765              		bic	r3, r3, #64
 2766 013c 0410A0E1 		strb	r3, [r5, #2]
 2767              		ldr	r6, [r5, #4]
 2768 0140 0130A0E3 	.LVL297:
 2769 0144 FEFFFFEB 	.L219:
 2770 0148 000050E3 		.loc 1 1211 0
 2771 014c 1D00001A 		ldrb	r0, [r6, #45]	@ zero_extendqisi2
 2772              	.LVL298:
 2773 0150 0230D5E5 		mov	r1, r4
 2774 0154 4030C3E3 	.LVL299:
 2775 0158 0230C5E5 		mov	r2, r7
 2776 015c 046095E5 		mov	r3, #1
 2777              		bl	disk_read
 2778              		cmp	r0, #0
 2779              		bne	.L211
 2780 0160 2D00D6E5 		.loc 1 1213 0
 2781              		str	r7, [r5, #24]
 2782 0164 0410A0E1 	.LVL300:
 2783              	.L236:
 2784 0168 0720A0E1 		ldr	r3, [r5, #12]
 2785 016c 0130A0E3 		ldr	lr, [r5, #8]
 2786 0170 FEFFFFEB 	.LVL301:
 2787 0174 000050E3 	.L207:
 2788 0178 1200001A 		.loc 1 1217 0
 2789              		cmp	lr, r3
 2790 017c 187085E5 		.loc 1 1219 0
 2791              		ldrhib	r3, [r5, #2]	@ zero_extendqisi2
 2792              		orrhi	r3, r3, #32
 2793 0180 0C3095E5 		strhib	r3, [r5, #2]
 2794 0184 08E095E5 		.loc 1 1218 0
 2795              		strhi	lr, [r5, #12]
 2796              	.L203:
 2797              		.loc 1 1228 0
 2798 0188 03005EE1 		mov	r0, sl
 2799              	.LVL302:
 2800 018c 0230D585 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 2801 0190 20308383 	.LVL303:
 2802 0194 0230C585 	.L208:
 2803              		.loc 1 1169 0
 2804 0198 0CE08585 		ldr	ip, [r5, #16]
 2805              	.LVL304:
 2806              		.loc 1 1171 0
 2807 019c 0A00A0E1 		cmp	ip, #0
 2808              		bne	.L210
 2809 01a0 F0AF9DE8 		.loc 1 1172 0
 2810              		mov	r1, ip
 2811              		mov	r0, r6
 2812              	.LVL305:
 2813 01a4 10C095E5 		bl	create_chain
 2814              	.LVL306:
 2815              		.loc 1 1173 0
 2816 01a8 00005CE3 		cmp	r0, #1
 2817 01ac 0F00001A 	.LVL307:
 2818              		.loc 1 1172 0
 2819 01b0 0C10A0E1 		mov	ip, r0
 2820 01b4 0600A0E1 	.LVL308:
 2821              		.loc 1 1173 0
 2822 01b8 FEFFFFEB 		bne	.L238
 2823              	.LVL309:
 2824              	.L211:
 2825 01bc 010050E3 		.loc 1 1226 0
 2826              		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2827              		mvn	r3, r3, asl #25
 2828 01c0 00C0A0E1 		mvn	r3, r3, lsr #25
 2829              		strb	r3, [r5, #2]
 2830              	.LVL310:
 2831 01c4 0800001A 	.L237:
 2832              		mov	sl, #8
 2833              		.loc 1 1228 0
 2834              		mov	r0, sl
 2835 01c8 0230D5E5 		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 2836 01cc 833CE0E1 	.LVL311:
 2837 01d0 A33CE0E1 	.L205:
 2838 01d4 0230C5E5 		.loc 1 1152 0
 2839              		mov	r7, r4
 2840              		b	.L206
 2841 01d8 08A0A0E3 	.LVL312:
 2842              	.L238:
 2843 01dc 0A00A0E1 		.loc 1 1174 0
 2844 01e0 F0AF9DE8 		str	r0, [r5, #16]
 2845              	.LVL313:
 2846              	.L210:
 2847              		.loc 1 1177 0
 2848 01e4 0470A0E1 		str	ip, [r5, #20]
 2849 01e8 96FFFFEA 	.L209:
 2850              		.loc 1 1179 0
 2851              		cmp	ip, #0
 2852              		beq	.L236
 2853 01ec 100085E5 		.loc 1 1180 0
 2854              		cmp	r7, r8
 2855              		ldrls	lr, [r5, #8]
 2856              		bls	.L212
 2857 01f0 14C085E5 		ldr	r6, [r5, #4]
 2858              		rsb	r7, r8, r7
 2859              		rsb	r4, r8, #0
 2860 01f4 00005CE3 		b	.L216
 2861 01f8 E0FFFF0A 	.LVL314:
 2862              	.L240:
 2863 01fc 080057E1 		.loc 1 1183 0
 2864 0200 08E09595 		bl	create_chain
 2865 0204 ADFFFF9A 	.LVL315:
 2866 0208 046095E5 		.loc 1 1184 0
 2867 020c 077068E0 		subs	ip, r0, #0
 2868 0210 004068E2 	.LVL316:
 2869 0214 110000EA 		beq	.L239
 2870              	.L215:
 2871              		.loc 1 1192 0
 2872              		add	r1, r7, r4
 2873 0218 FEFFFFEB 	.LVL317:
 2874              		.loc 1 1190 0
 2875              		cmp	ip, #1
 2876 021c 00C050E2 		.loc 1 1180 0
 2877              		add	r2, r1, r8
 2878 0220 A4FFFF0A 		.loc 1 1190 0
 2879              		bls	.L211
 2880              		ldr	r6, [r5, #4]
 2881 0224 041087E0 		ldr	r3, [r6, #12]
 2882              		cmp	ip, r3
 2883              		bcs	.L211
 2884 0228 01005CE3 		.loc 1 1192 0
 2885              		ldr	lr, [r5, #8]
 2886 022c 082081E0 		.loc 1 1180 0
 2887              		cmp	r8, r2
 2888 0230 E4FFFF9A 		.loc 1 1192 0
 2889 0234 046095E5 		add	lr, lr, r8
 2890 0238 0C3096E5 		.loc 1 1191 0
 2891 023c 03005CE1 		str	ip, [r5, #20]
 2892 0240 E0FFFF2A 		.loc 1 1192 0
 2893              		str	lr, [r5, #8]
 2894 0244 08E095E5 		.loc 1 1180 0
 2895              		bcs	.L212
 2896 0248 020058E1 		mov	r7, r1
 2897              	.LVL318:
 2898 024c 08E08EE0 	.L216:
 2899              		.loc 1 1182 0
 2900 0250 14C085E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2901              		tst	r3, #2
 2902 0254 08E085E5 		.loc 1 1183 0
 2903              		mov	r1, ip
 2904 0258 98FFFF2A 		mov	r0, r6
 2905 025c 0170A0E1 	.LVL319:
 2906              		.loc 1 1182 0
 2907              		bne	.L240
 2908              		.loc 1 1189 0
 2909 0260 0230D5E5 		mov	r1, ip
 2910 0264 020013E3 		mov	r0, r6
 2911              		bl	get_cluster
 2912 0268 0C10A0E1 	.LVL320:
 2913 026c 0600A0E1 		mov	ip, r0
 2914              	.LVL321:
 2915              		b	.L215
 2916 0270 E8FFFF1A 	.LVL322:
 2917              	.L235:
 2918 0274 0C10A0E1 		ldr	r3, [r5, #12]
 2919 0278 0600A0E1 		b	.L207
 2920 027c FEFFFFEB 	.LFE23:
 2922 0280 00C0A0E1 		.section	.text.f_write,"ax",%progbits
 2923              		.align	2
 2924 0284 E6FFFFEA 		.global	f_write
 2926              	f_write:
 2927 0288 0C3095E5 	.LFB20:
 2928 028c BDFFFFEA 		.loc 1 996 0
 2929              		@ args = 0, pretend = 0, frame = 4
 2930              		@ frame_needed = 1, uses_anonymous_args = 0
 2931              	.LVL323:
 2932              		mov	ip, sp
 2933              	.LCFI53:
 2934              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 2935              	.LCFI54:
 2936              		sub	fp, ip, #4
 2937              	.LCFI55:
 2938              		sub	sp, sp, #4
 2939              	.LCFI56:
 2940              		.loc 1 996 0
 2941 0000 0DC0A0E1 		mov	r5, r0
 2942              		mov	sl, r3
 2943 0004 F0DF2DE9 		.loc 1 1003 0
 2944              		mov	r3, #0
 2945 0008 04B04CE2 	.LVL324:
 2946              		str	r3, [sl, #0]
 2947 000c 04D04DE2 		.loc 1 996 0
 2948              		mov	r4, r1
 2949              		.loc 1 1004 0
 2950 0010 0050A0E1 		ldr	r0, [r0, #4]
 2951 0014 03A0A0E1 	.LVL325:
 2952              		ldrh	r1, [r5, #0]
 2953 0018 0030A0E3 	.LVL326:
 2954              		.loc 1 996 0
 2955 001c 00308AE5 		mov	r6, r2
 2956              		.loc 1 1004 0
 2957 0020 0140A0E1 		bl	validate
 2958              	.LVL327:
 2959 0024 040090E5 		.loc 1 1005 0
 2960              		subs	r9, r0, #0
 2961 0028 B010D5E1 	.LVL328:
 2962              		bne	.L242
 2963              		.loc 1 1006 0
 2964 002c 0260A0E1 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2965              		tst	r3, #128
 2966 0030 FEFFFFEB 		bne	.L269
 2967              		.loc 1 1007 0
 2968              		tst	r3, #2
 2969 0034 009050E2 		moveq	r9, #6
 2970              		beq	.L242
 2971 0038 5F00001A 		.loc 1 1008 0
 2972              		ldr	r2, [r5, #12]
 2973 003c 0230D5E5 		cmn	r6, r2
 2974 0040 800013E3 		bcs	.L242
 2975 0044 9700001A 		.loc 1 1010 0
 2976              		cmp	r6, #0
 2977 0048 020013E3 		beq	.L268
 2978 004c 0690A003 		.loc 1 1039 0
 2979 0050 5900000A 		add	r3, r5, #36
 2980              		ldr	r1, [r5, #8]
 2981 0054 0C2095E5 		.loc 1 1000 0
 2982 0058 020076E1 		mov	r8, r4
 2983 005c 5600002A 	.LVL329:
 2984              		.loc 1 1039 0
 2985 0060 000056E3 		str	r3, [fp, #-44]
 2986 0064 6F00000A 		b	.L261
 2987              	.LVL330:
 2988 0068 243085E2 	.L271:
 2989 006c 081095E5 		.loc 1 1013 0
 2990              		ldr	lr, [r5, #4]
 2991 0070 0480A0E1 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 2992              		ldrb	r3, [lr, #43]	@ zero_extendqisi2
 2993              		cmp	r3, ip
 2994 0074 2C300BE5 		bhi	.L247
 2995 0078 380000EA 		.loc 1 1014 0
 2996              		cmp	r1, #0
 2997              		bne	.L248
 2998              		.loc 1 1015 0
 2999 007c 04E095E5 		ldr	r0, [r5, #16]
 3000 0080 03C0D5E5 	.LVL331:
 3001 0084 2B30DEE5 		.loc 1 1016 0
 3002 0088 0C0053E1 		cmp	r0, #0
 3003 008c 0F00008A 		beq	.L270
 3004              	.L249:
 3005 0090 000051E3 		.loc 1 1022 0
 3006 0094 5C00001A 		cmp	r0, #1
 3007              		beq	.L251
 3008 0098 100095E5 		ldr	r2, [r5, #4]
 3009              		ldr	r3, [r2, #12]
 3010              		cmp	r3, r0
 3011 009c 000050E3 		bls	.L251
 3012 00a0 6200000A 		.loc 1 1024 0
 3013              		mov	r3, #0
 3014              		.loc 1 1023 0
 3015 00a4 010050E3 		str	r0, [r5, #20]
 3016 00a8 7A00000A 		.loc 1 1024 0
 3017 00ac 042095E5 		strb	r3, [r5, #3]
 3018 00b0 0C3092E5 		mov	lr, r2
 3019 00b4 000053E1 		mov	ip, #0
 3020 00b8 7600009A 	.L247:
 3021              	.LBB37:
 3022 00bc 0030A0E3 	.LBB38:
 3023              		.loc 1 345 0
 3024 00c0 140085E5 		ldr	r2, [r5, #20]
 3025              		.loc 1 346 0
 3026 00c4 0330C5E5 		ldr	r3, [lr, #12]
 3027 00c8 02E0A0E1 		.loc 1 345 0
 3028 00cc 00C0A0E3 		sub	r0, r2, #2
 3029              	.LVL332:
 3030              		.loc 1 346 0
 3031              		sub	r3, r3, #2
 3032              		cmp	r0, r3
 3033 00d0 142095E5 		.loc 1 347 0
 3034              		ldrccb	r2, [lr, #43]	@ zero_extendqisi2
 3035 00d4 0C309EE5 		ldrcc	r3, [lr, #24]
 3036              		mlacc	r1, r0, r2, r3
 3037 00d8 020042E2 		.loc 1 346 0
 3038              		movcs	r1, #0
 3039              	.LBE38:
 3040 00dc 023043E2 	.LBE37:
 3041 00e0 030050E1 		.loc 1 1028 0
 3042              		movs	r4, r6, lsr #9
 3043 00e4 2B20DE35 	.LVL333:
 3044 00e8 18309E35 		.loc 1 1026 0
 3045 00ec 90322130 		add	r7, r1, ip
 3046              		.loc 1 1028 0
 3047 00f0 0010A023 		beq	.L254
 3048              		.loc 1 1029 0
 3049              		ldrb	r2, [lr, #43]	@ zero_extendqisi2
 3050              		add	r3, ip, r4
 3051 00f4 A644B0E1 		cmp	r3, r2
 3052              		.loc 1 1030 0
 3053              		rsbhi	r4, ip, r2
 3054 00f8 0C7081E0 		.loc 1 1031 0
 3055              		and	r3, r4, #255
 3056 00fc 3000000A 		ldrb	r0, [lr, #45]	@ zero_extendqisi2
 3057              	.LVL334:
 3058 0100 2B20DEE5 		mov	r2, r7
 3059 0104 04308CE0 		mov	r1, r8
 3060 0108 020053E1 		bl	disk_write
 3061              		cmp	r0, #0
 3062 010c 02406C80 		bne	.L251
 3063              		.loc 1 1033 0
 3064 0110 FF3004E2 		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 3065 0114 2D00DEE5 		add	r3, r4, r3
 3066              		strb	r3, [r5, #3]
 3067 0118 0720A0E1 		.loc 1 1034 0
 3068 011c 0810A0E1 		mov	r4, r4, asl #9
 3069 0120 FEFFFFEB 	.LVL335:
 3070 0124 000050E3 	.L256:
 3071 0128 5A00001A 		.loc 1 1011 0
 3072              		ldr	r1, [r5, #8]
 3073 012c 0330D5E5 		ldr	r3, [sl, #0]
 3074 0130 033084E0 		add	r1, r1, r4
 3075 0134 0330C5E5 		add	r3, r3, r4
 3076              		.loc 1 1010 0
 3077 0138 8444A0E1 		subs	r6, r6, r4
 3078              		.loc 1 1011 0
 3079              		str	r3, [sl, #0]
 3080              		str	r1, [r5, #8]
 3081 013c 081095E5 		.loc 1 1010 0
 3082 0140 00309AE5 		beq	.L260
 3083 0144 041081E0 		.loc 1 1011 0
 3084 0148 043083E0 		add	r8, r8, r4
 3085              	.LVL336:
 3086 014c 046056E0 	.L261:
 3087              		.loc 1 1012 0
 3088 0150 00308AE5 		mov	r0, r1, asl #23
 3089 0154 081085E5 		mov	r0, r0, lsr #23
 3090              		cmp	r0, #0
 3091 0158 1100000A 		beq	.L271
 3092              	.LVL337:
 3093 015c 048088E0 	.L246:
 3094              		.loc 1 1050 0
 3095              		rsb	r3, r0, #512
 3096              	.LVL338:
 3097 0160 810BA0E1 		cmp	r3, r6
 3098 0164 A00BA0E1 		movcc	r4, r3
 3099 0168 000050E3 		movcs	r4, r6
 3100 016c C2FFFF0A 	.LVL339:
 3101              		.loc 1 1052 0
 3102              		add	r0, r0, #36
 3103              		add	r0, r5, r0
 3104 0170 023C60E2 		mov	r1, r8
 3105              		mov	r2, r4
 3106 0174 060053E1 		bl	memcpy
 3107 0178 0340A031 		.loc 1 1053 0
 3108 017c 0640A021 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3109              		orr	r3, r3, #64
 3110              		strb	r3, [r5, #2]
 3111 0180 240080E2 		b	.L256
 3112 0184 000085E0 	.L260:
 3113 0188 0810A0E1 		.loc 1 1011 0
 3114 018c 0420A0E1 		ldr	r2, [r5, #12]
 3115 0190 FEFFFFEB 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3116              	.LVL340:
 3117 0194 0230D5E5 	.L245:
 3118 0198 403083E3 		.loc 1 1056 0
 3119 019c 0230C5E5 		cmp	r2, r1
 3120 01a0 E5FFFFEA 		.loc 1 1057 0
 3121              		orr	r3, r3, #32
 3122              		.loc 1 1056 0
 3123 01a4 0C2095E5 		strcc	r1, [r5, #12]
 3124 01a8 0230D5E5 		.loc 1 1057 0
 3125              		strb	r3, [r5, #2]
 3126              	.L242:
 3127              		.loc 1 1063 0
 3128 01ac 010052E1 		mov	r0, r9
 3129              	.LVL341:
 3130 01b0 203083E3 		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 3131              	.LVL342:
 3132 01b4 0C108535 	.L254:
 3133              		.loc 1 1037 0
 3134 01b8 0230C5E5 		ldr	r2, [r5, #24]
 3135              		cmp	r2, r7
 3136              		ldreq	r1, [r5, #8]
 3137 01bc 0900A0E1 		beq	.L257
 3138              		.loc 1 1038 0
 3139 01c0 F8AF9DE8 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3140              		tst	r3, #64
 3141              		bne	.L272
 3142              		.loc 1 1043 0
 3143 01c4 182095E5 		add	r1, r5, #8
 3144 01c8 070052E1 		ldmia	r1, {r1, r3}	@ phole ldm
 3145 01cc 08109505 		cmp	r1, r3
 3146 01d0 0800000A 		bcc	.L273
 3147              	.L259:
 3148 01d4 0230D5E5 		.loc 1 1046 0
 3149 01d8 400013E3 		str	r7, [r5, #24]
 3150 01dc 1700001A 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 3151              	.L257:
 3152 01e0 081085E2 		.loc 1 1048 0
 3153 01e4 0A0091E8 		add	r3, ip, #1
 3154 01e8 030051E1 		mov	r0, r1, asl #23
 3155 01ec 2000003A 	.LVL343:
 3156              		strb	r3, [r5, #3]
 3157              		mov	r0, r0, lsr #23
 3158 01f0 187085E5 		b	.L246
 3159 01f4 03C0D5E5 	.LVL344:
 3160              	.L248:
 3161              		.loc 1 1019 0
 3162 01f8 01308CE2 		mov	r0, lr
 3163 01fc 810BA0E1 		ldr	r1, [r5, #20]
 3164              		bl	create_chain
 3165 0200 0330C5E5 	.LVL345:
 3166 0204 A00BA0E1 	.L250:
 3167 0208 D8FFFFEA 		.loc 1 1021 0
 3168              		cmp	r0, #0
 3169              		bne	.L249
 3170              		ldr	r2, [r5, #12]
 3171 020c 0E00A0E1 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3172 0210 141095E5 	.L268:
 3173 0214 FEFFFFEB 		ldr	r1, [r5, #8]
 3174              		b	.L245
 3175              	.L270:
 3176              		.loc 1 1017 0
 3177 0218 000050E3 		mov	r0, lr
 3178 021c A0FFFF1A 	.LVL346:
 3179 0220 0C2095E5 		bl	create_chain
 3180 0224 0230D5E5 		str	r0, [r5, #16]
 3181              	.LVL347:
 3182 0228 081095E5 		b	.L250
 3183 022c DEFFFFEA 	.LVL348:
 3184              	.L272:
 3185              		.loc 1 1039 0
 3186 0230 0E00A0E1 		ldrb	r0, [lr, #45]	@ zero_extendqisi2
 3187              	.LVL349:
 3188 0234 FEFFFFEB 		ldr	r1, [fp, #-44]
 3189 0238 100085E5 		mov	r3, #1
 3190              		bl	disk_write
 3191 023c F5FFFFEA 		cmp	r0, #0
 3192              		bne	.L251
 3193              		.loc 1 1041 0
 3194              		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3195 0240 2D00DEE5 		bic	r3, r3, #64
 3196              		strb	r3, [r5, #2]
 3197 0244 2C101BE5 		.loc 1 1043 0
 3198 0248 0130A0E3 		add	r1, r5, #8
 3199 024c FEFFFFEB 		ldmia	r1, {r1, r3}	@ phole ldm
 3200 0250 000050E3 		cmp	r1, r3
 3201 0254 0F00001A 		bcs	.L259
 3202              	.LVL350:
 3203 0258 0230D5E5 	.L273:
 3204 025c 4030C3E3 		ldr	r3, [r5, #4]
 3205 0260 0230C5E5 		ldr	r1, [fp, #-44]
 3206              		ldrb	r0, [r3, #45]	@ zero_extendqisi2
 3207 0264 081085E2 	.LVL351:
 3208 0268 0A0091E8 		mov	r2, r7
 3209 026c 030051E1 		mov	r3, #1
 3210 0270 DEFFFF2A 		bl	disk_read
 3211              		cmp	r0, #0
 3212              		ldreq	r1, [r5, #8]
 3213 0274 043095E5 		beq	.L259
 3214 0278 2C101BE5 	.LVL352:
 3215 027c 2D00D3E5 	.L251:
 3216              		.loc 1 1061 0
 3217 0280 0720A0E1 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3218 0284 0130A0E3 		mvn	r3, r3, asl #25
 3219 0288 FEFFFFEB 		mvn	r3, r3, lsr #25
 3220 028c 000050E3 		strb	r3, [r5, #2]
 3221 0290 08109505 	.L269:
 3222 0294 D5FFFF0A 		mov	r9, #8
 3223              		.loc 1 1063 0
 3224              		mov	r0, r9
 3225              	.LVL353:
 3226 0298 0230D5E5 		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 3227 029c 833CE0E1 	.LFE20:
 3229 02a4 0230C5E5 		.section	.text.f_read,"ax",%progbits
 3230              		.align	2
 3231 02a8 0890A0E3 		.global	f_read
 3233 02ac 0900A0E1 	f_read:
 3234              	.LFB19:
 3235 02b0 F8AF9DE8 		.loc 1 920 0
 3236              		@ args = 0, pretend = 0, frame = 4
 3237              		@ frame_needed = 1, uses_anonymous_args = 0
 3238              	.LVL354:
 3239              		mov	ip, sp
 3240              	.LCFI57:
 3241              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 3242              	.LCFI58:
 3243              		sub	fp, ip, #4
 3244              	.LCFI59:
 3245              		sub	sp, sp, #4
 3246              	.LCFI60:
 3247              		.loc 1 920 0
 3248 0000 0DC0A0E1 		mov	r5, r0
 3249              		mov	sl, r3
 3250 0004 F0DF2DE9 		.loc 1 927 0
 3251              		mov	r3, #0
 3252 0008 04B04CE2 	.LVL355:
 3253              		str	r3, [sl, #0]
 3254 000c 04D04DE2 		.loc 1 920 0
 3255              		mov	r7, r1
 3256              		.loc 1 928 0
 3257 0010 0050A0E1 		ldr	r0, [r0, #4]
 3258 0014 03A0A0E1 	.LVL356:
 3259              		ldrh	r1, [r5, #0]
 3260 0018 0030A0E3 	.LVL357:
 3261              		.loc 1 920 0
 3262 001c 00308AE5 		mov	r4, r2
 3263              		.loc 1 928 0
 3264 0020 0170A0E1 		bl	validate
 3265              	.LVL358:
 3266 0024 040090E5 		.loc 1 929 0
 3267              		subs	r9, r0, #0
 3268 0028 B010D5E1 	.LVL359:
 3269              		bne	.L275
 3270              		.loc 1 930 0
 3271 002c 0240A0E1 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3272              		tst	r3, #128
 3273 0030 FEFFFFEB 		bne	.L292
 3274              		.loc 1 931 0
 3275              		tst	r3, #1
 3276 0034 009050E2 		moveq	r9, #6
 3277              		beq	.L275
 3278 0038 5E00001A 		.loc 1 932 0
 3279              		add	r2, r5, #12
 3280 003c 0230D5E5 		ldmda	r2, {r2, r3}
 3281 0040 800013E3 		sub	r3, r3, r2
 3282 0044 8300001A 		cmp	r4, r3
 3283              		movcc	r6, r4
 3284 0048 010013E3 		movcs	r6, r3
 3285 004c 0690A003 	.LVL360:
 3286 0050 5800000A 		.loc 1 935 0
 3287              		cmp	r6, #0
 3288 0054 0C2085E2 		.loc 1 932 0
 3289 0058 0C0012E8 		ldr	r2, [r5, #8]
 3290 005c 023043E0 		.loc 1 935 0
 3291 0060 030054E1 		beq	.L275
 3292 0064 0460A031 		.loc 1 959 0
 3293 0068 0360A021 		add	r3, r5, #36
 3294              		.loc 1 924 0
 3295              		mov	r8, r7
 3296 006c 000056E3 	.LVL361:
 3297              		.loc 1 959 0
 3298 0070 082095E5 		str	r3, [fp, #-44]
 3299              		b	.L290
 3300 0074 4F00000A 	.LVL362:
 3301              	.L294:
 3302 0078 243085E2 		.loc 1 938 0
 3303              		ldr	r0, [r5, #4]
 3304 007c 0780A0E1 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 3305              		ldrb	r3, [r0, #43]	@ zero_extendqisi2
 3306              		cmp	r3, ip
 3307 0080 2C300BE5 		bhi	.L279
 3308 0084 360000EA 		.loc 1 939 0
 3309              		cmp	r2, #0
 3310              		ldreq	r0, [r5, #16]
 3311              	.LVL363:
 3312 0088 040095E5 		bne	.L293
 3313 008c 03C0D5E5 	.L281:
 3314 0090 2B30D0E5 		.loc 1 941 0
 3315 0094 0C0053E1 		cmp	r0, #1
 3316 0098 0D00008A 		bls	.L282
 3317              		ldr	r2, [r5, #4]
 3318 009c 000052E3 		ldr	r3, [r2, #12]
 3319 00a0 10009505 		cmp	r0, r3
 3320              		bcs	.L282
 3321 00a4 6400001A 		.loc 1 943 0
 3322              		mov	r3, #0
 3323              		strb	r3, [r5, #3]
 3324 00a8 010050E3 		.loc 1 942 0
 3325 00ac 6500009A 		str	r0, [r5, #20]
 3326 00b0 042095E5 		.loc 1 943 0
 3327 00b4 0C3092E5 		mov	ip, #0
 3328 00b8 030050E1 		mov	r0, r2
 3329 00bc 6100002A 	.LVL364:
 3330              	.L279:
 3331 00c0 0030A0E3 	.LBB39:
 3332 00c4 0330C5E5 	.LBB40:
 3333              		.loc 1 345 0
 3334 00c8 140085E5 		ldr	r2, [r5, #20]
 3335              		.loc 1 346 0
 3336 00cc 00C0A0E3 		ldr	r3, [r0, #12]
 3337 00d0 0200A0E1 		.loc 1 345 0
 3338              		sub	lr, r2, #2
 3339              	.LVL365:
 3340              		.loc 1 346 0
 3341              		sub	r3, r3, #2
 3342              		cmp	lr, r3
 3343 00d4 142095E5 		.loc 1 347 0
 3344              		ldrccb	r2, [r0, #43]	@ zero_extendqisi2
 3345 00d8 0C3090E5 		ldrcc	r3, [r0, #24]
 3346              		mlacc	r1, lr, r2, r3
 3347 00dc 02E042E2 		.loc 1 346 0
 3348              		movcs	r1, #0
 3349              	.LBE40:
 3350 00e0 023043E2 	.LBE39:
 3351 00e4 03005EE1 		.loc 1 947 0
 3352              		movs	r4, r6, lsr #9
 3353 00e8 2B20D035 	.LVL366:
 3354 00ec 18309035 		.loc 1 945 0
 3355 00f0 9E322130 		add	r7, r1, ip
 3356              	.LVL367:
 3357 00f4 0010A023 		.loc 1 947 0
 3358              		beq	.L285
 3359              		.loc 1 948 0
 3360              		ldrb	r2, [r0, #43]	@ zero_extendqisi2
 3361 00f8 A644B0E1 		add	r3, ip, r4
 3362              		cmp	r3, r2
 3363              		.loc 1 949 0
 3364 00fc 0C7081E0 		rsbhi	r4, ip, r2
 3365              		.loc 1 950 0
 3366              		and	r3, r4, #255
 3367 0100 2E00000A 		ldrb	r0, [r0, #45]	@ zero_extendqisi2
 3368              		mov	r2, r7
 3369 0104 2B20D0E5 		mov	r1, r8
 3370 0108 04308CE0 		bl	disk_read
 3371 010c 020053E1 	.LVL368:
 3372              		cmp	r0, #0
 3373 0110 02406C80 		bne	.L282
 3374              		.loc 1 952 0
 3375 0114 FF3004E2 		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 3376 0118 2D00D0E5 		add	r3, r4, r3
 3377 011c 0720A0E1 		strb	r3, [r5, #3]
 3378 0120 0810A0E1 		.loc 1 936 0
 3379 0124 FEFFFFEB 		ldr	r2, [r5, #8]
 3380              		ldr	r3, [sl, #0]
 3381 0128 000050E3 		.loc 1 953 0
 3382 012c 4500001A 		mov	r4, r4, asl #9
 3383              	.LVL369:
 3384 0130 0330D5E5 		.loc 1 936 0
 3385 0134 033084E0 		add	r2, r2, r4
 3386 0138 0330C5E5 		add	r3, r3, r4
 3387              		.loc 1 935 0
 3388 013c 082095E5 		subs	r6, r6, r4
 3389 0140 00309AE5 		.loc 1 936 0
 3390              		str	r3, [sl, #0]
 3391 0144 8444A0E1 		str	r2, [r5, #8]
 3392              		.loc 1 935 0
 3393              		beq	.L275
 3394 0148 042082E0 	.LVL370:
 3395 014c 043083E0 	.L295:
 3396              		.loc 1 936 0
 3397 0150 046056E0 		add	r8, r8, r4
 3398              	.L290:
 3399 0154 00308AE5 		.loc 1 937 0
 3400 0158 082085E5 		mov	r1, r2, asl #23
 3401              		mov	r1, r1, lsr #23
 3402 015c 1500000A 		cmp	r1, #0
 3403              		beq	.L294
 3404              	.LVL371:
 3405              	.L278:
 3406 0160 048088E0 		.loc 1 970 0
 3407              		rsb	r3, r1, #512
 3408              	.LVL372:
 3409 0164 821BA0E1 		cmp	r3, r6
 3410 0168 A11BA0E1 		movcc	r4, r3
 3411 016c 000051E3 		movcs	r4, r6
 3412 0170 C4FFFF0A 	.LVL373:
 3413              		.loc 1 972 0
 3414              		add	r1, r1, #36
 3415              		mov	r2, r4
 3416 0174 023C61E2 		add	r1, r5, r1
 3417              		mov	r0, r8
 3418 0178 060053E1 		bl	memcpy
 3419 017c 0340A031 	.LVL374:
 3420 0180 0640A021 		.loc 1 936 0
 3421              		ldr	r2, [r5, #8]
 3422              		ldr	r3, [sl, #0]
 3423 0184 241081E2 		add	r2, r2, r4
 3424 0188 0420A0E1 		add	r3, r3, r4
 3425 018c 011085E0 		.loc 1 935 0
 3426 0190 0800A0E1 		subs	r6, r6, r4
 3427 0194 FEFFFFEB 		.loc 1 936 0
 3428              		str	r3, [sl, #0]
 3429              		str	r2, [r5, #8]
 3430 0198 082095E5 		.loc 1 935 0
 3431 019c 00309AE5 		bne	.L295
 3432 01a0 042082E0 	.LVL375:
 3433 01a4 043083E0 	.L275:
 3434              		.loc 1 980 0
 3435 01a8 046056E0 		mov	r0, r9
 3436              		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 3437 01ac 00308AE5 	.LVL376:
 3438 01b0 082085E5 	.L285:
 3439              		.loc 1 956 0
 3440 01b4 E9FFFF1A 		ldr	r2, [r5, #24]
 3441              		cmp	r2, r7
 3442              		beq	.L288
 3443              		.loc 1 958 0
 3444 01b8 0900A0E1 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3445 01bc F8AF9DE8 		tst	r3, #64
 3446              		beq	.L289
 3447              		.loc 1 959 0
 3448              		ldrb	r0, [r0, #45]	@ zero_extendqisi2
 3449 01c0 182095E5 		ldr	r1, [fp, #-44]
 3450 01c4 070052E1 		mov	r3, #1
 3451 01c8 1500000A 		bl	disk_write
 3452              	.LVL377:
 3453 01cc 0230D5E5 		cmp	r0, #0
 3454 01d0 400013E3 		bne	.L282
 3455 01d4 0900000A 		.loc 1 961 0
 3456              		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3457 01d8 2D00D0E5 		bic	r3, r3, #64
 3458 01dc 2C101BE5 		strb	r3, [r5, #2]
 3459 01e0 0130A0E3 		ldr	r0, [r5, #4]
 3460 01e4 FEFFFFEB 	.LVL378:
 3461              	.L289:
 3462 01e8 000050E3 		.loc 1 964 0
 3463 01ec 1500001A 		ldrb	r0, [r0, #45]	@ zero_extendqisi2
 3464              		ldr	r1, [fp, #-44]
 3465 01f0 0230D5E5 		mov	r2, r7
 3466 01f4 4030C3E3 		mov	r3, #1
 3467 01f8 0230C5E5 		bl	disk_read
 3468 01fc 040095E5 	.LVL379:
 3469              		cmp	r0, #0
 3470              		bne	.L282
 3471              		.loc 1 966 0
 3472 0200 2D00D0E5 		str	r7, [r5, #24]
 3473 0204 2C101BE5 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 3474 0208 0720A0E1 	.LVL380:
 3475 020c 0130A0E3 	.L288:
 3476 0210 FEFFFFEB 		.loc 1 968 0
 3477              		ldr	r2, [r5, #8]
 3478 0214 000050E3 		add	r3, ip, #1
 3479 0218 0A00001A 		mov	r1, r2, asl #23
 3480              		strb	r3, [r5, #3]
 3481 021c 187085E5 		mov	r1, r1, lsr #23
 3482 0220 03C0D5E5 		b	.L278
 3483              	.LVL381:
 3484              	.L293:
 3485              		.loc 1 939 0
 3486 0224 082095E5 		ldr	r1, [r5, #20]
 3487 0228 01308CE2 		bl	get_cluster
 3488 022c 821BA0E1 	.LVL382:
 3489 0230 0330C5E5 		b	.L281
 3490 0234 A11BA0E1 	.LVL383:
 3491 0238 CDFFFFEA 	.L282:
 3492              		.loc 1 978 0
 3493              		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3494              		mvn	r3, r3, asl #25
 3495 023c 141095E5 		mvn	r3, r3, lsr #25
 3496 0240 FEFFFFEB 		strb	r3, [r5, #2]
 3497              	.LVL384:
 3498 0244 97FFFFEA 	.L292:
 3499              		mov	r9, #8
 3500              		.loc 1 980 0
 3501              		mov	r0, r9
 3502 0248 0230D5E5 	.LVL385:
 3503 024c 833CE0E1 		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 3504 0250 A33CE0E1 	.LFE19:
 3506              		.section	.rodata.str1.4
 3507              		.align	2
 3508 0258 0890A0E3 	.LC2:
 3509              		.ascii	"FAT\000"
 3510 025c 0900A0E1 		.align	2
 3511              	.LC3:
 3512 0260 F8AF9DE8 		.ascii	"FAT32\000"
 3513              		.section	.text.check_fs,"ax",%progbits
 3514              		.align	2
 3516              	check_fs:
 3517              	.LFB14:
 3518 0028 46415400 		.loc 1 623 0
 3519              		@ args = 0, pretend = 0, frame = 0
 3520              		@ frame_needed = 1, uses_anonymous_args = 0
 3521 002c 46415433 	.LVL386:
 3521      3200
 3522 0032 0000     		mov	ip, sp
 3523              	.LCFI61:
 3524              		stmfd	sp!, {r4, fp, ip, lr, pc}
 3525              	.LCFI62:
 3526              		mov	r4, r0
 3527              		mov	r2, r1
 3528              		sub	fp, ip, #4
 3529              	.LCFI63:
 3530              		.loc 1 625 0
 3531 0000 0DC0A0E1 		ldrb	r0, [r0, #45]	@ zero_extendqisi2
 3532              	.LVL387:
 3533 0004 10D82DE9 		add	r1, r4, #48
 3534              	.LVL388:
 3535 0008 0040A0E1 		mov	r3, #1
 3536 000c 0120A0E1 		bl	disk_read
 3537 0010 04B04CE2 	.LVL389:
 3538              		cmp	r0, #0
 3539              		bne	.L297
 3540 0014 2D00D0E5 		.loc 1 628 0
 3541              		ldrb	r1, [r4, #559]	@ zero_extendqisi2
 3542 0018 301084E2 		ldrb	r2, [r4, #558]	@ zero_extendqisi2
 3543              		mov	r3, #43520
 3544 001c 0130A0E3 		orr	r2, r2, r1, asl #8
 3545 0020 FEFFFFEB 		add	r3, r3, #85
 3546              		cmp	r2, r3
 3547 0024 000050E3 		beq	.L302
 3548 0028 0600001A 	.L297:
 3549              		.loc 1 634 0
 3550 002c 2F12D4E5 		mov	r0, #2
 3551 0030 2E22D4E5 		.loc 1 638 0
 3552 0034 AA3CA0E3 		ldmfd	sp, {r4, fp, sp, pc}
 3553 0038 012482E1 	.L302:
 3554 003c 553083E2 		.loc 1 631 0
 3555 0040 030052E1 		add	r0, r4, #102
 3556 0044 0100000A 		ldr	r1, .L303
 3557              		mov	r2, #3
 3558              		bl	memcmp
 3559 0048 0200A0E3 		cmp	r0, #0
 3560              		ldmeqfd	sp, {r4, fp, sp, pc}
 3561 004c 10A89DE8 		.loc 1 634 0
 3562              		add	r0, r4, #130
 3563              		ldr	r1, .L303+4
 3564 0050 660084E2 		mov	r2, #5
 3565 0054 30109FE5 		bl	memcmp
 3566 0058 0320A0E3 		cmp	r0, #0
 3567 005c FEFFFFEB 		ldreqb	r3, [r4, #88]	@ zero_extendqisi2
 3568 0060 000050E3 		movne	r0, #1
 3569 0064 10A89D08 		moveq	r0, r3, lsr #7
 3570              		ldmfd	sp, {r4, fp, sp, pc}
 3571 0068 820084E2 	.L304:
 3572 006c 1C109FE5 		.align	2
 3573 0070 0520A0E3 	.L303:
 3574 0074 FEFFFFEB 		.word	.LC2
 3575 0078 000050E3 		.word	.LC3
 3576 007c 5830D405 	.LFE14:
 3578 0084 A303A001 		.section	.text.auto_mount,"ax",%progbits
 3579 0088 10A89DE8 		.align	2
 3581              	auto_mount:
 3582              	.LFB15:
 3583 008c 28000000 		.loc 1 653 0
 3584 0090 2C000000 		@ args = 0, pretend = 0, frame = 0
 3585              		@ frame_needed = 1, uses_anonymous_args = 0
 3586              	.LVL390:
 3587              		mov	ip, sp
 3588              	.LCFI64:
 3589              		stmfd	sp!, {r4, r5, r6, r7, r8, fp, ip, lr, pc}
 3590              	.LCFI65:
 3591              		sub	fp, ip, #4
 3592              	.LCFI66:
 3593              		.loc 1 657 0
 3594              		ldr	ip, [r0, #0]
 3595              	.LVL391:
 3596 0000 0DC0A0E1 		.loc 1 662 0
 3597              		ldrb	r4, [ip, #0]	@ zero_extendqisi2
 3598 0004 F0D92DE9 		cmp	r4, #32
 3599              		.loc 1 653 0
 3600 0008 04B04CE2 		and	r5, r2, #255
 3601              	.LVL392:
 3602              		.loc 1 662 0
 3603 000c 00C090E5 		bne	.L306
 3604              	.L331:
 3605              		ldrb	r4, [ip, #1]!	@ zero_extendqisi2
 3606 0010 0040DCE5 		cmp	r4, #32
 3607 0014 200054E3 		beq	.L331
 3608              	.L306:
 3609 0018 FF5002E2 		.loc 1 663 0
 3610              		sub	r3, r4, #48
 3611              		and	r2, r3, #255
 3612 001c 0200001A 	.LVL393:
 3613              		.loc 1 664 0
 3614 0020 0140FCE5 		cmp	r2, #9
 3615 0024 200054E3 		bhi	.L308
 3616 0028 FCFFFF0A 		ldrb	r3, [ip, #1]	@ zero_extendqisi2
 3617              		cmp	r3, #58
 3618              		ldreqb	r4, [ip, #2]!	@ zero_extendqisi2
 3619 002c 303044E2 		beq	.L309
 3620 0030 FF2003E2 	.L308:
 3621              		mov	r2, #0
 3622              	.LVL394:
 3623 0034 090052E3 	.L309:
 3624 0038 0300008A 		.loc 1 668 0
 3625 003c 0130DCE5 		cmp	r4, #47
 3626 0040 3A0053E3 		addeq	ip, ip, #1
 3627 0044 0240FC05 		.loc 1 672 0
 3628 0048 0000000A 		cmp	r2, #0
 3629              		.loc 1 669 0
 3630 004c 0020A0E3 		str	ip, [r0, #0]
 3631              		.loc 1 672 0
 3632              		movne	r0, #5
 3633              	.LVL395:
 3634 0050 2F0054E3 		ldmnefd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 3635 0054 01C08C02 		.loc 1 673 0
 3636              		ldr	r3, .L339
 3637 0058 000052E3 		ldr	r7, [r3, #0]
 3638              	.LVL396:
 3639 005c 00C080E5 		.loc 1 674 0
 3640              		cmp	r7, #0
 3641 0060 0500A013 		.loc 1 673 0
 3642              		str	r7, [r1, #0]
 3643 0064 F0A99D18 		.loc 1 674 0
 3644              		moveq	r0, #10
 3645 0068 70339FE5 		ldmeqfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 3646 006c 007093E5 		.loc 1 676 0
 3647              		ldrb	r3, [r7, #42]	@ zero_extendqisi2
 3648              		cmp	r3, #0
 3649 0070 000057E3 		bne	.L333
 3650              	.L314:
 3651 0074 007081E5 		.loc 1 689 0
 3652              		mov	r1, #0
 3653 0078 0A00A003 	.LVL397:
 3654 007c F0A99D08 		mov	r2, #560
 3655              	.LVL398:
 3656 0080 2A30D7E5 		mov	r0, r7
 3657 0084 000053E3 		bl	memset
 3658 0088 1C00001A 	.LVL399:
 3659              		.loc 1 690 0
 3660              		mov	r0, #0
 3661 008c 0010A0E3 		strb	r0, [r7, #45]
 3662              		.loc 1 691 0
 3663 0090 232EA0E3 		bl	disk_initialize
 3664              		.loc 1 692 0
 3665 0094 0700A0E1 		tst	r0, #1
 3666 0098 FEFFFFEB 		movne	r0, #1
 3667              		ldmnefd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 3668              		.loc 1 699 0
 3669 009c 0000A0E3 		cmp	r5, #0
 3670 00a0 2D00C7E5 		beq	.L318
 3671              		tst	r0, #4
 3672 00a4 FEFFFFEB 		bne	.L316
 3673              	.L318:
 3674 00a8 010010E3 		.loc 1 704 0
 3675 00ac 0100A013 		mov	r0, r7
 3676 00b0 F0A99D18 		mov	r1, #0
 3677              		bl	check_fs
 3678 00b4 000055E3 		.loc 1 707 0
 3679 00b8 0100000A 		cmp	r0, #1
 3680 00bc 040010E3 	.LVL400:
 3681 00c0 1600001A 		movne	r8, #0
 3682              	.LVL401:
 3683              		beq	.L334
 3684 00c4 0700A0E1 	.L320:
 3685 00c8 0010A0E3 		.loc 1 715 0
 3686 00cc FEFFFFEB 		cmp	r0, #0
 3687              		bne	.L321
 3688 00d0 010050E3 		ldrb	r2, [r7, #60]	@ zero_extendqisi2
 3689              		ldrb	r3, [r7, #59]	@ zero_extendqisi2
 3690 00d4 0080A013 		orr	r3, r3, r2, asl #8
 3691              		cmp	r3, #512
 3692 00d8 1400000A 		beq	.L335
 3693              	.L321:
 3694              		.loc 1 761 0
 3695 00dc 000050E3 		mov	r0, #11
 3696 00e0 0400001A 	.LVL402:
 3697 00e4 3C20D7E5 		.loc 1 762 0
 3698 00e8 3B30D7E5 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 3699 00ec 023483E1 	.LVL403:
 3700 00f0 020C53E3 	.L333:
 3701 00f4 1C00000A 		.loc 1 677 0
 3702              		ldrb	r0, [r7, #45]	@ zero_extendqisi2
 3703              		bl	disk_status
 3704 00f8 0B00A0E3 	.LVL404:
 3705              		.loc 1 678 0
 3706              		tst	r0, #1
 3707 00fc F0A99DE8 		bne	.L314
 3708              		.loc 1 680 0
 3709              		cmp	r5, #0
 3710              		beq	.L315
 3711 0100 2D00D7E5 		tst	r0, #4
 3712 0104 FEFFFFEB 		beq	.L315
 3713              	.L316:
 3714              		.loc 1 761 0
 3715 0108 010010E3 		mov	r0, #9
 3716 010c DEFFFF1A 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 3717              	.L315:
 3718 0110 000055E3 		mov	r0, #0
 3719 0114 0300000A 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 3720 0118 040010E3 	.LVL405:
 3721 011c 0100000A 	.L334:
 3722              		.loc 1 710 0
 3723              		ldrb	r3, [r7, #498]	@ zero_extendqisi2
 3724 0120 0900A0E3 		cmp	r3, #0
 3725 0124 F0A99DE8 		beq	.L321
 3726              		.loc 1 711 0
 3727 0128 0000A0E3 		ldrb	r1, [r7, #505]	@ zero_extendqisi2
 3728 012c F0A99DE8 		ldrb	r3, [r7, #504]	@ zero_extendqisi2
 3729              		ldrb	r0, [r7, #503]	@ zero_extendqisi2
 3730              	.LVL406:
 3731              		mov	r3, r3, asl #16
 3732 0130 F231D7E5 		ldrb	r2, [r7, #502]	@ zero_extendqisi2
 3733 0134 000053E3 		orr	r3, r3, r1, asl #24
 3734 0138 EEFFFF0A 		orr	r3, r3, r2
 3735              		orr	r8, r3, r0, asl #8
 3736 013c F911D7E5 		.loc 1 712 0
 3737 0140 F831D7E5 		mov	r1, r8
 3738 0144 F701D7E5 		mov	r0, r7
 3739              		bl	check_fs
 3740 0148 0338A0E1 		b	.L320
 3741 014c F621D7E5 	.LVL407:
 3742 0150 013C83E1 	.L335:
 3743 0154 023083E1 		.loc 1 718 0
 3744 0158 008483E1 		ldrb	r2, [r7, #71]	@ zero_extendqisi2
 3745              		ldrb	r3, [r7, #70]	@ zero_extendqisi2
 3746 015c 0810A0E1 		.loc 1 719 0
 3747 0160 0700A0E1 		orrs	r5, r3, r2, asl #8
 3748 0164 FEFFFFEB 	.LVL408:
 3749 0168 DBFFFFEA 		bne	.L322
 3750              		ldrb	r1, [r7, #87]	@ zero_extendqisi2
 3751              		ldrb	r3, [r7, #86]	@ zero_extendqisi2
 3752              		ldrb	r0, [r7, #85]	@ zero_extendqisi2
 3753 016c 4720D7E5 	.LVL409:
 3754 0170 4630D7E5 		mov	r3, r3, asl #16
 3755              		ldrb	r2, [r7, #84]	@ zero_extendqisi2
 3756 0174 025493E1 		orr	r3, r3, r1, asl #24
 3757              		orr	r3, r3, r2
 3758 0178 0700001A 		orr	r5, r3, r0, asl #8
 3759 017c 5710D7E5 	.LVL410:
 3760 0180 5630D7E5 	.L322:
 3761 0184 5500D7E5 		.loc 1 723 0
 3762              		ldrb	r0, [r7, #63]	@ zero_extendqisi2
 3763 0188 0338A0E1 	.LVL411:
 3764 018c 5420D7E5 		ldrb	r3, [r7, #62]	@ zero_extendqisi2
 3765 0190 013C83E1 		.loc 1 725 0
 3766 0194 023083E1 		ldrb	r4, [r7, #66]	@ zero_extendqisi2
 3767 0198 005483E1 		ldrb	ip, [r7, #65]	@ zero_extendqisi2
 3768              		.loc 1 726 0
 3769              		ldrb	r1, [r7, #68]	@ zero_extendqisi2
 3770              		ldrb	r2, [r7, #67]	@ zero_extendqisi2
 3771 019c 3F00D7E5 		.loc 1 723 0
 3772              		orr	r3, r3, r0, asl #8
 3773 01a0 3E30D7E5 		.loc 1 721 0
 3774              		ldrb	lr, [r7, #64]	@ zero_extendqisi2
 3775 01a4 4240D7E5 		.loc 1 724 0
 3776 01a8 41C0D7E5 		ldrb	r0, [r7, #61]	@ zero_extendqisi2
 3777              		.loc 1 725 0
 3778 01ac 4410D7E5 		orr	ip, ip, r4, asl #8
 3779 01b0 4320D7E5 		.loc 1 723 0
 3780              		add	r3, r8, r3
 3781 01b4 003483E1 		.loc 1 727 0
 3782              		orrs	r2, r2, r1, asl #8
 3783 01b8 40E0D7E5 	.LVL412:
 3784              		.loc 1 722 0
 3785 01bc 3D00D7E5 		mul	r6, lr, r5
 3786              	.LVL413:
 3787 01c0 04C48CE1 		.loc 1 723 0
 3788              		str	r3, [r7, #16]
 3789 01c4 033088E0 		.loc 1 724 0
 3790              		strb	r0, [r7, #43]
 3791 01c8 012492E1 		.loc 1 720 0
 3792              		str	r5, [r7, #8]
 3793              		.loc 1 721 0
 3794 01cc 9E0506E0 		strb	lr, [r7, #44]
 3795              		.loc 1 725 0
 3796              		strh	ip, [r7, #2]	@ movhi
 3797 01d0 103087E5 		.loc 1 727 0
 3798              		bne	.L323
 3799 01d4 2B00C7E5 	.LVL414:
 3800              		ldrb	r1, [r7, #83]	@ zero_extendqisi2
 3801 01d8 085087E5 		ldrb	r3, [r7, #82]	@ zero_extendqisi2
 3802              		ldrb	r0, [r7, #81]	@ zero_extendqisi2
 3803 01dc 2CE0C7E5 		mov	r3, r3, asl #16
 3804              		ldrb	r2, [r7, #80]	@ zero_extendqisi2
 3805 01e0 B2C0C7E1 	.LVL415:
 3806              		orr	r3, r3, r1, asl #24
 3807 01e4 0700001A 		orr	r3, r3, r2
 3808              		orr	r2, r3, r0, asl #8
 3809 01e8 5310D7E5 	.LVL416:
 3810 01ec 5230D7E5 	.L323:
 3811 01f0 5100D7E5 		.loc 1 728 0
 3812 01f4 0338A0E1 		ldrb	r3, [r7, #63]	@ zero_extendqisi2
 3813 01f8 5020D7E5 		ldrb	r0, [r7, #62]	@ zero_extendqisi2
 3814              		orr	r0, r0, r3, asl #8
 3815 01fc 013C83E1 		rsb	r0, r0, r2
 3816 0200 023083E1 		rsb	r0, r6, r0
 3817 0204 002483E1 		ldrb	r1, [r7, #43]	@ zero_extendqisi2
 3818              		sub	r0, r0, ip, lsr #4
 3819              		bl	__udivsi3
 3820              	.LVL417:
 3821 0208 3F30D7E5 		.loc 1 732 0
 3822 020c 3E00D7E5 		mov	r3, #4080
 3823 0210 030480E1 		.loc 1 728 0
 3824 0214 020060E0 		add	r0, r0, #2
 3825 0218 000066E0 	.LVL418:
 3826 021c 2B10D7E5 		.loc 1 732 0
 3827 0220 2C0240E0 		add	r3, r3, #6
 3828 0224 FEFFFFEB 		cmp	r0, r3
 3829              		.loc 1 728 0
 3830              		str	r0, [r7, #12]
 3831 0228 FF3EA0E3 		.loc 1 732 0
 3832              		movls	r1, #1
 3833 022c 020080E2 	.LVL419:
 3834              		bhi	.L336
 3835              	.LVL420:
 3836 0230 063083E2 	.L325:
 3837 0234 030050E1 		.loc 1 738 0
 3838              		ldr	r3, [r7, #16]
 3839 0238 0C0087E5 		.loc 1 739 0
 3840              		ldrh	r2, [r7, #2]
 3841 023c 0110A093 		add	r2, r3, r2, lsr #4
 3842              		.loc 1 738 0
 3843 0240 1200008A 		add	r3, r6, r3
 3844              		.loc 1 739 0
 3845              		add	r2, r2, r6
 3846              		.loc 1 738 0
 3847 0244 103097E5 		str	r3, [r7, #20]
 3848              		.loc 1 743 0
 3849 0248 B220D7E1 		mvn	r3, #0
 3850 024c 222283E0 		.loc 1 739 0
 3851              		str	r2, [r7, #24]
 3852 0250 033086E0 		.loc 1 743 0
 3853              		str	r3, [r7, #32]
 3854 0254 062082E0 	.L327:
 3855              		.loc 1 759 0
 3856 0258 143087E5 		strb	r1, [r7, #42]
 3857              		.loc 1 760 0
 3858 025c 0030E0E3 		ldr	r2, .L339+4
 3859              		ldrh	r3, [r2, #0]
 3860 0260 182087E5 		add	r3, r3, #1
 3861              		mov	r3, r3, asl #16
 3862 0264 203087E5 		mov	r3, r3, lsr #16
 3863              		strh	r3, [r2, #0]	@ movhi
 3864              		mov	r0, #0
 3865 0268 2A10C7E5 	.LVL421:
 3866              		strh	r3, [r7, #0]	@ movhi
 3867 026c 70219FE5 		ldmfd	sp, {r4, r5, r6, r7, r8, fp, sp, pc}
 3868 0270 B030D2E1 	.LVL422:
 3869 0274 013083E2 	.L336:
 3870 0278 0338A0E1 		.loc 1 733 0
 3871 027c 2338A0E1 		mov	r3, #65280
 3872 0280 B030C2E1 		add	r3, r3, #246
 3873 0284 0000A0E3 		cmp	r0, r3
 3874              		bls	.L337
 3875 0288 B030C7E1 		.loc 1 736 0
 3876 028c F0A99DE8 		ldrb	lr, [r7, #95]	@ zero_extendqisi2
 3877              		ldrb	r3, [r7, #94]	@ zero_extendqisi2
 3878              		ldrb	r5, [r7, #93]	@ zero_extendqisi2
 3879              		mov	r3, r3, asl #16
 3880 0290 FF3CA0E3 		ldrb	r0, [r7, #92]	@ zero_extendqisi2
 3881 0294 F63083E2 	.LVL423:
 3882 0298 030050E1 		.loc 1 739 0
 3883 029c 4D00009A 		ldrh	r4, [r7, #2]
 3884              		.loc 1 747 0
 3885 02a0 5FE0D7E5 		ldrb	ip, [r7, #97]	@ zero_extendqisi2
 3886 02a4 5E30D7E5 		.loc 1 739 0
 3887 02a8 5D50D7E5 		ldr	r1, [r7, #16]
 3888 02ac 0338A0E1 	.LVL424:
 3889 02b0 5C00D7E5 		.loc 1 747 0
 3890              		ldrb	r2, [r7, #96]	@ zero_extendqisi2
 3891              		.loc 1 736 0
 3892 02b4 B240D7E1 		orr	r3, r3, lr, asl #24
 3893              		orr	r3, r3, r0
 3894 02b8 61C0D7E5 		.loc 1 747 0
 3895              		orr	r2, r2, ip, asl #8
 3896 02bc 101097E5 		.loc 1 736 0
 3897              		orr	r3, r3, r5, asl #8
 3898              		.loc 1 739 0
 3899 02c0 6020D7E5 		add	r1, r1, r4, lsr #4
 3900              		.loc 1 747 0
 3901 02c4 0E3C83E1 		add	r2, r8, r2
 3902 02c8 003083E1 		.loc 1 739 0
 3903              		add	r1, r1, r6
 3904 02cc 0C2482E1 		.loc 1 736 0
 3905              		str	r3, [r7, #20]
 3906 02d0 053483E1 		.loc 1 743 0
 3907              		mvn	r3, #0
 3908 02d4 241281E0 		.loc 1 739 0
 3909              		str	r1, [r7, #24]
 3910 02d8 022088E0 		.loc 1 743 0
 3911              		str	r3, [r7, #32]
 3912 02dc 061081E0 		.loc 1 747 0
 3913              		str	r2, [r7, #36]
 3914 02e0 143087E5 		.loc 1 748 0
 3915              		ldrb	r0, [r7, #45]	@ zero_extendqisi2
 3916 02e4 0030E0E3 		add	r1, r7, #48
 3917              		add	r3, r3, #2
 3918 02e8 181087E5 		bl	disk_read
 3919              		cmp	r0, #0
 3920 02ec 203087E5 		bne	.L328
 3921              		ldrb	r1, [r7, #559]	@ zero_extendqisi2
 3922 02f0 242087E5 		ldrb	r2, [r7, #558]	@ zero_extendqisi2
 3923              		mov	r3, #43520
 3924 02f4 2D00D7E5 		orr	r2, r2, r1, asl #8
 3925 02f8 301087E2 		add	r3, r3, #85
 3926 02fc 023083E2 		cmp	r2, r3
 3927 0300 FEFFFFEB 		beq	.L338
 3928 0304 000050E3 	.L328:
 3929 0308 0600001A 		.loc 1 753 0
 3930 030c 2F12D7E5 		mov	r1, #3
 3931 0310 2E22D7E5 	.LVL425:
 3932 0314 AA3CA0E3 		b	.L327
 3933 0318 012482E1 	.LVL426:
 3934 031c 553083E2 	.L338:
 3935 0320 030052E1 		.loc 1 748 0
 3936 0324 0100000A 		ldrb	r1, [r7, #51]	@ zero_extendqisi2
 3937              		ldrb	r3, [r7, #50]	@ zero_extendqisi2
 3938              		ldrb	r0, [r7, #49]	@ zero_extendqisi2
 3939 0328 0310A0E3 		mov	r3, r3, asl #16
 3940              		ldrb	r2, [r7, #48]	@ zero_extendqisi2
 3941 032c CDFFFFEA 		orr	r3, r3, r1, asl #24
 3942              		orr	r3, r3, r2
 3943              		ldr	r2, .L339+8
 3944              		orr	r3, r3, r0, asl #8
 3945 0330 3310D7E5 		cmp	r3, r2
 3946 0334 3230D7E5 		bne	.L328
 3947 0338 3100D7E5 		ldrb	r1, [r7, #535]	@ zero_extendqisi2
 3948 033c 0338A0E1 		ldrb	r3, [r7, #534]	@ zero_extendqisi2
 3949 0340 3020D7E5 		ldrb	r0, [r7, #533]	@ zero_extendqisi2
 3950 0344 013C83E1 		mov	r3, r3, asl #16
 3951 0348 023083E1 		ldrb	r2, [r7, #532]	@ zero_extendqisi2
 3952 034c 94209FE5 		orr	r3, r3, r1, asl #24
 3953 0350 003483E1 		orr	r3, r3, r2
 3954 0354 020053E1 		ldr	r2, .L339+12
 3955 0358 F2FFFF1A 		orr	r3, r3, r0, asl #8
 3956 035c 1712D7E5 		cmp	r3, r2
 3957 0360 1632D7E5 		bne	.L328
 3958 0364 1502D7E5 		.loc 1 752 0
 3959 0368 0338A0E1 		ldrb	r0, [r7, #543]	@ zero_extendqisi2
 3960 036c 1422D7E5 		ldrb	r2, [r7, #542]	@ zero_extendqisi2
 3961 0370 013C83E1 		ldrb	r6, [r7, #541]	@ zero_extendqisi2
 3962 0374 023083E1 	.LVL427:
 3963 0378 6C209FE5 		ldrb	ip, [r7, #540]	@ zero_extendqisi2
 3964 037c 003483E1 		.loc 1 753 0
 3965 0380 020053E1 		ldrb	r4, [r7, #539]	@ zero_extendqisi2
 3966 0384 E7FFFF1A 		ldrb	r3, [r7, #538]	@ zero_extendqisi2
 3967              		.loc 1 752 0
 3968 0388 1F02D7E5 		mov	r2, r2, asl #16
 3969 038c 1E22D7E5 		.loc 1 753 0
 3970 0390 1D62D7E5 		ldrb	r5, [r7, #537]	@ zero_extendqisi2
 3971              		mov	r3, r3, asl #16
 3972 0394 1CC2D7E5 		ldrb	r1, [r7, #536]	@ zero_extendqisi2
 3973              		.loc 1 752 0
 3974 0398 1B42D7E5 		orr	r2, r2, r0, asl #24
 3975 039c 1A32D7E5 		.loc 1 753 0
 3976              		orr	r3, r3, r4, asl #24
 3977 03a0 0228A0E1 		orr	r3, r3, r1
 3978              		.loc 1 752 0
 3979 03a4 1952D7E5 		orr	r2, r2, ip
 3980 03a8 0338A0E1 		orr	r2, r2, r6, asl #8
 3981 03ac 1812D7E5 		.loc 1 753 0
 3982              		orr	r3, r3, r5, asl #8
 3983 03b0 002C82E1 		.loc 1 752 0
 3984              		str	r2, [r7, #28]
 3985 03b4 043C83E1 		.loc 1 753 0
 3986 03b8 013083E1 		str	r3, [r7, #32]
 3987              		mov	r1, #3
 3988 03bc 0C2082E1 	.LVL428:
 3989 03c0 062482E1 		b	.L327
 3990              	.LVL429:
 3991 03c4 053483E1 	.L337:
 3992              		.loc 1 733 0
 3993 03c8 1C2087E5 		mov	r1, #2
 3994              	.LVL430:
 3995 03cc 203087E5 		b	.L325
 3996 03d0 0310A0E3 	.L340:
 3997              		.align	2
 3998 03d4 A3FFFFEA 	.L339:
 3999              		.word	FatFs
 4000              		.word	fsid
 4001              		.word	1096897106
 4002 03d8 0210A0E3 		.word	1631679090
 4003              	.LFE15:
 4005              		.section	.text.f_getfree,"ax",%progbits
 4006              		.align	2
 4007              		.global	f_getfree
 4009 03e4 00000000 	f_getfree:
 4010 03e8 52526141 	.LFB28:
 4011 03ec 72724161 		.loc 1 1390 0
 4012              		@ args = 0, pretend = 0, frame = 8
 4013              		@ frame_needed = 1, uses_anonymous_args = 0
 4014              	.LVL431:
 4015              		mov	ip, sp
 4016              	.LCFI67:
 4017              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 4018              	.LCFI68:
 4019              		sub	fp, ip, #4
 4020              	.LCFI69:
 4021              		sub	r3, fp, #40
 4022              		sub	sp, sp, #8
 4023              	.LCFI70:
 4024 0000 0DC0A0E1 		.loc 1 1390 0
 4025              		str	r0, [r3, #-4]!
 4026 0004 F0DF2DE9 		str	r1, [fp, #-48]
 4027              		mov	r7, r2
 4028 0008 04B04CE2 		.loc 1 1397 0
 4029              		mov	r1, r2
 4030 000c 28304BE2 	.LVL432:
 4031 0010 08D04DE2 		mov	r0, r3
 4032              	.LVL433:
 4033              		mov	r2, #0
 4034 0014 040023E5 	.LVL434:
 4035 0018 30100BE5 		bl	auto_mount
 4036 001c 0270A0E1 		.loc 1 1398 0
 4037              		subs	r9, r0, #0
 4038 0020 0210A0E1 	.LVL435:
 4039              		bne	.L342
 4040 0024 0300A0E1 		.loc 1 1401 0
 4041              		ldr	r0, [r7, #0]
 4042 0028 0020A0E3 		ldr	r5, [r0, #12]
 4043              	.LVL436:
 4044 002c FEFFFFEB 		ldr	r2, [r0, #32]
 4045              		sub	r3, r5, #2
 4046 0030 009050E2 		cmp	r2, r3
 4047              		.loc 1 1402 0
 4048 0034 3900001A 		ldrls	r3, [fp, #-48]
 4049              		.loc 1 1401 0
 4050 0038 000097E5 		mov	lr, r0
 4051 003c 0C5090E5 		.loc 1 1402 0
 4052              		strls	r2, [r3, #0]
 4053 0040 202090E5 		.loc 1 1401 0
 4054 0044 023045E2 		bls	.L342
 4055 0048 030052E1 		.loc 1 1407 0
 4056              		ldrb	sl, [r0, #42]	@ zero_extendqisi2
 4057 004c 30301B95 	.LVL437:
 4058              		.loc 1 1409 0
 4059 0050 00E0A0E1 		cmp	sl, #1
 4060              		beq	.L360
 4061 0054 00208395 		.loc 1 1416 0
 4062              		ldr	r8, [r0, #16]
 4063 0058 3000009A 	.LVL438:
 4064              		mov	r6, r9
 4065 005c 2AA0D0E5 	.LVL439:
 4066              		mov	r4, r9
 4067              	.LVL440:
 4068 0060 01005AE3 		mov	ip, r9
 4069 0064 3000000A 	.LVL441:
 4070              		b	.L355
 4071 0068 108090E5 	.L350:
 4072              		.loc 1 1427 0
 4073 006c 0960A0E1 		ldrb	r0, [ip, #3]	@ zero_extendqisi2
 4074              		ldrb	r3, [ip, #2]	@ zero_extendqisi2
 4075 0070 0940A0E1 		ldrb	r1, [ip, #1]	@ zero_extendqisi2
 4076              		mov	r3, r3, asl #16
 4077 0074 09C0A0E1 		ldrb	r2, [ip, #0]	@ zero_extendqisi2
 4078              		orr	r3, r3, r0, asl #24
 4079 0078 0D0000EA 		orr	r3, r3, r2
 4080              		orrs	r3, r3, r1, asl #8
 4081              		addeq	r6, r6, #1
 4082 007c 0300DCE5 		.loc 1 1428 0
 4083 0080 0230DCE5 		add	r3, r4, #2
 4084 0084 0110DCE5 		.loc 1 1430 0
 4085 0088 0338A0E1 		subs	r5, r5, #1
 4086 008c 0020DCE5 		.loc 1 1428 0
 4087 0090 003C83E1 		add	ip, ip, #4
 4088 0094 023083E1 		and	r4, r3, #255
 4089 0098 013493E1 	.LVL442:
 4090 009c 01608602 		.loc 1 1430 0
 4091              		beq	.L361
 4092 00a0 023084E2 	.L355:
 4093              		.loc 1 1419 0
 4094 00a4 015055E2 		cmp	r4, #0
 4095              		bne	.L348
 4096 00a8 04C08CE2 		.loc 1 1420 0
 4097 00ac FF4003E2 		mov	r0, lr
 4098              		mov	r1, r8
 4099              		bl	move_window
 4100 00b0 1400000A 	.LVL443:
 4101              		cmp	r0, #0
 4102              		beq	.L362
 4103 00b4 000054E3 		.loc 1 1421 0
 4104 00b8 0700001A 		ldr	lr, [r7, #0]
 4105              		.loc 1 1420 0
 4106 00bc 0E00A0E1 		add	r8, r8, #1
 4107 00c0 0810A0E1 		.loc 1 1421 0
 4108 00c4 FEFFFFEB 		add	ip, lr, #48
 4109              	.LVL444:
 4110 00c8 000050E3 	.L348:
 4111 00cc 2300000A 		.loc 1 1423 0
 4112              		cmp	sl, #2
 4113 00d0 00E097E5 		bne	.L350
 4114              		.loc 1 1424 0
 4115 00d4 018088E2 		ldrb	r2, [ip, #1]	@ zero_extendqisi2
 4116              		ldrb	r3, [ip, #0]	@ zero_extendqisi2
 4117 00d8 30C08EE2 		orrs	r3, r3, r2, asl #8
 4118              		addeq	r6, r6, #1
 4119              		.loc 1 1425 0
 4120              		add	r3, r4, #1
 4121 00dc 02005AE3 		.loc 1 1430 0
 4122 00e0 E5FFFF1A 		subs	r5, r5, #1
 4123              		.loc 1 1425 0
 4124 00e4 0120DCE5 		add	ip, ip, #2
 4125 00e8 0030DCE5 		and	r4, r3, #255
 4126 00ec 023493E1 	.LVL445:
 4127 00f0 01608602 		.loc 1 1430 0
 4128              		bne	.L355
 4129 00f4 013084E2 	.L361:
 4130              		.loc 1 1434 0
 4131 00f8 015055E2 		cmp	sl, #3
 4132              		moveq	r3, #1
 4133 00fc 02C08CE2 		.loc 1 1432 0
 4134 0100 FF4003E2 		str	r6, [lr, #32]
 4135              		.loc 1 1434 0
 4136              		streqb	r3, [lr, #40]
 4137 0104 EAFFFF1A 	.LVL446:
 4138              	.L356:
 4139              		.loc 1 1437 0
 4140 0108 03005AE3 		ldr	r3, [fp, #-48]
 4141 010c 0130A003 		str	r6, [r3, #0]
 4142              	.L342:
 4143 0110 20608EE5 		.loc 1 1439 0
 4144              		mov	r0, r9
 4145 0114 2830CE05 		sub	sp, fp, #40
 4146              		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4147              	.LVL447:
 4148              	.L360:
 4149 0118 30301BE5 		.loc 1 1409 0
 4150 011c 006083E5 		mov	r6, r9
 4151              	.LVL448:
 4152              		mov	r4, #2
 4153 0120 0900A0E1 	.LVL449:
 4154 0124 28D04BE2 	.L346:
 4155 0128 F0AF9DE8 		.loc 1 1412 0
 4156              		mov	r1, r4
 4157              		bl	get_cluster
 4158              		movs	r0, r0, asl #16
 4159 012c 0960A0E1 		.loc 1 1413 0
 4160              		ldr	r0, [r7, #0]
 4161 0130 0240A0E3 		ldr	r3, [r0, #12]
 4162              		add	r4, r4, #1
 4163              		.loc 1 1412 0
 4164              		addeq	r6, r6, #1
 4165 0134 0410A0E1 		.loc 1 1413 0
 4166 0138 FEFFFFEB 		cmp	r4, r3
 4167 013c 0008B0E1 		bcc	.L346
 4168              		.loc 1 1432 0
 4169 0140 000097E5 		str	r6, [r0, #32]
 4170 0144 0C3090E5 		b	.L356
 4171 0148 014084E2 	.LVL450:
 4172              	.L362:
 4173 014c 01608602 		.loc 1 1420 0
 4174              		mov	r9, #8
 4175 0150 030054E1 		b	.L342
 4176 0154 F6FFFF3A 	.LFE28:
 4178 0158 206080E5 		.section	.text.trace_path,"ax",%progbits
 4179 015c EDFFFFEA 		.align	2
 4181              	trace_path:
 4182              	.LFB12:
 4183 0160 0890A0E3 		.loc 1 508 0
 4184 0164 EDFFFFEA 		@ args = 0, pretend = 0, frame = 4
 4185              		@ frame_needed = 1, uses_anonymous_args = 0
 4186              	.LVL451:
 4187              		mov	ip, sp
 4188              	.LCFI71:
 4189              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 4190              	.LCFI72:
 4191              		sub	fp, ip, #4
 4192              	.LCFI73:
 4193              		sub	sp, sp, #4
 4194              	.LCFI74:
 4195              		.loc 1 512 0
 4196 0000 0DC0A0E1 		ldr	r8, [r0, #4]
 4197              	.LVL452:
 4198 0004 F0DF2DE9 		.loc 1 508 0
 4199              		mov	r7, r0
 4200 0008 04B04CE2 		.loc 1 517 0
 4201              		ldrb	r0, [r8, #42]	@ zero_extendqisi2
 4202 000c 04D04DE2 	.LVL453:
 4203              		.loc 1 508 0
 4204              		mov	sl, r2
 4205 0010 048090E5 		.loc 1 517 0
 4206              		cmp	r0, #3
 4207              		.loc 1 516 0
 4208 0014 0070A0E1 		ldr	r2, [r8, #20]
 4209              	.LVL454:
 4210 0018 2A00D8E5 		.loc 1 508 0
 4211              		str	r3, [fp, #-44]
 4212              		.loc 1 521 0
 4213 001c 02A0A0E1 		movne	r3, #0
 4214              	.LVL455:
 4215 0020 030050E3 		.loc 1 508 0
 4216              		mov	r9, r1
 4217 0024 142098E5 		.loc 1 521 0
 4218              		strne	r3, [r7, #12]
 4219              		.loc 1 522 0
 4220 0028 2C300BE5 		strne	r2, [r7, #16]
 4221              		.loc 1 521 0
 4222 002c 0030A013 		strne	r3, [r7, #8]
 4223              		.loc 1 517 0
 4224              		beq	.L399
 4225 0030 0190A0E1 	.LVL456:
 4226              	.L367:
 4227 0034 0C308715 		.loc 1 524 0
 4228              		mov	r3, #0	@ movhi
 4229 0038 10208715 		strh	r3, [r7, #2]	@ movhi
 4230              		.loc 1 526 0
 4231 003c 08308715 		ldrb	r0, [sl, #0]	@ zero_extendqisi2
 4232              	.LVL457:
 4233 0040 5E00000A 		cmp	r0, #0
 4234              		.loc 1 527 0
 4235              		ldreq	r3, [fp, #-44]
 4236              		streq	r0, [r3, #0]
 4237 0044 0030A0E3 		.loc 1 526 0
 4238 0048 B230C7E1 		ldmeqfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4239              	.LVL458:
 4240 004c 0000DAE5 	.L395:
 4241              	.LBB41:
 4242 0050 000050E3 	.LBB47:
 4243              		.loc 1 446 0
 4244 0054 2C301B05 		mov	r1, #32
 4245 0058 00008305 	.LVL459:
 4246              		mov	r0, r9
 4247 005c F8AF9D08 		mov	r2, #11
 4248              	.LVL460:
 4249              		bl	memset
 4250              		mov	r0, #0
 4251              	.LVL461:
 4252              		mov	lr, #24
 4253 0060 2010A0E3 	.LVL462:
 4254              		mov	ip, #8
 4255 0064 0900A0E1 	.LVL463:
 4256 0068 0B20A0E3 		mov	r1, r0
 4257              	.LVL464:
 4258 006c FEFFFFEB 	.L396:
 4259 0070 0000A0E3 		.loc 1 450 0
 4260              		ldrb	r4, [sl], #1	@ zero_extendqisi2
 4261 0074 18E0A0E3 	.LBE47:
 4262              		.loc 1 451 0
 4263 0078 08C0A0E3 		cmp	r4, #47
 4264              		cmpne	r4, #0
 4265 007c 0010A0E1 		beq	.L400
 4266              	.L371:
 4267              		.loc 1 456 0
 4268              		cmp	r4, #127
 4269 0080 0140DAE4 		cmpne	r4, #32
 4270              		bls	.L372
 4271              	.LBB46:
 4272 0084 2F0054E3 		.loc 1 457 0
 4273 0088 00005413 		cmp	r4, #46
 4274 008c 1800000A 		beq	.L401
 4275              	.LBE46:
 4276              		.loc 1 463 0
 4277 0090 7F0054E3 		add	r2, r4, #127
 4278 0094 20005413 		add	r3, r4, #32
 4279 0098 1700009A 		and	r2, r2, #255
 4280              		and	r3, r3, #255
 4281              		cmp	r3, #28
 4282 009c 2E0054E3 		cmphi	r2, #30
 4283 00a0 3B00000A 		bhi	.L376
 4284              		.loc 1 466 0
 4285              		cmp	r1, #0
 4286 00a4 7F2084E2 		cmpeq	r4, #229
 4287 00a8 203084E2 		moveq	r4, #5
 4288 00ac FF2002E2 	.LVL465:
 4289 00b0 FF3003E2 	.LBB45:
 4290 00b4 1C0053E3 		.loc 1 468 0
 4291 00b8 1E005283 		eor	r0, r0, #1
 4292 00bc 1000008A 	.LVL466:
 4293              	.L378:
 4294 00c0 000051E3 		.loc 1 488 0
 4295 00c4 E5005403 		cmp	r1, ip
 4296 00c8 0540A003 		bcs	.L372
 4297              		.loc 1 489 0
 4298              		strb	r4, [r9, r1]
 4299              		.loc 1 450 0
 4300 00cc 010020E2 		ldrb	r4, [sl], #1	@ zero_extendqisi2
 4301              	.LVL467:
 4302              		.loc 1 489 0
 4303              		add	r3, r1, #1
 4304 00d0 0C0051E1 	.LBE45:
 4305 00d4 0800002A 		.loc 1 451 0
 4306              		cmp	r4, #47
 4307 00d8 0140C9E7 		cmpne	r4, #0
 4308              	.LBB44:
 4309 00dc 0140DAE4 		.loc 1 489 0
 4310              		and	r1, r3, #255
 4311              	.LVL468:
 4312 00e0 013081E2 	.LBE44:
 4313              		.loc 1 451 0
 4314              		bne	.L371
 4315 00e4 2F0054E3 	.L400:
 4316 00e8 00005413 	.LBB43:
 4317              		.loc 1 452 0
 4318              		cmp	r1, #0
 4319 00ec FF1003E2 		bne	.L402
 4320              	.L372:
 4321              	.LBE43:
 4322              	.LBE41:
 4323 00f0 E6FFFF1A 		.loc 1 550 0
 4324              		mov	r0, #4
 4325              	.LVL469:
 4326              		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4327 00f4 000051E3 	.LVL470:
 4328 00f8 3C00001A 	.L376:
 4329              	.LBB50:
 4330              	.LBB48:
 4331              		.loc 1 470 0
 4332              		cmp	r4, #34
 4333 00fc 0400A0E3 		beq	.L372
 4334              		.loc 1 471 0
 4335 0100 F8AF9DE8 		cmp	r4, #41
 4336              		bls	.L379
 4337              		.loc 1 472 0
 4338              		cmp	r4, #44
 4339              		bls	.L372
 4340              		.loc 1 473 0
 4341 0104 220054E3 		cmp	r4, #57
 4342 0108 FBFFFF0A 		bls	.L379
 4343              		.loc 1 474 0
 4344 010c 290054E3 		cmp	r4, #63
 4345 0110 1D00009A 		bls	.L372
 4346              		.loc 1 475 0
 4347 0114 2C0054E3 		tst	r0, #1
 4348 0118 F7FFFF9A 		bne	.L379
 4349              		.loc 1 476 0
 4350 011c 390054E3 		cmp	r4, #124
 4351 0120 1900009A 		beq	.L372
 4352              		.loc 1 477 0
 4353 0124 3F0054E3 		sub	r3, r4, #91
 4354 0128 F3FFFF9A 		and	r3, r3, #255
 4355              		cmp	r3, #2
 4356 012c 010010E3 		bls	.L372
 4357 0130 1500001A 		.loc 1 478 0
 4358              		sub	r3, r4, #65
 4359 0134 7C0054E3 		and	r3, r3, #255
 4360 0138 EFFFFF0A 		cmp	r3, #25
 4361              		bhi	.L380
 4362 013c 5B3044E2 		.loc 1 479 0
 4363 0140 FF3003E2 		cmp	ip, #8
 4364 0144 020053E3 		andeq	lr, lr, #247
 4365 0148 EBFFFF9A 	.LVL471:
 4366              		andne	lr, lr, #239
 4367 014c 413044E2 	.LVL472:
 4368 0150 FF3003E2 	.L380:
 4369 0154 190053E3 		.loc 1 480 0
 4370 0158 0200008A 		sub	r3, r4, #97
 4371              		and	r3, r3, #255
 4372 015c 08005CE3 		cmp	r3, #25
 4373 0160 F7E00E02 		bhi	.L379
 4374              		.loc 1 482 0
 4375 0164 EFE00E12 		cmp	ip, #8
 4376              		.loc 1 481 0
 4377              		sub	r3, r4, #32
 4378              		and	r4, r3, #255
 4379 0168 613044E2 	.LVL473:
 4380 016c FF3003E2 		.loc 1 482 0
 4381 0170 190053E3 		orreq	r0, r0, #8
 4382 0174 0400008A 	.LVL474:
 4383              		orrne	r0, r0, #16
 4384 0178 08005CE3 	.LVL475:
 4385              	.L379:
 4386 017c 203044E2 		.loc 1 486 0
 4387 0180 FF4003E2 		and	r0, r0, #254
 4388              	.LVL476:
 4389              		b	.L378
 4390 0184 08008003 	.L401:
 4391              		.loc 1 458 0
 4392 0188 10008013 		eor	r3, r0, #1
 4393              		cmp	r1, #0
 4394              		moveq	r3, #0
 4395              		andne	r3, r3, #1
 4396 018c FE0000E2 		cmp	r3, #0
 4397              		beq	.L372
 4398 0190 CEFFFFEA 		cmp	r1, #8
 4399              		bhi	.L372
 4400              		.loc 1 446 0
 4401 0194 013020E2 		mov	ip, #11
 4402 0198 000051E3 	.LVL477:
 4403 019c 0030A003 		mov	r1, #8
 4404 01a0 01300312 	.LVL478:
 4405 01a4 000053E3 		b	.L396
 4406 01a8 D3FFFF0A 	.LVL479:
 4407 01ac 080051E3 	.L399:
 4408 01b0 D1FFFF8A 	.LBE48:
 4409              	.LBE50:
 4410 01b4 0BC0A0E3 		.loc 1 518 0
 4411              		str	r2, [r7, #8]
 4412 01b8 0810A0E3 		str	r2, [r7, #12]
 4413              	.LBB51:
 4414 01bc AFFFFFEA 	.LBB52:
 4415              		.loc 1 346 0
 4416              		ldr	r3, [r8, #12]
 4417              		.loc 1 345 0
 4418              		sub	r0, r2, #2
 4419              	.LVL480:
 4420 01c0 082087E5 		.loc 1 346 0
 4421 01c4 0C2087E5 		sub	r3, r3, #2
 4422              		cmp	r0, r3
 4423              		.loc 1 347 0
 4424              		ldrccb	r2, [r8, #43]	@ zero_extendqisi2
 4425 01c8 0C3098E5 	.LVL481:
 4426              		ldrcc	r3, [r8, #24]
 4427 01cc 020042E2 		mlacc	r1, r0, r2, r3
 4428              		.loc 1 346 0
 4429              		movcs	r1, #0
 4430 01d0 023043E2 	.LBE52:
 4431 01d4 030050E1 	.LBE51:
 4432              		.loc 1 519 0
 4433 01d8 2B20D835 		str	r1, [r7, #16]
 4434              		b	.L367
 4435 01dc 18309835 	.LVL482:
 4436 01e0 90322130 	.L402:
 4437              	.LBB53:
 4438 01e4 0010A023 	.LBB42:
 4439              		.loc 1 453 0
 4440              		and	r3, lr, r0
 4441              	.LBE42:
 4442 01e8 101087E5 	.LBE53:
 4443 01ec 94FFFFEA 		.loc 1 532 0
 4444              		cmp	r4, #1
 4445              	.LBB54:
 4446              	.LBB49:
 4447              		.loc 1 453 0
 4448              		strb	r3, [r9, #11]
 4449 01f0 00300EE0 	.LBE49:
 4450              	.LBE54:
 4451              		.loc 1 532 0
 4452              		bne	.L393
 4453 01f4 010054E3 		b	.L372
 4454              	.LVL483:
 4455              	.L387:
 4456              		.loc 1 541 0
 4457 01f8 0B30C9E5 		mov	r0, r7
 4458              		bl	next_dir_entry
 4459              		cmp	r0, #0
 4460              		beq	.L398
 4461 01fc 0400001A 	.LVL484:
 4462 0200 BDFFFFEA 	.L393:
 4463              		.loc 1 534 0
 4464              		ldr	r1, [r7, #16]
 4465              	.LVL485:
 4466 0204 0700A0E1 		mov	r0, r8
 4467 0208 FEFFFFEB 	.LVL486:
 4468 020c 000050E3 		bl	move_window
 4469 0210 3100000A 	.LVL487:
 4470              		cmp	r0, #0
 4471              		beq	.L403
 4472              		.loc 1 535 0
 4473 0214 101097E5 		ldrh	r3, [r7, #2]
 4474              		and	r3, r3, #15
 4475 0218 0800A0E1 		mov	r3, r3, asl #5
 4476              		add	r2, r3, #48
 4477 021c FEFFFFEB 		.loc 1 536 0
 4478              		add	r3, r8, r3
 4479 0220 000050E3 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4480 0224 3200000A 		cmp	r3, #0
 4481              		.loc 1 535 0
 4482 0228 B230D7E1 		add	r5, r8, r2
 4483 022c 0F3003E2 		.loc 1 536 0
 4484 0230 8332A0E1 		beq	.L398
 4485 0234 302083E2 		.loc 1 538 0
 4486              		cmp	r3, #229
 4487 0238 033088E0 		beq	.L387
 4488 023c 3030D3E5 		ldrb	r6, [r5, #11]	@ zero_extendqisi2
 4489 0240 000053E3 		tst	r6, #8
 4490              		bne	.L387
 4491 0244 025088E0 		mov	r1, r9
 4492              		mov	r2, #11
 4493 0248 2300000A 		mov	r0, r5
 4494              		bl	memcmp
 4495 024c E50053E3 		subs	ip, r0, #0
 4496 0250 EBFFFF0A 		bne	.L387
 4497 0254 0B60D5E5 		.loc 1 544 0
 4498 0258 080016E3 		cmp	r4, #0
 4499 025c E8FFFF1A 		beq	.L404
 4500 0260 0910A0E1 		.loc 1 545 0
 4501 0264 0B20A0E3 		tst	r6, #16
 4502 0268 0500A0E1 		beq	.L386
 4503 026c FEFFFFEB 		.loc 1 546 0
 4504 0270 00C050E2 		ldrb	r0, [r5, #21]	@ zero_extendqisi2
 4505 0274 E2FFFF1A 		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 4506              		ldrb	r1, [r5, #27]	@ zero_extendqisi2
 4507 0278 000054E3 		ldrb	r3, [r5, #26]	@ zero_extendqisi2
 4508 027c 1E00000A 		orr	r2, r2, r0, asl #8
 4509              		orr	r3, r3, r1, asl #8
 4510 0280 100016E3 		orr	r3, r3, r2, asl #16
 4511 0284 1600000A 	.LVL488:
 4512              		.loc 1 547 0
 4513 0288 1500D5E5 		str	r3, [r7, #8]
 4514 028c 1420D5E5 		str	r3, [r7, #12]
 4515 0290 1B10D5E5 	.LBB55:
 4516 0294 1A30D5E5 	.LBB56:
 4517 0298 002482E1 		.loc 1 346 0
 4518 029c 013483E1 		ldr	r2, [r8, #12]
 4519 02a0 023883E1 		.loc 1 345 0
 4520              		sub	r1, r3, #2
 4521              	.LVL489:
 4522 02a4 083087E5 		.loc 1 346 0
 4523 02a8 0C3087E5 		sub	r2, r2, #2
 4524              		cmp	r1, r2
 4525              		.loc 1 347 0
 4526              		ldrccb	r2, [r8, #43]	@ zero_extendqisi2
 4527 02ac 0C2098E5 		ldrcc	r3, [r8, #24]
 4528              	.LVL490:
 4529 02b0 021043E2 		mlacc	r0, r2, r1, r3
 4530              		.loc 1 346 0
 4531              		movcs	r0, ip
 4532 02b4 022042E2 	.LBE56:
 4533 02b8 020051E1 	.LBE55:
 4534              		.loc 1 549 0
 4535 02bc 2B20D835 		mov	r3, #2	@ movhi
 4536 02c0 18309835 		.loc 1 548 0
 4537              		str	r0, [r7, #16]
 4538 02c4 92312030 		.loc 1 549 0
 4539              		strh	r3, [r7, #2]	@ movhi
 4540 02c8 0C00A021 		b	.L395
 4541              	.LVL491:
 4542              	.L398:
 4543              		.loc 1 542 0
 4544 02cc 0230A0E3 		cmp	r4, #0
 4545              		beq	.L405
 4546 02d0 100087E5 	.L386:
 4547              		.loc 1 550 0
 4548 02d4 B230C7E1 		mov	r0, #3
 4549 02d8 60FFFFEA 		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4550              	.L405:
 4551              		mov	r0, #2
 4552              		.loc 1 551 0
 4553 02dc 000054E3 		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4554 02e0 0100000A 	.L403:
 4555              		.loc 1 534 0
 4556              		add	r0, r0, #8
 4557 02e4 0300A0E3 		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4558 02e8 F8AF9DE8 	.L404:
 4559              		.loc 1 544 0
 4560 02ec 0200A0E3 		ldr	r3, [fp, #-44]
 4561              		mov	r0, r4
 4562 02f0 F8AF9DE8 		str	r5, [r3, #0]
 4563              		ldmfd	sp, {r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4564              	.LFE12:
 4566 02f8 F8AF9DE8 		.section	.text.f_rename,"ax",%progbits
 4567              		.align	2
 4568              		.global	f_rename
 4570 0300 0400A0E1 	f_rename:
 4571 0304 005083E5 	.LFB33:
 4572 0308 F8AF9DE8 		.loc 1 1632 0
 4573              		@ args = 0, pretend = 0, frame = 68
 4574              		@ frame_needed = 1, uses_anonymous_args = 0
 4575              	.LVL492:
 4576              		mov	ip, sp
 4577              	.LCFI75:
 4578              		stmfd	sp!, {r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 4579              	.LCFI76:
 4580              		sub	fp, ip, #4
 4581              	.LCFI77:
 4582              		sub	r3, fp, #36
 4583              		sub	sp, sp, #68
 4584              	.LCFI78:
 4585 0000 0DC0A0E1 		.loc 1 1632 0
 4586              		str	r0, [r3, #-68]!
 4587 0004 F0DD2DE9 		mov	r5, r1
 4588              		.loc 1 1640 0
 4589 0008 04B04CE2 		mov	r0, r3
 4590              	.LVL493:
 4591 000c 24304BE2 		sub	r1, fp, #72
 4592 0010 44D04DE2 	.LVL494:
 4593              		mov	r2, #1
 4594              		bl	auto_mount
 4595 0014 440023E5 		.loc 1 1641 0
 4596 0018 0150A0E1 		cmp	r0, #0
 4597              	.LVL495:
 4598 001c 0300A0E1 		.loc 1 1640 0
 4599              		sub	r4, fp, #76
 4600 0020 48104BE2 		.loc 1 1641 0
 4601              		beq	.L412
 4602 0024 0120A0E3 	.LVL496:
 4603 0028 FEFFFFEB 	.L407:
 4604              	.LVL497:
 4605 002c 000050E3 		.loc 1 1664 0
 4606              		sub	sp, fp, #36
 4607              		ldmfd	sp, {r4, r5, r6, r7, r8, sl, fp, sp, pc}
 4608 0030 4C404BE2 	.LVL498:
 4609              	.L412:
 4610 0034 0100000A 		.loc 1 1643 0
 4611              		sub	r6, fp, #56
 4612              		mov	r0, r4
 4613              	.LVL499:
 4614              		mov	r1, r6
 4615 0038 24D04BE2 		ldr	r2, [fp, #-104]
 4616 003c F0AD9DE8 		sub	r3, fp, #40
 4617              		bl	trace_path
 4618              		.loc 1 1644 0
 4619              		cmp	r0, #0
 4620 0040 38604BE2 	.LVL500:
 4621 0044 0400A0E1 		bne	.L407
 4622              	.LVL501:
 4623 0048 0610A0E1 		.loc 1 1645 0
 4624 004c 68201BE5 		ldr	r1, [fp, #-40]
 4625 0050 28304BE2 	.LVL502:
 4626 0054 FEFFFFEB 		cmp	r1, #0
 4627              		moveq	r0, #2
 4628 0058 000050E3 		beq	.L407
 4629              		.loc 1 1646 0
 4630 005c F5FFFF1A 		ldr	r3, [fp, #-72]
 4631              		.loc 1 1647 0
 4632              		sub	r8, fp, #97
 4633 0060 28101BE5 		add	r1, r1, #11
 4634              		mov	r2, #21
 4635 0064 000051E3 		mov	r0, r8
 4636 0068 0200A003 	.LVL503:
 4637 006c F1FFFF0A 		.loc 1 1649 0
 4638              		sub	r7, fp, #44
 4639 0070 48301BE5 		.loc 1 1646 0
 4640              		ldr	sl, [r3, #4]
 4641 0074 61804BE2 	.LVL504:
 4642 0078 0B1081E2 		.loc 1 1647 0
 4643 007c 1520A0E3 		bl	memcpy
 4644 0080 0800A0E1 		.loc 1 1649 0
 4645              		mov	r2, r5
 4646              		mov	r0, r4
 4647 0084 2C704BE2 		mov	r1, r6
 4648              		mov	r3, r7
 4649 0088 04A093E5 		bl	trace_path
 4650              		.loc 1 1650 0
 4651              		cmp	r0, #0
 4652 008c FEFFFFEB 	.LVL505:
 4653              		moveq	r0, #7
 4654 0090 0520A0E1 		beq	.L407
 4655 0094 0400A0E1 		.loc 1 1651 0
 4656 0098 0610A0E1 		cmp	r0, #2
 4657 009c 0730A0E1 		bne	.L407
 4658 00a0 FEFFFFEB 		.loc 1 1652 0
 4659              		mov	r0, r4
 4660 00a4 000050E3 	.LVL506:
 4661              		mov	r1, r7
 4662 00a8 0700A003 		bl	reserve_direntry
 4663 00ac E1FFFF0A 		.loc 1 1653 0
 4664              		cmp	r0, #0
 4665 00b0 020050E3 	.LVL507:
 4666 00b4 DFFFFF1A 		bne	.L407
 4667              		.loc 1 1655 0
 4668 00b8 0400A0E1 		ldr	r0, [fp, #-44]
 4669              	.LVL508:
 4670 00bc 0710A0E1 		mov	r1, r8
 4671 00c0 FEFFFFEB 		mov	r2, #21
 4672              		add	r0, r0, #11
 4673 00c4 000050E3 		bl	memcpy
 4674              		.loc 1 1656 0
 4675 00c8 DAFFFF1A 		mov	r1, r6
 4676              		mov	r2, #11
 4677 00cc 2C001BE5 		ldr	r0, [fp, #-44]
 4678              		bl	memcpy
 4679 00d0 0810A0E1 		.loc 1 1657 0
 4680 00d4 1520A0E3 		ldr	r3, [fp, #-44]
 4681 00d8 0B0080E2 		ldrb	r2, [fp, #-45]	@ zero_extendqisi2
 4682 00dc FEFFFFEB 		strb	r2, [r3, #12]
 4683              		.loc 1 1658 0
 4684 00e0 0610A0E1 		ldr	r0, [fp, #-72]
 4685 00e4 0B20A0E3 		mov	r3, #1
 4686 00e8 2C001BE5 		strb	r3, [r0, #46]
 4687 00ec FEFFFFEB 		.loc 1 1660 0
 4688              		mov	r1, sl
 4689 00f0 2C301BE5 		bl	move_window
 4690 00f4 2D205BE5 		cmp	r0, #0
 4691 00f8 0C20C3E5 		addeq	r0, r0, #8
 4692              	.LVL509:
 4693 00fc 48001BE5 		beq	.L407
 4694 0100 0130A0E3 		.loc 1 1661 0
 4695 0104 2E30C0E5 		ldr	r3, [fp, #-40]
 4696              		mvn	r2, #26
 4697 0108 0A10A0E1 		strb	r2, [r3, #0]
 4698 010c FEFFFFEB 		.loc 1 1663 0
 4699 0110 000050E3 		ldr	r0, [fp, #-72]
 4700 0114 08008002 	.LVL510:
 4701              		bl	sync
 4702 0118 C6FFFF0A 		b	.L407
 4703              	.LFE33:
 4705 0120 1A20E0E3 		.section	.text.f_utime,"ax",%progbits
 4706 0124 0020C3E5 		.align	2
 4707              		.global	f_utime
 4709              	f_utime:
 4710 012c FEFFFFEB 	.LFB32:
 4711 0130 C0FFFFEA 		.loc 1 1598 0
 4712              		@ args = 0, pretend = 0, frame = 40
 4713              		@ frame_needed = 1, uses_anonymous_args = 0
 4714              	.LVL511:
 4715              		mov	ip, sp
 4716              	.LCFI79:
 4717              		stmfd	sp!, {r4, fp, ip, lr, pc}
 4718              	.LCFI80:
 4719              		sub	fp, ip, #4
 4720              	.LCFI81:
 4721              		sub	r3, fp, #16
 4722              		sub	sp, sp, #40
 4723              	.LCFI82:
 4724 0000 0DC0A0E1 		.loc 1 1598 0
 4725              		str	r0, [r3, #-40]!
 4726 0004 10D82DE9 		mov	r4, r1
 4727              		.loc 1 1605 0
 4728 0008 04B04CE2 		mov	r0, r3
 4729              	.LVL512:
 4730 000c 10304BE2 		sub	r1, fp, #48
 4731 0010 28D04DE2 	.LVL513:
 4732              		mov	r2, #1
 4733              		bl	auto_mount
 4734 0014 280023E5 		.loc 1 1606 0
 4735 0018 0140A0E1 		cmp	r0, #0
 4736              	.LVL514:
 4737 001c 0300A0E1 		beq	.L417
 4738              	.LVL515:
 4739 0020 30104BE2 	.L414:
 4740              	.LVL516:
 4741 0024 0120A0E3 		.loc 1 1619 0
 4742 0028 FEFFFFEB 		sub	sp, fp, #16
 4743              		ldmfd	sp, {r4, fp, sp, pc}
 4744 002c 000050E3 	.LVL517:
 4745              	.L417:
 4746 0030 0100000A 		.loc 1 1607 0
 4747              		sub	r0, fp, #52
 4748              	.LVL518:
 4749              		sub	r1, fp, #32
 4750              		ldr	r2, [fp, #-56]
 4751 0034 10D04BE2 		sub	r3, fp, #20
 4752 0038 10A89DE8 		bl	trace_path
 4753              		.loc 1 1608 0
 4754              		cmp	r0, #0
 4755              	.LVL519:
 4756 003c 34004BE2 		bne	.L414
 4757              	.LVL520:
 4758 0040 20104BE2 		.loc 1 1609 0
 4759 0044 38201BE5 		ldr	r3, [fp, #-20]
 4760 0048 14304BE2 	.LVL521:
 4761 004c FEFFFFEB 		cmp	r3, #0
 4762              		moveq	r0, #4
 4763 0050 000050E3 		beq	.L414
 4764              		.loc 1 1612 0
 4765 0054 F6FFFF1A 		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 4766              		strb	r2, [r3, #22]
 4767              		ldrh	r3, [r4, #6]
 4768 0058 14301BE5 		ldr	r2, [fp, #-20]
 4769              		mov	r3, r3, lsr #8
 4770 005c 000053E3 		strb	r3, [r2, #23]
 4771 0060 0400A003 		.loc 1 1613 0
 4772 0064 F2FFFF0A 		ldr	r2, [fp, #-20]
 4773              		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 4774 0068 0620D4E5 		strb	r1, [r2, #24]
 4775 006c 1620C3E5 		ldrh	r3, [r4, #4]
 4776 0070 B630D4E1 		ldr	r2, [fp, #-20]
 4777 0074 14201BE5 		mov	r3, r3, lsr #8
 4778 0078 2334A0E1 		strb	r3, [r2, #25]
 4779 007c 1730C2E5 		.loc 1 1614 0
 4780              		ldr	r0, [fp, #-48]
 4781 0080 14201BE5 	.LVL522:
 4782 0084 0410D4E5 		bl	sync
 4783 0088 1810C2E5 		b	.L414
 4784 008c B430D4E1 	.LFE32:
 4786 0094 2334A0E1 		.section	.text.f_chmod,"ax",%progbits
 4787 0098 1930C2E5 		.align	2
 4788              		.global	f_chmod
 4790              	f_chmod:
 4791 00a0 FEFFFFEB 	.LFB31:
 4792 00a4 E2FFFFEA 		.loc 1 1564 0
 4793              		@ args = 0, pretend = 0, frame = 40
 4794              		@ frame_needed = 1, uses_anonymous_args = 0
 4795              	.LVL523:
 4796              		mov	ip, sp
 4797              	.LCFI83:
 4798              		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 4799              	.LCFI84:
 4800              		sub	fp, ip, #4
 4801              	.LCFI85:
 4802              		sub	r3, fp, #20
 4803              		sub	sp, sp, #40
 4804              	.LCFI86:
 4805 0000 0DC0A0E1 		.loc 1 1564 0
 4806              		str	r0, [r3, #-40]!
 4807 0004 30D82DE9 		mov	ip, r1
 4808              		mov	r5, r2
 4809 0008 04B04CE2 		.loc 1 1571 0
 4810              		mov	r0, r3
 4811 000c 14304BE2 	.LVL524:
 4812 0010 28D04DE2 		sub	r1, fp, #52
 4813              	.LVL525:
 4814              		mov	r2, #1
 4815 0014 280023E5 	.LVL526:
 4816 0018 01C0A0E1 		.loc 1 1564 0
 4817 001c 0250A0E1 		and	r4, ip, #255
 4818              	.LVL527:
 4819 0020 0300A0E1 		.loc 1 1571 0
 4820              		bl	auto_mount
 4821 0024 34104BE2 		.loc 1 1572 0
 4822              		cmp	r0, #0
 4823 0028 0120A0E3 	.LVL528:
 4824              		beq	.L422
 4825              	.LVL529:
 4826 002c FF400CE2 	.L419:
 4827              	.LVL530:
 4828              		.loc 1 1585 0
 4829 0030 FEFFFFEB 		sub	sp, fp, #20
 4830              		ldmfd	sp, {r4, r5, fp, sp, pc}
 4831 0034 000050E3 	.LVL531:
 4832              	.L422:
 4833 0038 0100000A 		.loc 1 1573 0
 4834              		sub	r0, fp, #56
 4835              	.LVL532:
 4836              		sub	r1, fp, #36
 4837              		ldr	r2, [fp, #-60]
 4838 003c 14D04BE2 		sub	r3, fp, #24
 4839 0040 30A89DE8 		bl	trace_path
 4840              		.loc 1 1574 0
 4841              		cmp	r0, #0
 4842              	.LVL533:
 4843 0044 38004BE2 		bne	.L419
 4844              	.LVL534:
 4845 0048 24104BE2 		.loc 1 1575 0
 4846 004c 3C201BE5 		ldr	r0, [fp, #-24]
 4847 0050 18304BE2 	.LVL535:
 4848 0054 FEFFFFEB 		cmp	r0, #0
 4849              		addeq	r0, r0, #4
 4850 0058 000050E3 	.LVL536:
 4851              		beq	.L419
 4852 005c F6FFFF1A 		.loc 1 1579 0
 4853              		ldrb	r1, [r0, #11]	@ zero_extendqisi2
 4854              	.LVL537:
 4855 0060 18001BE5 		.loc 1 1578 0
 4856              		and	r3, r5, #39
 4857 0064 000050E3 	.LVL538:
 4858 0068 04008002 		.loc 1 1579 0
 4859              		mvn	r2, r3
 4860 006c F2FFFF0A 		and	r2, r2, r1
 4861              		and	r3, r3, r4
 4862 0070 0B10D0E5 	.LVL539:
 4863              		orr	r2, r2, r3
 4864              		strb	r2, [r0, #11]
 4865 0074 273005E2 		.loc 1 1580 0
 4866              		ldr	r0, [fp, #-52]
 4867              		bl	sync
 4868 0078 0320E0E1 		b	.L419
 4869 007c 012002E0 	.LFE31:
 4871              		.section	.text.f_mkdir,"ax",%progbits
 4872 0084 032082E1 		.align	2
 4873 0088 0B20C0E5 		.global	f_mkdir
 4875 008c 34001BE5 	f_mkdir:
 4876 0090 FEFFFFEB 	.LFB30:
 4877 0094 E8FFFFEA 		.loc 1 1497 0
 4878              		@ args = 0, pretend = 0, frame = 64
 4879              		@ frame_needed = 1, uses_anonymous_args = 0
 4880              	.LVL540:
 4881              		mov	ip, sp
 4882              	.LCFI87:
 4883              		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 4884              	.LCFI88:
 4885              		sub	fp, ip, #4
 4886              	.LCFI89:
 4887              		sub	r3, fp, #40
 4888              		sub	sp, sp, #64
 4889              	.LCFI90:
 4890 0000 0DC0A0E1 		.loc 1 1497 0
 4891              		str	r0, [r3, #-40]!
 4892 0004 F0DF2DE9 		.loc 1 1505 0
 4893              		sub	r1, fp, #72
 4894 0008 04B04CE2 		mov	r0, r3
 4895              	.LVL541:
 4896 000c 28304BE2 		mov	r2, #1
 4897 0010 40D04DE2 		bl	auto_mount
 4898              		.loc 1 1506 0
 4899              		subs	r4, r0, #0
 4900 0014 280023E5 	.LVL542:
 4901              		.loc 1 1505 0
 4902 0018 48104BE2 		sub	r5, fp, #76
 4903 001c 0300A0E1 		.loc 1 1506 0
 4904              		beq	.L436
 4905 0020 0120A0E3 	.LVL543:
 4906 0024 FEFFFFEB 	.L424:
 4907              		.loc 1 1550 0
 4908 0028 004050E2 		mov	r0, r4
 4909              		sub	sp, fp, #40
 4910              		ldmfd	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
 4911 002c 4C504BE2 	.LVL544:
 4912              	.L436:
 4913 0030 0200000A 		.loc 1 1507 0
 4914              		sub	r7, fp, #56
 4915              		sub	r6, fp, #44
 4916              		mov	r0, r5
 4917 0034 0400A0E1 		mov	r1, r7
 4918 0038 28D04BE2 		ldr	r2, [fp, #-80]
 4919 003c F0AF9DE8 		mov	r3, r6
 4920              		bl	trace_path
 4921              		.loc 1 1508 0
 4922              		subs	r4, r0, #0
 4923 0040 38704BE2 		moveq	r4, #7
 4924 0044 2C604BE2 		beq	.L424
 4925 0048 0500A0E1 	.LVL545:
 4926 004c 0710A0E1 		.loc 1 1509 0
 4927 0050 50201BE5 		cmp	r4, #2
 4928 0054 0630A0E1 		bne	.L424
 4929 0058 FEFFFFEB 		.loc 1 1511 0
 4930              		mov	r0, r5
 4931 005c 004050E2 		mov	r1, r6
 4932 0060 0740A003 		bl	reserve_direntry
 4933 0064 F2FFFF0A 		.loc 1 1512 0
 4934              		subs	r4, r0, #0
 4935              		bne	.L424
 4936 0068 020054E3 		.loc 1 1513 0
 4937 006c F0FFFF1A 		ldr	r3, [fp, #-72]
 4938              		.loc 1 1514 0
 4939 0070 0500A0E1 		mov	r1, r4
 4940 0074 0610A0E1 		mov	r0, r3
 4941 0078 FEFFFFEB 		.loc 1 1513 0
 4942              		ldr	r9, [r3, #4]
 4943 007c 004050E2 	.LVL546:
 4944 0080 EBFFFF1A 		.loc 1 1514 0
 4945              		bl	create_chain
 4946 0084 48301BE5 		.loc 1 1515 0
 4947              		cmp	r0, #1
 4948 0088 0410A0E1 	.LVL547:
 4949 008c 0300A0E1 		.loc 1 1514 0
 4950              		mov	r8, r0
 4951 0090 049093E5 	.LVL548:
 4952              		.loc 1 1515 0
 4953              		beq	.L426
 4954 0094 FEFFFFEB 		.loc 1 1516 0
 4955              		ldr	r0, [fp, #-72]
 4956 0098 010050E3 	.LBB57:
 4957              	.LBB58:
 4958              		.loc 1 346 0
 4959 009c 0080A0E1 		ldr	r3, [r0, #12]
 4960              		.loc 1 345 0
 4961              		sub	r1, r8, #2
 4962 00a0 0E00000A 	.LVL549:
 4963              		.loc 1 346 0
 4964 00a4 48001BE5 		sub	r3, r3, #2
 4965              		cmp	r1, r3
 4966              		bcs	.L427
 4967              		.loc 1 347 0
 4968 00a8 0C3090E5 		ldrb	r2, [r0, #43]	@ zero_extendqisi2
 4969              		ldr	r3, [r0, #24]
 4970 00ac 021048E2 		mla	r5, r2, r1, r3
 4971              	.LVL550:
 4972              	.LBE58:
 4973 00b0 023043E2 	.LBE57:
 4974 00b4 030051E1 		.loc 1 1517 0
 4975 00b8 2600002A 		cmp	r5, #0
 4976              		beq	.L427
 4977 00bc 2B20D0E5 		.loc 1 1518 0
 4978 00c0 183090E5 		mov	r1, r5
 4979 00c4 923125E0 	.LVL551:
 4980              		bl	move_window
 4981              		cmp	r0, #0
 4982              		bne	.L437
 4983              	.LVL552:
 4984 00c8 000055E3 	.L426:
 4985 00cc 2100000A 		.loc 1 1549 0
 4986              		mov	r4, #8
 4987 00d0 0510A0E1 		b	.L424
 4988              	.LVL553:
 4989 00d4 FEFFFFEB 	.L437:
 4990 00d8 000050E3 		.loc 1 1520 0
 4991 00dc 0100001A 		ldr	sl, [fp, #-72]
 4992              		add	r6, sl, #48
 4993              	.LVL554:
 4994              		.loc 1 1521 0
 4995 00e0 0840A0E3 		mov	r2, #512
 4996 00e4 D2FFFFEA 		mov	r1, r4
 4997              		mov	r0, r6
 4998              		bl	memset
 4999              		.loc 1 1522 0
 5000 00e8 48A01BE5 		ldr	r2, [fp, #-72]
 5001 00ec 30608AE2 		ldrb	r3, [r2, #43]	@ zero_extendqisi2
 5002              		cmp	r3, #1
 5003              		bls	.L428
 5004 00f0 022CA0E3 		mov	r4, #1
 5005 00f4 0410A0E1 	.LVL555:
 5006 00f8 0600A0E1 		b	.L429
 5007 00fc FEFFFFEB 	.L438:
 5008              		ldr	r2, [fp, #-72]
 5009 0100 48201BE5 		ldrb	r3, [r2, #43]	@ zero_extendqisi2
 5010 0104 2B30D2E5 		cmp	r3, r4
 5011 0108 010053E3 		bls	.L428
 5012 010c 1300009A 	.L429:
 5013 0110 0140A0E3 		.loc 1 1523 0
 5014              		add	r5, r5, #1
 5015 0114 030000EA 		ldrb	r0, [r2, #45]	@ zero_extendqisi2
 5016              		mov	r3, #1
 5017 0118 48201BE5 		mov	r1, r6
 5018 011c 2B30D2E5 		mov	r2, r5
 5019 0120 040053E1 		bl	disk_write
 5020 0124 0D00009A 		.loc 1 1522 0
 5021              		add	r3, r4, #1
 5022              		.loc 1 1523 0
 5023 0128 015085E2 		cmp	r0, #0
 5024 012c 2D00D2E5 		.loc 1 1522 0
 5025 0130 0130A0E3 		and	r4, r3, #255
 5026 0134 0610A0E1 		.loc 1 1523 0
 5027 0138 0520A0E1 		beq	.L438
 5028 013c FEFFFFEB 		.loc 1 1549 0
 5029              		mov	r4, #8
 5030 0140 013084E2 	.LVL556:
 5031              		b	.L424
 5032 0144 000050E3 	.LVL557:
 5033              	.L427:
 5034 0148 FF4003E2 		mov	r4, #6
 5035              		b	.L424
 5036 014c F1FFFF0A 	.LVL558:
 5037              	.L428:
 5038 0150 0840A0E3 		.loc 1 1526 0
 5039              		mov	r1, #32
 5040 0154 B6FFFFEA 		mov	r2, #11
 5041              		mov	r0, r6
 5042              		bl	memset
 5043 0158 0640A0E3 		.loc 1 1527 0
 5044 015c B4FFFFEA 		mov	r4, #46
 5045              	.LVL559:
 5046              		.loc 1 1528 0
 5047              		mov	r3, #16
 5048 0160 2010A0E3 		strb	r3, [sl, #59]
 5049 0164 0B20A0E3 		.loc 1 1527 0
 5050 0168 0600A0E1 		strb	r4, [sl, #48]
 5051 016c FEFFFFEB 		.loc 1 1529 0
 5052              		bl	get_fattime
 5053 0170 2E40A0E3 		.loc 1 1530 0
 5054              		mov	r2, r0, lsr #16
 5055              	.LVL560:
 5056 0174 1030A0E3 		mov	r3, r0, asl #16
 5057 0178 3B30CAE5 		and	r2, r2, #255
 5058              		str	r2, [fp, #-96]
 5059 017c 3040CAE5 		mov	r3, r3, lsr #24
 5060              		mov	r2, r0, lsr #24
 5061 0180 FEFFFFEB 		and	r0, r0, #255
 5062              	.LVL561:
 5063 0184 2028A0E1 		str	r3, [fp, #-100]
 5064              		str	r2, [fp, #-92]
 5065 0188 0038A0E1 		str	r0, [fp, #-104]
 5066 018c FF2002E2 		strb	r0, [r6, #22]
 5067 0190 60200BE5 		strb	r3, [r6, #23]
 5068 0194 233CA0E1 		ldr	r3, [fp, #-96]
 5069 0198 202CA0E1 		.loc 1 1531 0
 5070 019c FF0000E2 		mov	r1, r6
 5071              		.loc 1 1530 0
 5072 01a0 64300BE5 		strb	r3, [r6, #24]
 5073 01a4 5C200BE5 		.loc 1 1531 0
 5074 01a8 68000BE5 		add	r0, r6, #32
 5075 01ac 1600C6E5 		.loc 1 1530 0
 5076 01b0 1730C6E5 		strb	r2, [r6, #25]
 5077 01b4 60301BE5 		.loc 1 1531 0
 5078              		mov	r2, #32
 5079 01b8 0610A0E1 		bl	memcpy
 5080              		.loc 1 1532 0
 5081 01bc 1830C6E5 		mov	r3, r8, asl #16
 5082              		.loc 1 1533 0
 5083 01c0 200086E2 		mov	r2, r8, lsr #16
 5084              		.loc 1 1532 0
 5085 01c4 1920C6E5 		mov	r3, r3, lsr #24
 5086              		and	r8, r8, #255
 5087 01c8 2020A0E3 	.LVL562:
 5088 01cc FEFFFFEB 		str	r8, [fp, #-88]
 5089              		str	r3, [fp, #-84]
 5090 01d0 0838A0E1 		.loc 1 1531 0
 5091              		strb	r4, [sl, #81]
 5092 01d4 2828A0E1 		.loc 1 1533 0
 5093              		mov	r5, r2, lsr #8
 5094 01d8 233CA0E1 	.LVL563:
 5095 01dc FF8008E2 		and	r8, r2, #255
 5096              		.loc 1 1532 0
 5097 01e0 58800BE5 		ldr	r2, [fp, #-88]
 5098 01e4 54300BE5 		strb	r2, [r6, #26]
 5099              		strb	r3, [r6, #27]
 5100 01e8 5140CAE5 		.loc 1 1533 0
 5101              		strb	r8, [r6, #20]
 5102 01ec 2254A0E1 		strb	r5, [r6, #21]
 5103              		.loc 1 1535 0
 5104 01f0 FF8002E2 		ldr	r2, [fp, #-72]
 5105              		ldrb	r3, [r2, #42]	@ zero_extendqisi2
 5106 01f4 58201BE5 		cmp	r3, #3
 5107 01f8 1A20C6E5 		.loc 1 1534 0
 5108 01fc 1B30C6E5 		ldr	r1, [fp, #-68]
 5109              	.LVL564:
 5110 0200 1480C6E5 		.loc 1 1535 0
 5111 0204 1550C6E5 		beq	.L430
 5112              	.L432:
 5113 0208 48201BE5 		mov	r2, r1, lsr #16
 5114 020c 2A30D2E5 		mov	r3, r1, asl #16
 5115 0210 030053E3 		mov	ip, r3, lsr #24
 5116              		mov	r0, r2, lsr #8
 5117 0214 44101BE5 		and	r3, r1, #255
 5118              		and	r2, r2, #255
 5119              	.L431:
 5120 0218 3800000A 		.loc 1 1536 0
 5121              		strb	r3, [r6, #58]
 5122 021c 2128A0E1 		strb	ip, [r6, #59]
 5123 0220 0138A0E1 		.loc 1 1537 0
 5124 0224 23CCA0E1 		strb	r2, [r6, #52]
 5125 0228 2204A0E1 		strb	r0, [r6, #53]
 5126 022c FF3001E2 		.loc 1 1538 0
 5127 0230 FF2002E2 		ldr	r0, [fp, #-72]
 5128              		mov	r3, #1
 5129              		strb	r3, [r0, #46]
 5130 0234 3A30C6E5 		.loc 1 1540 0
 5131 0238 3BC0C6E5 		mov	r1, r9
 5132              	.LVL565:
 5133 023c 3420C6E5 		bl	move_window
 5134 0240 3500C6E5 		cmp	r0, #0
 5135              		beq	.L426
 5136 0244 48001BE5 		.loc 1 1541 0
 5137 0248 0130A0E3 		mov	r1, #0
 5138 024c 2E30C0E5 		mov	r2, #32
 5139              		ldr	r0, [fp, #-44]
 5140 0250 0910A0E1 	.LVL566:
 5141              		bl	memset
 5142 0254 FEFFFFEB 		.loc 1 1542 0
 5143 0258 000050E3 		mov	r1, r7
 5144 025c 9FFFFF0A 		mov	r2, #11
 5145              		ldr	r0, [fp, #-44]
 5146 0260 0010A0E3 		bl	memcpy
 5147 0264 2020A0E3 		.loc 1 1543 0
 5148 0268 2C001BE5 		ldrb	r2, [fp, #-45]	@ zero_extendqisi2
 5149              		ldr	r3, [fp, #-44]
 5150 026c FEFFFFEB 		strb	r2, [r3, #12]
 5151              		.loc 1 1544 0
 5152 0270 0710A0E1 		ldr	r3, [fp, #-44]
 5153 0274 0B20A0E3 		mov	r1, #16
 5154 0278 2C001BE5 		strb	r1, [r3, #11]
 5155 027c FEFFFFEB 		.loc 1 1545 0
 5156              		ldr	r2, [fp, #-44]
 5157 0280 2D205BE5 		ldr	r3, [fp, #-104]
 5158 0284 2C301BE5 		strb	r3, [r2, #22]
 5159 0288 0C20C3E5 		ldr	r3, [fp, #-44]
 5160              		ldr	r2, [fp, #-100]
 5161 028c 2C301BE5 		strb	r2, [r3, #23]
 5162 0290 1010A0E3 		ldr	r2, [fp, #-44]
 5163 0294 0B10C3E5 		ldr	r3, [fp, #-96]
 5164              		strb	r3, [r2, #24]
 5165 0298 2C201BE5 		ldr	r3, [fp, #-44]
 5166 029c 68301BE5 		ldr	r2, [fp, #-92]
 5167 02a0 1630C2E5 		strb	r2, [r3, #25]
 5168 02a4 2C301BE5 		.loc 1 1546 0
 5169 02a8 64201BE5 		ldr	r2, [fp, #-44]
 5170 02ac 1720C3E5 		ldr	r3, [fp, #-88]
 5171 02b0 2C201BE5 		strb	r3, [r2, #26]
 5172 02b4 60301BE5 		ldr	r3, [fp, #-44]
 5173 02b8 1830C2E5 		ldr	r2, [fp, #-84]
 5174 02bc 2C301BE5 		strb	r2, [r3, #27]
 5175 02c0 5C201BE5 		.loc 1 1547 0
 5176 02c4 1920C3E5 		ldr	r2, [fp, #-44]
 5177              		strb	r8, [r2, #20]
 5178 02c8 2C201BE5 		ldr	r3, [fp, #-44]
 5179 02cc 58301BE5 		strb	r5, [r3, #21]
 5180 02d0 1A30C2E5 		.loc 1 1549 0
 5181 02d4 2C301BE5 		ldr	r0, [fp, #-72]
 5182 02d8 54201BE5 		bl	sync
 5183 02dc 1B20C3E5 		mov	r4, r0
 5184              	.LVL567:
 5185 02e0 2C201BE5 		b	.L424
 5186 02e4 1480C2E5 	.LVL568:
 5187 02e8 2C301BE5 	.L430:
 5188 02ec 1550C3E5 		.loc 1 1535 0
 5189              		ldr	r3, [r2, #20]
 5190 02f0 48001BE5 		cmp	r3, r1
 5191 02f4 FEFFFFEB 		moveq	r3, #0
 5192 02f8 0040A0E1 		moveq	ip, r3
 5193              		moveq	r2, r3
 5194 02fc 4CFFFFEA 		moveq	r0, r3
 5195              		bne	.L432
 5196              		b	.L431
 5197              	.LFE30:
 5199 0304 010053E1 		.section	.text.f_unlink,"ax",%progbits
 5200 0308 0030A003 		.align	2
 5201 030c 03C0A001 		.global	f_unlink
 5203 0314 0300A001 	f_unlink:
 5204 0318 BFFFFF1A 	.LFB29:
 5205 031c C4FFFFEA 		.loc 1 1451 0
 5206              		@ args = 0, pretend = 0, frame = 40
 5207              		@ frame_needed = 1, uses_anonymous_args = 0
 5208              	.LVL569:
 5209              		mov	ip, sp
 5210              	.LCFI91:
 5211              		stmfd	sp!, {r4, r5, r6, r7, fp, ip, lr, pc}
 5212              	.LCFI92:
 5213              		sub	fp, ip, #4
 5214              	.LCFI93:
 5215              		sub	r3, fp, #28
 5216              		sub	sp, sp, #40
 5217              	.LCFI94:
 5218 0000 0DC0A0E1 		.loc 1 1451 0
 5219              		str	r0, [r3, #-40]!
 5220 0004 F0D82DE9 		.loc 1 1459 0
 5221              		sub	r1, fp, #60
 5222 0008 04B04CE2 		mov	r0, r3
 5223              	.LVL570:
 5224 000c 1C304BE2 		mov	r2, #1
 5225 0010 28D04DE2 		bl	auto_mount
 5226              		.loc 1 1460 0
 5227              		cmp	r0, #0
 5228 0014 280023E5 	.LVL571:
 5229              		.loc 1 1459 0
 5230 0018 3C104BE2 		sub	r4, fp, #64
 5231 001c 0300A0E1 		.loc 1 1460 0
 5232              		beq	.L451
 5233 0020 0120A0E3 	.LVL572:
 5234 0024 FEFFFFEB 	.L440:
 5235              	.LVL573:
 5236 0028 000050E3 		.loc 1 1485 0
 5237              		sub	sp, fp, #28
 5238              		ldmfd	sp, {r4, r5, r6, r7, fp, sp, pc}
 5239 002c 40404BE2 	.LVL574:
 5240              	.L451:
 5241 0030 0100000A 		.loc 1 1461 0
 5242              		mov	r0, r4
 5243              	.LVL575:
 5244              		sub	r1, fp, #44
 5245              		ldr	r2, [fp, #-68]
 5246 0034 1CD04BE2 		sub	r3, fp, #32
 5247 0038 F0A89DE8 		bl	trace_path
 5248              		.loc 1 1462 0
 5249              		cmp	r0, #0
 5250              	.LVL576:
 5251 003c 0400A0E1 		bne	.L440
 5252              	.LVL577:
 5253 0040 2C104BE2 		.loc 1 1463 0
 5254 0044 44201BE5 		ldr	r3, [fp, #-32]
 5255 0048 20304BE2 	.LVL578:
 5256 004c FEFFFFEB 		cmp	r3, #0
 5257              		moveq	r0, #4
 5258 0050 000050E3 		beq	.L440
 5259              		.loc 1 1464 0
 5260 0054 F6FFFF1A 		ldrb	lr, [r3, #11]	@ zero_extendqisi2
 5261              		ands	r5, lr, #1
 5262              		bne	.L442
 5263 0058 20301BE5 		.loc 1 1466 0
 5264              		ldrb	r0, [r3, #21]	@ zero_extendqisi2
 5265 005c 000053E3 	.LVL579:
 5266 0060 0400A003 		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 5267 0064 F2FFFF0A 		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 5268              		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 5269 0068 0BE0D3E5 		.loc 1 1465 0
 5270 006c 01501EE2 		ldr	ip, [fp, #-60]
 5271 0070 3700001A 		.loc 1 1466 0
 5272              		orr	r2, r2, r0, asl #8
 5273 0074 1500D3E5 		orr	r3, r3, r1, asl #8
 5274              		.loc 1 1467 0
 5275 0078 1420D3E5 		tst	lr, #16
 5276 007c 1B10D3E5 		.loc 1 1466 0
 5277 0080 1A30D3E5 		orr	r6, r3, r2, asl #16
 5278              	.LVL580:
 5279 0084 3CC01BE5 		.loc 1 1465 0
 5280              		ldr	r7, [ip, #4]
 5281 0088 002482E1 	.LVL581:
 5282 008c 013483E1 		.loc 1 1467 0
 5283              		beq	.L443
 5284 0090 10001EE3 		.loc 1 1468 0
 5285              		str	r6, [fp, #-52]
 5286 0094 026883E1 	.LBB59:
 5287              	.LBB60:
 5288              		.loc 1 346 0
 5289 0098 04709CE5 		ldr	r3, [ip, #12]
 5290              		.loc 1 345 0
 5291              		sub	r0, r6, #2
 5292 009c 2500000A 	.LVL582:
 5293              		.loc 1 346 0
 5294 00a0 34600BE5 		sub	r3, r3, #2
 5295              		cmp	r0, r3
 5296              		.loc 1 347 0
 5297              		ldrccb	r2, [ip, #43]	@ zero_extendqisi2
 5298 00a4 0C309CE5 		ldrcc	r3, [ip, #24]
 5299              		mlacc	r1, r2, r0, r3
 5300 00a8 020046E2 		.loc 1 346 0
 5301              		movcs	r1, r5
 5302              	.LBE60:
 5303 00ac 023043E2 	.LBE59:
 5304 00b0 030050E1 		.loc 1 1470 0
 5305              		mov	r3, #2	@ movhi
 5306 00b4 2B20DC35 		.loc 1 1469 0
 5307 00b8 18309C35 		str	r1, [fp, #-48]
 5308 00bc 92302130 		.loc 1 1470 0
 5309              		strh	r3, [fp, #-62]	@ movhi
 5310 00c0 0510A021 		b	.L449
 5311              	.LVL583:
 5312              	.L452:
 5313              		.loc 1 1477 0
 5314 00c4 0230A0E3 		ldr	ip, [fp, #-60]
 5315              	.LVL584:
 5316 00c8 30100BE5 	.L449:
 5317              		.loc 1 1472 0
 5318 00cc BE334BE1 		mov	r0, ip
 5319 00d0 000000EA 	.LVL585:
 5320              		ldr	r1, [fp, #-48]
 5321              		bl	move_window
 5322              		cmp	r0, #0
 5323 00d4 3CC01BE5 		.loc 1 1477 0
 5324              		mov	r0, r4
 5325              		.loc 1 1472 0
 5326              		beq	.L446
 5327 00d8 0C00A0E1 		.loc 1 1473 0
 5328              		ldrh	r3, [fp, #-62]
 5329 00dc 30101BE5 		ldr	ip, [fp, #-60]
 5330 00e0 FEFFFFEB 		and	r3, r3, #15
 5331 00e4 000050E3 		mov	r3, r3, asl #5
 5332              		.loc 1 1475 0
 5333 00e8 0400A0E1 		add	r2, ip, r3
 5334              		.loc 1 1474 0
 5335 00ec 1600000A 		add	r3, ip, r3
 5336              		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 5337 00f0 BE335BE1 		cmp	r3, #0
 5338 00f4 3CC01BE5 		beq	.L443
 5339 00f8 0F3003E2 		.loc 1 1475 0
 5340 00fc 8332A0E1 		cmp	r3, #229
 5341              		beq	.L447
 5342 0100 03208CE0 		ldrb	r3, [r2, #59]	@ zero_extendqisi2
 5343              		tst	r3, #8
 5344 0104 03308CE0 		beq	.L442
 5345 0108 3030D3E5 	.L447:
 5346 010c 000053E3 		.loc 1 1477 0
 5347 0110 0800000A 		bl	next_dir_entry
 5348              		cmp	r0, #0
 5349 0114 E50053E3 		bne	.L452
 5350 0118 0200000A 		ldr	ip, [fp, #-60]
 5351 011c 3B30D2E5 	.L443:
 5352 0120 080013E3 		.loc 1 1479 0
 5353 0124 0A00000A 		mov	r0, ip
 5354              		mov	r1, r7
 5355              		bl	move_window
 5356 0128 FEFFFFEB 		cmp	r0, #0
 5357 012c 000050E3 		bne	.L453
 5358 0130 E7FFFF1A 	.L446:
 5359 0134 3CC01BE5 		.loc 1 1484 0
 5360              		mov	r0, #8
 5361              	.LVL586:
 5362 0138 0C00A0E1 		b	.L440
 5363 013c 0710A0E1 	.L442:
 5364 0140 FEFFFFEB 		mov	r0, #6
 5365 0144 000050E3 		b	.L440
 5366 0148 0300001A 	.LVL587:
 5367              	.L453:
 5368              		.loc 1 1480 0
 5369 014c 0800A0E3 		ldr	r3, [fp, #-32]
 5370              		mvn	r2, #26
 5371 0150 B7FFFFEA 		strb	r2, [r3, #0]
 5372              		.loc 1 1481 0
 5373 0154 0600A0E3 		ldr	r0, [fp, #-60]
 5374 0158 B5FFFFEA 		mov	r3, #1
 5375              		strb	r3, [r0, #46]
 5376              		.loc 1 1482 0
 5377              		mov	r1, r6
 5378 015c 20301BE5 		bl	remove_chain
 5379 0160 1A20E0E3 		cmp	r0, #0
 5380 0164 0020C3E5 		beq	.L446
 5381              		.loc 1 1484 0
 5382 0168 3C001BE5 		ldr	r0, [fp, #-60]
 5383 016c 0130A0E3 		bl	sync
 5384 0170 2E30C0E5 		b	.L440
 5385              	.LFE29:
 5387 0178 FEFFFFEB 		.section	.text.f_stat,"ax",%progbits
 5388 017c 000050E3 		.align	2
 5389 0180 F1FFFF0A 		.global	f_stat
 5391 0184 3C001BE5 	f_stat:
 5392 0188 FEFFFFEB 	.LFB26:
 5393 018c A8FFFFEA 		.loc 1 1314 0
 5394              		@ args = 0, pretend = 0, frame = 40
 5395              		@ frame_needed = 1, uses_anonymous_args = 0
 5396              	.LVL588:
 5397              		mov	ip, sp
 5398              	.LCFI95:
 5399              		stmfd	sp!, {r4, r5, fp, ip, lr, pc}
 5400              	.LCFI96:
 5401              		sub	fp, ip, #4
 5402              	.LCFI97:
 5403              		sub	r3, fp, #20
 5404              		sub	sp, sp, #40
 5405              	.LCFI98:
 5406 0000 0DC0A0E1 		.loc 1 1314 0
 5407              		str	r0, [r3, #-40]!
 5408 0004 30D82DE9 		mov	r5, r1
 5409              		.loc 1 1321 0
 5410 0008 04B04CE2 		mov	r0, r3
 5411              	.LVL589:
 5412 000c 14304BE2 		sub	r1, fp, #52
 5413 0010 28D04DE2 	.LVL590:
 5414              		mov	r2, #0
 5415              		bl	auto_mount
 5416 0014 280023E5 		.loc 1 1322 0
 5417 0018 0150A0E1 		subs	r4, r0, #0
 5418              	.LVL591:
 5419 001c 0300A0E1 		beq	.L458
 5420              	.LVL592:
 5421 0020 34104BE2 	.L455:
 5422              		.loc 1 1333 0
 5423 0024 0020A0E3 		mov	r0, r4
 5424 0028 FEFFFFEB 		sub	sp, fp, #20
 5425              		ldmfd	sp, {r4, r5, fp, sp, pc}
 5426 002c 004050E2 	.LVL593:
 5427              	.L458:
 5428 0030 0200000A 		.loc 1 1323 0
 5429              		sub	r0, fp, #56
 5430              		sub	r1, fp, #36
 5431              		ldr	r2, [fp, #-60]
 5432 0034 0400A0E1 		sub	r3, fp, #24
 5433 0038 14D04BE2 		bl	trace_path
 5434 003c 30A89DE8 		.loc 1 1324 0
 5435              		subs	r4, r0, #0
 5436              		bne	.L455
 5437              	.LVL594:
 5438 0040 38004BE2 		.loc 1 1325 0
 5439 0044 24104BE2 		ldr	r1, [fp, #-24]
 5440 0048 3C201BE5 	.LVL595:
 5441 004c 18304BE2 		cmp	r1, #0
 5442 0050 FEFFFFEB 		moveq	r4, #4
 5443              		beq	.L455
 5444 0054 004050E2 		.loc 1 1326 0
 5445 0058 F5FFFF1A 		mov	r0, r5
 5446              		bl	get_fileinfo
 5447              		b	.L455
 5448 005c 18101BE5 	.LFE26:
 5450 0060 000051E3 		.section	.text.f_opendir,"ax",%progbits
 5451 0064 0440A003 		.align	2
 5452 0068 F1FFFF0A 		.global	f_opendir
 5454 006c 0500A0E1 	f_opendir:
 5455 0070 FEFFFFEB 	.LFB24:
 5456 0074 EEFFFFEA 		.loc 1 1242 0
 5457              		@ args = 0, pretend = 0, frame = 20
 5458              		@ frame_needed = 1, uses_anonymous_args = 0
 5459              	.LVL596:
 5460              		mov	ip, sp
 5461              	.LCFI99:
 5462              		stmfd	sp!, {r4, fp, ip, lr, pc}
 5463              	.LCFI100:
 5464              		sub	fp, ip, #4
 5465              	.LCFI101:
 5466              		sub	r3, fp, #16
 5467              		sub	sp, sp, #20
 5468              	.LCFI102:
 5469 0000 0DC0A0E1 		.loc 1 1242 0
 5470              		str	r1, [r3, #-20]!
 5471 0004 10D82DE9 		mov	r4, r0
 5472              		.loc 1 1248 0
 5473 0008 04B04CE2 		add	r1, r4, #4
 5474              	.LVL597:
 5475 000c 10304BE2 		mov	r0, r3
 5476 0010 14D04DE2 	.LVL598:
 5477              		mov	r2, #0
 5478              		bl	auto_mount
 5479 0014 141023E5 		.loc 1 1249 0
 5480 0018 0040A0E1 		subs	ip, r0, #0
 5481              	.LVL599:
 5482 001c 041084E2 		beq	.L469
 5483              	.LVL600:
 5484 0020 0300A0E1 	.L460:
 5485              		.loc 1 1266 0
 5486 0024 0020A0E3 		mov	r0, ip
 5487 0028 FEFFFFEB 		sub	sp, fp, #16
 5488              		ldmfd	sp, {r4, fp, sp, pc}
 5489 002c 00C050E2 	.LVL601:
 5490              	.L469:
 5491 0030 0200000A 		.loc 1 1250 0
 5492              		mov	r0, r4
 5493              		sub	r1, fp, #32
 5494              		ldr	r2, [fp, #-36]
 5495 0034 0C00A0E1 		sub	r3, fp, #20
 5496 0038 10D04BE2 		bl	trace_path
 5497 003c 10A89DE8 	.LVL602:
 5498              		.loc 1 1251 0
 5499              		subs	ip, r0, #0
 5500              	.LVL603:
 5501 0040 0400A0E1 		bne	.L460
 5502 0044 20104BE2 	.LVL604:
 5503 0048 24201BE5 		.loc 1 1252 0
 5504 004c 14304BE2 		ldr	r2, [fp, #-20]
 5505 0050 FEFFFFEB 	.LVL605:
 5506              		cmp	r2, #0
 5507              		beq	.L468
 5508 0054 00C050E2 		.loc 1 1253 0
 5509              		ldrb	r3, [r2, #11]	@ zero_extendqisi2
 5510 0058 F5FFFF1A 		tst	r3, #16
 5511              		bne	.L462
 5512              		mov	ip, #2
 5513 005c 14201BE5 	.L468:
 5514              		ldr	r1, [r4, #4]
 5515 0060 000052E3 	.LVL606:
 5516 0064 0300000A 	.L461:
 5517              		.loc 1 1261 0
 5518 0068 0B30D2E5 		ldrh	r1, [r1, #0]
 5519 006c 100013E3 		strh	r1, [r4, #0]	@ movhi
 5520 0070 0400001A 		b	.L460
 5521 0074 02C0A0E3 	.LVL607:
 5522              	.L462:
 5523 0078 041094E5 		.loc 1 1254 0
 5524              		ldrb	r0, [r2, #21]	@ zero_extendqisi2
 5525              		ldrb	r3, [r2, #20]	@ zero_extendqisi2
 5526              		ldrb	r1, [r2, #27]	@ zero_extendqisi2
 5527 007c B010D1E1 		ldrb	r2, [r2, #26]	@ zero_extendqisi2
 5528 0080 B010C4E1 		orr	r3, r3, r0, asl #8
 5529 0084 EAFFFFEA 		orr	r2, r2, r1, asl #8
 5530              		orr	r2, r2, r3, asl #16
 5531              		str	r2, [r4, #12]
 5532              		.loc 1 1255 0
 5533 0088 1500D2E5 		ldr	r1, [r4, #4]
 5534 008c 1430D2E5 	.LBB61:
 5535 0090 1B10D2E5 	.LBB62:
 5536 0094 1A20D2E5 		.loc 1 346 0
 5537 0098 003483E1 		ldr	r3, [r1, #12]
 5538 009c 012482E1 		.loc 1 345 0
 5539 00a0 032882E1 		sub	lr, r2, #2
 5540 00a4 0C2084E5 	.LVL608:
 5541              		.loc 1 346 0
 5542 00a8 041094E5 		sub	r3, r3, #2
 5543              		cmp	lr, r3
 5544              		.loc 1 347 0
 5545              		ldrccb	r2, [r1, #43]	@ zero_extendqisi2
 5546 00ac 0C3091E5 		ldrcc	r3, [r1, #24]
 5547              		mlacc	r0, r2, lr, r3
 5548 00b0 02E042E2 		.loc 1 346 0
 5549              		movcs	r0, ip
 5550              	.LBE62:
 5551 00b4 023043E2 	.LBE61:
 5552 00b8 03005EE1 		.loc 1 1256 0
 5553              		mov	r3, #2	@ movhi
 5554 00bc 2B20D135 		.loc 1 1255 0
 5555 00c0 18309135 		str	r0, [r4, #16]
 5556 00c4 923E2030 		.loc 1 1256 0
 5557              		strh	r3, [r4, #2]	@ movhi
 5558 00c8 0C00A021 		b	.L461
 5559              	.LFE24:
 5561              		.section	.text.f_open,"ax",%progbits
 5562 00cc 0230A0E3 		.align	2
 5563              		.global	f_open
 5565              	f_open:
 5566 00d4 B230C4E1 	.LFB18:
 5567 00d8 E7FFFFEA 		.loc 1 827 0
 5568              		@ args = 0, pretend = 0, frame = 40
 5569              		@ frame_needed = 1, uses_anonymous_args = 0
 5570              	.LVL609:
 5571              		mov	ip, sp
 5572              	.LCFI103:
 5573              		stmfd	sp!, {r4, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 5574              	.LCFI104:
 5575              		sub	fp, ip, #4
 5576              	.LCFI105:
 5577              		sub	ip, fp, #36
 5578              		sub	sp, sp, #40
 5579              	.LCFI106:
 5580 0000 0DC0A0E1 		.loc 1 827 0
 5581              		str	r1, [ip, #-40]!
 5582 0004 F0DD2DE9 		.loc 1 834 0
 5583              		mov	r3, #0
 5584 0008 04B04CE2 		.loc 1 827 0
 5585              		mov	r4, r2
 5586 000c 24C04BE2 		.loc 1 834 0
 5587 0010 28D04DE2 		str	r3, [r0, #4]
 5588              		.loc 1 827 0
 5589              		mov	r6, r0
 5590 0014 28102CE5 		.loc 1 837 0
 5591              		sub	r1, fp, #68
 5592 0018 0030A0E3 	.LVL610:
 5593              		mov	r0, ip
 5594 001c 0240A0E1 	.LVL611:
 5595              		and	r2, r2, #30
 5596 0020 043080E5 	.LVL612:
 5597              		bl	auto_mount
 5598 0024 0060A0E1 		.loc 1 842 0
 5599              		cmp	r0, #0
 5600 0028 44104BE2 	.LVL613:
 5601              		.loc 1 836 0
 5602 002c 0C00A0E1 		and	r8, r4, #31
 5603              	.LVL614:
 5604 0030 1E2002E2 		.loc 1 837 0
 5605              		sub	r5, fp, #72
 5606 0034 FEFFFFEB 		.loc 1 842 0
 5607              		beq	.L485
 5608 0038 000050E3 	.LVL615:
 5609              	.L472:
 5610              	.LVL616:
 5611 003c 1F8004E2 		.loc 1 905 0
 5612              		sub	sp, fp, #36
 5613              		ldmfd	sp, {r4, r5, r6, r7, r8, sl, fp, sp, pc}
 5614 0040 48504BE2 	.LVL617:
 5615              	.L485:
 5616 0044 0100000A 		.loc 1 843 0
 5617              		sub	sl, fp, #52
 5618              		sub	r7, fp, #40
 5619              		mov	r0, r5
 5620              	.LVL618:
 5621 0048 24D04BE2 		mov	r1, sl
 5622 004c F0AD9DE8 		ldr	r2, [fp, #-76]
 5623              		mov	r3, r7
 5624              		bl	trace_path
 5625              		.loc 1 847 0
 5626 0050 34A04BE2 		tst	r4, #28
 5627 0054 28704BE2 		beq	.L473
 5628 0058 0500A0E1 	.LVL619:
 5629              	.LBB63:
 5630 005c 0A10A0E1 		.loc 1 849 0
 5631 0060 4C201BE5 		cmp	r0, #0
 5632 0064 0730A0E1 	.LVL620:
 5633 0068 FEFFFFEB 		bne	.L486
 5634              		.loc 1 859 0
 5635 006c 1C0014E3 		tst	r4, #4
 5636 0070 4C00000A 		movne	r0, #7
 5637              		bne	.L472
 5638              		.loc 1 861 0
 5639              		ldr	r5, [fp, #-40]
 5640 0074 000050E3 	.LVL621:
 5641              		cmp	r5, #0
 5642 0078 7B00001A 		beq	.L478
 5643              		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 5644 007c 040014E3 		ands	r7, r3, #17
 5645 0080 0700A013 		bne	.L478
 5646 0084 EFFFFF1A 		.loc 1 863 0
 5647              		tst	r4, #8
 5648 0088 28501BE5 		beq	.L484
 5649              		.loc 1 864 0
 5650 008c 000055E3 		ldrb	lr, [r5, #21]	@ zero_extendqisi2
 5651 0090 7100000A 		ldrb	r0, [r5, #20]	@ zero_extendqisi2
 5652 0094 0B30D5E5 	.LVL622:
 5653 0098 117013E2 		ldrb	ip, [r5, #27]	@ zero_extendqisi2
 5654 009c 6E00001A 		ldrb	r1, [r5, #26]	@ zero_extendqisi2
 5655              		.loc 1 865 0
 5656 00a0 080014E3 		strb	r7, [r5, #20]
 5657 00a4 4B00000A 		ldr	r3, [fp, #-40]
 5658              		strb	r7, [r3, #21]
 5659 00a8 15E0D5E5 		.loc 1 866 0
 5660 00ac 1400D5E5 		ldr	r2, [fp, #-40]
 5661              		strb	r7, [r2, #26]
 5662 00b0 1BC0D5E5 		ldr	r3, [fp, #-40]
 5663 00b4 1A10D5E5 		strb	r7, [r3, #27]
 5664              		.loc 1 867 0
 5665 00b8 1470C5E5 		ldr	r2, [fp, #-40]
 5666 00bc 28301BE5 		strb	r7, [r2, #28]
 5667 00c0 1570C3E5 		ldr	r3, [fp, #-40]
 5668              		strb	r7, [r3, #29]
 5669 00c4 28201BE5 		ldr	r2, [fp, #-40]
 5670 00c8 1A70C2E5 		strb	r7, [r2, #30]
 5671 00cc 28301BE5 		ldr	r3, [fp, #-40]
 5672 00d0 1B70C3E5 		strb	r7, [r3, #31]
 5673              		.loc 1 868 0
 5674 00d4 28201BE5 		ldr	r2, [fp, #-68]
 5675 00d8 1C70C2E5 		.loc 1 864 0
 5676 00dc 28301BE5 		orr	r0, r0, lr, asl #8
 5677 00e0 1D70C3E5 		orr	r1, r1, ip, asl #8
 5678 00e4 28201BE5 		orr	r5, r1, r0, asl #16
 5679 00e8 1E70C2E5 	.LVL623:
 5680 00ec 28301BE5 		.loc 1 868 0
 5681 00f0 1F70C3E5 		mov	r3, #1
 5682              		strb	r3, [r2, #46]
 5683 00f4 44201BE5 		.loc 1 870 0
 5684              		mov	r0, r2
 5685 00f8 0E0480E1 		mov	r1, r5
 5686 00fc 0C1481E1 		.loc 1 869 0
 5687 0100 005881E1 		ldr	r4, [r2, #4]
 5688              	.LVL624:
 5689              		.loc 1 870 0
 5690 0104 0130A0E3 		bl	remove_chain
 5691 0108 2E30C2E5 		cmp	r0, #0
 5692              		beq	.L480
 5693 010c 0200A0E1 		mov	r1, r4
 5694 0110 0510A0E1 		ldr	r0, [fp, #-68]
 5695              		bl	move_window
 5696 0114 044092E5 		cmp	r0, #0
 5697              		beq	.L480
 5698              		.loc 1 872 0
 5699 0118 FEFFFFEB 		ldr	r3, [fp, #-68]
 5700 011c 000050E3 		sub	r2, r5, #1
 5701 0120 6B00000A 		str	r2, [r3, #28]
 5702 0124 0410A0E1 	.LVL625:
 5703 0128 44001BE5 	.L475:
 5704 012c FEFFFFEB 		.loc 1 876 0
 5705 0130 000050E3 		ldr	r3, [fp, #-40]
 5706 0134 6600000A 		mov	r2, #0
 5707              		strb	r2, [r3, #11]
 5708 0138 44301BE5 		.loc 1 877 0
 5709 013c 012045E2 		bl	get_fattime
 5710 0140 1C2083E5 		.loc 1 878 0
 5711              		ldr	r2, [fp, #-40]
 5712              		and	r1, r0, #255
 5713              		strb	r1, [r2, #14]
 5714 0144 28301BE5 		ldr	r1, [fp, #-40]
 5715 0148 0020A0E3 		mov	r3, r0, asl #16
 5716 014c 0B20C3E5 		mov	r3, r3, lsr #24
 5717              		strb	r3, [r1, #15]
 5718 0150 FEFFFFEB 		ldr	r3, [fp, #-40]
 5719              		mov	r2, r0, lsr #16
 5720 0154 28201BE5 		and	r2, r2, #255
 5721 0158 FF1000E2 		strb	r2, [r3, #16]
 5722 015c 0E10C2E5 		ldr	r3, [fp, #-40]
 5723 0160 28101BE5 		mov	r0, r0, lsr #24
 5724 0164 0038A0E1 		strb	r0, [r3, #17]
 5725 0168 233CA0E1 		.loc 1 879 0
 5726 016c 0F30C1E5 		ldr	r2, [fp, #-68]
 5727 0170 28301BE5 		mov	r3, #1
 5728 0174 2028A0E1 		strb	r3, [r2, #46]
 5729 0178 FF2002E2 		.loc 1 880 0
 5730 017c 1020C3E5 		orr	r8, r8, #32
 5731 0180 28301BE5 	.LVL626:
 5732 0184 200CA0E1 		ldr	r5, [fp, #-40]
 5733 0188 1100C3E5 	.LVL627:
 5734              		ldr	ip, [fp, #-68]
 5735 018c 44201BE5 		b	.L476
 5736 0190 0130A0E3 	.LVL628:
 5737 0194 2E30C2E5 	.L473:
 5738              	.LBE63:
 5739 0198 208088E3 		.loc 1 886 0
 5740              		cmp	r0, #0
 5741 019c 28501BE5 	.LVL629:
 5742              		bne	.L472
 5743 01a0 44C01BE5 		.loc 1 887 0
 5744 01a4 0D0000EA 		ldr	r5, [fp, #-40]
 5745              	.LVL630:
 5746              		cmp	r5, #0
 5747              		beq	.L481
 5748              		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 5749 01a8 000050E3 		tst	r3, #16
 5750              		bne	.L481
 5751 01ac A5FFFF1A 		.loc 1 890 0
 5752              		tst	r4, #2
 5753 01b0 28501BE5 		beq	.L484
 5754              		tst	r3, #1
 5755 01b4 000055E3 		bne	.L478
 5756 01b8 2900000A 	.L484:
 5757 01bc 0B30D5E5 		ldr	ip, [fp, #-68]
 5758 01c0 100013E3 		mov	r2, ip
 5759 01c4 2600001A 	.LVL631:
 5760              	.L476:
 5761 01c8 020014E3 		.loc 1 893 0
 5762 01cc 0100000A 		ldr	r3, [r2, #4]
 5763 01d0 010013E3 		.loc 1 894 0
 5764 01d4 2000001A 		str	r5, [r6, #32]
 5765              		.loc 1 896 0
 5766 01d8 44C01BE5 		strb	r8, [r6, #2]
 5767 01dc 0C20A0E1 		.loc 1 893 0
 5768              		str	r3, [r6, #28]
 5769              		.loc 1 897 0
 5770              		ldrb	r0, [r5, #21]	@ zero_extendqisi2
 5771 01e0 043092E5 	.LVL632:
 5772              		ldrb	r2, [r5, #20]	@ zero_extendqisi2
 5773 01e4 205086E5 		ldrb	r1, [r5, #27]	@ zero_extendqisi2
 5774              		ldrb	r3, [r5, #26]	@ zero_extendqisi2
 5775 01e8 0280C6E5 		orr	r2, r2, r0, asl #8
 5776              		orr	r3, r3, r1, asl #8
 5777 01ec 1C3086E5 		orr	r3, r3, r2, asl #16
 5778              		str	r3, [r6, #16]
 5779 01f0 1500D5E5 		.loc 1 899 0
 5780              		ldrb	r2, [r5, #31]	@ zero_extendqisi2
 5781 01f4 1420D5E5 		ldrb	r3, [r5, #30]	@ zero_extendqisi2
 5782 01f8 1B10D5E5 		mov	r3, r3, asl #16
 5783 01fc 1A30D5E5 		orr	r3, r3, r2, asl #24
 5784 0200 002482E1 		.loc 1 900 0
 5785 0204 013483E1 		mvn	r2, #0
 5786 0208 023883E1 		.loc 1 899 0
 5787 020c 103086E5 		ldrb	r0, [r5, #29]	@ zero_extendqisi2
 5788              		ldrb	r1, [r5, #28]	@ zero_extendqisi2
 5789 0210 1F20D5E5 		.loc 1 900 0
 5790 0214 1E30D5E5 		strb	r2, [r6, #3]
 5791 0218 0338A0E1 		.loc 1 899 0
 5792 021c 023C83E1 		orr	r3, r3, r1
 5793              		.loc 1 902 0
 5794 0220 0020E0E3 		ldrh	r1, [ip, #0]
 5795              		.loc 1 900 0
 5796 0224 1D00D5E5 		add	r2, r2, #1
 5797 0228 1C10D5E5 		.loc 1 899 0
 5798              		orr	r3, r3, r0, asl #8
 5799 022c 0320C6E5 		.loc 1 902 0
 5800              		strh	r1, [r6, #0]	@ movhi
 5801 0230 013083E1 		.loc 1 899 0
 5802              		str	r3, [r6, #12]
 5803 0234 B010DCE1 		.loc 1 900 0
 5804              		str	r2, [r6, #8]
 5805 0238 012082E2 		.loc 1 901 0
 5806              		str	r2, [r6, #24]
 5807 023c 003483E1 		.loc 1 902 0
 5808              		str	ip, [r6, #4]
 5809 0240 B010C6E1 		mov	r0, r2
 5810              	.LVL633:
 5811 0244 0C3086E5 		b	.L472
 5812              	.LVL634:
 5813 0248 082086E5 	.L478:
 5814              		.loc 1 904 0
 5815 024c 182086E5 		mov	r0, #6
 5816              		b	.L472
 5817 0250 04C086E5 	.L481:
 5818 0254 0200A0E1 		mov	r0, #2
 5819              		b	.L472
 5820 0258 7AFFFFEA 	.LVL635:
 5821              	.L486:
 5822              	.LBB64:
 5823              		.loc 1 850 0
 5824 025c 0600A0E3 		cmp	r0, #2
 5825 0260 78FFFFEA 		bne	.L472
 5826              		.loc 1 851 0
 5827 0264 0200A0E3 		mov	r0, r5
 5828 0268 76FFFFEA 	.LVL636:
 5829              		mov	r1, r7
 5830              		bl	reserve_direntry
 5831              		.loc 1 852 0
 5832              		cmp	r0, #0
 5833 026c 020050E3 	.LVL637:
 5834 0270 74FFFF1A 		bne	.L472
 5835              		.loc 1 853 0
 5836 0274 0500A0E1 		mov	r1, r0
 5837              		mov	r2, #32
 5838 0278 0710A0E1 		ldr	r0, [fp, #-40]
 5839 027c FEFFFFEB 	.LVL638:
 5840              		bl	memset
 5841 0280 000050E3 		.loc 1 854 0
 5842              		mov	r1, sl
 5843 0284 6FFFFF1A 		mov	r2, #11
 5844              		ldr	r0, [fp, #-40]
 5845 0288 0010A0E1 		bl	memcpy
 5846 028c 2020A0E3 		.loc 1 856 0
 5847 0290 28001BE5 		orr	r1, r8, #8
 5848              		.loc 1 855 0
 5849 0294 FEFFFFEB 		ldrb	r2, [fp, #-41]	@ zero_extendqisi2
 5850              		ldr	r3, [fp, #-40]
 5851 0298 0A10A0E1 		.loc 1 875 0
 5852 029c 0B20A0E3 		tst	r1, #8
 5853 02a0 28001BE5 		.loc 1 855 0
 5854 02a4 FEFFFFEB 		strb	r2, [r3, #12]
 5855              		.loc 1 856 0
 5856 02a8 081088E3 		and	r8, r1, #255
 5857              	.LVL639:
 5858 02ac 29205BE5 		.loc 1 875 0
 5859 02b0 28301BE5 		bne	.L475
 5860              	.LVL640:
 5861 02b4 080011E3 		ldr	ip, [fp, #-68]
 5862              		ldr	r5, [fp, #-40]
 5863 02b8 0C20C3E5 		mov	r2, ip
 5864              		b	.L476
 5865 02bc FF8001E2 	.LVL641:
 5866              	.L480:
 5867              	.LBE64:
 5868 02c0 9FFFFF1A 		.loc 1 904 0
 5869              		mov	r0, #8
 5870 02c4 44C01BE5 	.LVL642:
 5871 02c8 28501BE5 		b	.L472
 5872 02cc 0C20A0E1 	.LFE18:
 5874              		.section	.bss.FatFs,"aw",%nobits
 5875              		.align	2
 5878 02d4 0800A0E3 	FatFs:
 5879              		.space	4
 5880 02d8 5AFFFFEA 		.section	.bss.fsid,"aw",%nobits
 5881              		.align	1
 5884              	fsid:
 5885              		.space	2
 5886              		.section	.debug_frame,"",%progbits
 5887              	.Lframe0:
 5888 0000 00000000 		.4byte	.LECIE0-.LSCIE0
 5889              	.LSCIE0:
 5890              		.4byte	0xffffffff
 5891              		.byte	0x1
 5892              		.ascii	"\000"
 5893              		.uleb128 0x1
 5894 0000 0000     		.sleb128 -4
 6942              		.4byte	.LCFI2
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:13     .text.get_fileinfo:00000000 get_fileinfo
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:20     .text.get_fileinfo:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:162    .text.f_mount:00000000 f_mount
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:168    .text.f_mount:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:203    .text.f_mount:00000044 $d
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5887   .bss.FatFs:00000000 FatFs
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:218    .text.f_mkfs:00000000 f_mkfs
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:224    .text.f_mkfs:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1118   .text.f_mkfs:00000880 $d
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1127   .text.validate:00000000 validate
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1133   .text.validate:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1174   .text.move_window:00000000 move_window
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1180   .text.move_window:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1284   .text.get_cluster:00000000 get_cluster
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1290   .text.get_cluster:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1433   .text.next_dir_entry:00000000 next_dir_entry
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1440   .text.next_dir_entry:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1540   .text.put_cluster:00000000 put_cluster
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1546   .text.put_cluster:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1708   .text.create_chain:00000000 create_chain
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1714   .text.create_chain:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1841   .text.remove_chain:00000000 remove_chain
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1847   .text.remove_chain:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1922   .text.f_truncate:00000000 f_truncate
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:1928   .text.f_truncate:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2026   .text.reserve_direntry:00000000 reserve_direntry
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2032   .text.reserve_direntry:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2218   .text.sync:00000000 sync
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2224   .text.sync:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2364   .text.f_readdir:00000000 f_readdir
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2370   .text.f_readdir:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2469   .text.f_sync:00000000 f_sync
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2475   .text.f_sync:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2587   .text.f_close:00000000 f_close
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2593   .text.f_close:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2617   .text.f_lseek:00000000 f_lseek
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2623   .text.f_lseek:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2935   .text.f_write:00000000 f_write
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:2941   .text.f_write:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:3242   .text.f_read:00000000 f_read
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:3248   .text.f_read:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:3525   .text.check_fs:00000000 check_fs
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:3531   .text.check_fs:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:3583   .text.check_fs:0000008c $d
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:3590   .text.auto_mount:00000000 auto_mount
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:3596   .text.auto_mount:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4008   .text.auto_mount:000003e0 $d
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5893   .bss.fsid:00000000 fsid
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4018   .text.f_getfree:00000000 f_getfree
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4024   .text.f_getfree:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4190   .text.trace_path:00000000 trace_path
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4196   .text.trace_path:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4579   .text.f_rename:00000000 f_rename
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4585   .text.f_rename:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4718   .text.f_utime:00000000 f_utime
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4724   .text.f_utime:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4799   .text.f_chmod:00000000 f_chmod
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4805   .text.f_chmod:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4884   .text.f_mkdir:00000000 f_mkdir
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:4890   .text.f_mkdir:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5212   .text.f_unlink:00000000 f_unlink
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5218   .text.f_unlink:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5400   .text.f_stat:00000000 f_stat
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5406   .text.f_stat:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5463   .text.f_opendir:00000000 f_opendir
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5469   .text.f_opendir:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5574   .text.f_open:00000000 f_open
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5580   .text.f_open:00000000 $a
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:5897   .debug_frame:00000000 $d
C:\DOCUME~1\pyang\LOCALS~1\Temp/ccosqJXe.s:6946   .debug_loc:00000000 $d

UNDEFINED SYMBOLS
__udivsi3
disk_initialize
disk_ioctl
disk_write
memset
get_fattime
memcpy
disk_status
disk_read
memcmp
